/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CreateFieldRequest;
import com.konfigthis.client.model.CustomTableMetadata;
import com.konfigthis.client.model.CustomTableMetadataList;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.FieldId;
import com.konfigthis.client.model.FlatListItemId;
import com.konfigthis.client.model.NewListItem;
import com.konfigthis.client.model.ObjectsMetadata;
import com.konfigthis.client.model.UpdateFieldRequest;
import com.konfigthis.client.model.UpdateListItemRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MetadataApi
 */
@Disabled
public class MetadataApiTest {

    private static MetadataApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new MetadataApi(apiClient);
    }

    /**
     * Create a new field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewFieldTest() throws ApiException {
        String name = null;
        String category = null;
        String type = null;
        String description = null;
        String historical = null;
        FieldId response = api.addNewField(name, category, type)
                .description(description)
                .historical(historical)
                .execute();
        // TODO: test validations
    }

    /**
     * Add a new item to an existing list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addNewItemToNamedListTest() throws ApiException {
        String name = null;
        String listName = null;
        Integer parentId = null;
        FlatListItemId response = api.addNewItemToNamedList(name, listName)
                .parentId(parentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an existing field.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFieldTest() throws ApiException {
        String fieldId = null;
        api.deleteField(fieldId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an item from an existing list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteItemFromCompanyNamedListTest() throws ApiException {
        String listName = null;
        String itemId = null;
        api.deleteItemFromCompanyNamedList(listName, itemId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all company fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyFieldsTest() throws ApiException {
        List<Field> response = api.getCompanyFields()
                .execute();
        // TODO: test validations
    }

    /**
     * Get all company lists
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCompanyNamedListsTest() throws ApiException {
        Boolean includeArchived = null;
        List<List> response = api.getCompanyNamedLists()
                .includeArchived(includeArchived)
                .execute();
        // TODO: test validations
    }

    /**
     * Read metadata of custom tables defined
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCustomTableMetadataTest() throws ApiException {
        CustomTableMetadataList response = api.getCustomTableMetadata()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific company list by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getNamedListTest() throws ApiException {
        String listName = null;
        Boolean includeArchived = null;
        List response = api.getNamedList(listName)
                .includeArchived(includeArchived)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all positions fields
     *
     * Returns a list of all fields of object type position.&lt;br/&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPositionFieldsTest() throws ApiException {
        ObjectsMetadata response = api.getPositionFields()
                .execute();
        // TODO: test validations
    }

    /**
     * Read metadata for specific custom table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTableDetailsTest() throws ApiException {
        String customTableId = null;
        CustomTableMetadata response = api.getTableDetails(customTableId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing field
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFieldTest() throws ApiException {
        String fieldId = null;
        String description = null;
        String name = null;
        api.updateField(fieldId)
                .description(description)
                .name(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an existing item from a list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateItemFromNamedListTest() throws ApiException {
        String listName = null;
        String itemId = null;
        String name = null;
        Integer parentId = null;
        api.updateItemFromNamedList(listName, itemId)
                .name(name)
                .parentId(parentId)
                .execute();
        // TODO: test validations
    }

}
