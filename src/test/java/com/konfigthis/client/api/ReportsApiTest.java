/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Error;
import java.io.File;
import com.konfigthis.client.model.Reports;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsApi
 */
@Disabled
public class ReportsApiTest {

    private static ReportsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ReportsApi(apiClient);
    }

    /**
     * Download the report by ID
     *
     * Returns a report data file in the specified format.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadByIdTest() throws ApiException {
        Double reportId = null;
        String format = null;
        Boolean includeInfo = null;
        String locale = null;
        String humanReadable = null;
        File response = api.downloadById(reportId, format)
                .includeInfo(includeInfo)
                .locale(locale)
                .humanReadable(humanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * Download report by file URL
     *
     * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.&lt;br /&gt;(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadReportFileTest() throws ApiException {
        String reportName = null;
        File response = api.downloadReportFile(reportName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get the report download URL for polling
     *
     * Returns the polling URL report file of the specified format under \&quot;Location\&quot; in the response header.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadUrlTest() throws ApiException {
        Double reportId = null;
        String format = null;
        Boolean includeInfo = null;
        String locale = null;
        String humanReadable = null;
        api.getDownloadUrl(reportId, format)
                .includeInfo(includeInfo)
                .locale(locale)
                .humanReadable(humanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * Read company reports
     *
     * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAccessibleReportsTest() throws ApiException {
        Reports response = api.listAccessibleReports()
                .execute();
        // TODO: test validations
    }

}
