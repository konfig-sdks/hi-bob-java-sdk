/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ChangeEmail;
import com.konfigthis.client.model.CreateEmployeeRequest;
import com.konfigthis.client.model.CreateEmployeeRequestWork;
import com.konfigthis.client.model.CurrencyValue;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeFilter;
import com.konfigthis.client.model.EmployeeTermination;
import com.konfigthis.client.model.EmployeeTerminationNoticePeriod;
import com.konfigthis.client.model.Employees;
import com.konfigthis.client.model.EmployeesProfiles;
import com.konfigthis.client.model.EmploymentEntries;
import com.konfigthis.client.model.EmploymentEntry;
import com.konfigthis.client.model.EquityEntries;
import com.konfigthis.client.model.EquityEntry;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.InvitationByWizard;
import com.konfigthis.client.model.LifeCycleEntries;
import java.time.LocalDate;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequest;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequestAbout;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequestPersonal;
import com.konfigthis.client.model.ReadEmployeesRequestReference;
import com.konfigthis.client.model.ReadSingleEmployeeRequestReference;
import com.konfigthis.client.model.SalaryEntries;
import com.konfigthis.client.model.SalaryEntry;
import com.konfigthis.client.model.StartDateUpdate;
import com.konfigthis.client.model.TrainingEntries;
import com.konfigthis.client.model.TrainingEntry;
import com.konfigthis.client.model.UploadAvatar;
import com.konfigthis.client.model.VariableEntries;
import com.konfigthis.client.model.VariableEntry;
import com.konfigthis.client.model.WorkEntries;
import com.konfigthis.client.model.WorkEntry;
import com.konfigthis.client.model.WorkEntryAllOfReportsTo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PeopleApi
 */
@Disabled
public class PeopleApiTest {

    private static PeopleApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PeopleApi(apiClient);
    }

    /**
     * Create company employee.
     *
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  &lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmployeeRecordTest() throws ApiException {
        String firstName = null;
        String surname = null;
        String email = null;
        CreateEmployeeRequestWork work = null;
        Employee response = api.createEmployeeRecord(firstName, surname, email)
                .work(work)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new employment entry for a given employee.
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEmploymentEntryTest() throws ApiException {
        LocalDate effectiveDate = null;
        String id = null;
        Integer id = null;
        String reason = null;
        String contract = null;
        String type = null;
        String salaryPayType = null;
        api.createEmploymentEntry(effectiveDate, id)
                .id(id)
                .reason(reason)
                .contract(contract)
                .type(type)
                .salaryPayType(salaryPayType)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new equity grant for a given employee.
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createEquityGrantTest() throws ApiException {
        Double quantity = null;
        String equityType = null;
        String id = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        LocalDate vestingCommencementDate = null;
        String consentNumber = null;
        LocalDate grantDate = null;
        LocalDate optionExpiration = null;
        CurrencyValue exercisePrice = null;
        String vestingTerm = null;
        String grantType = null;
        Double vestingSchedule = null;
        Double grantNumber = null;
        String grantStatus = null;
        api.createEquityGrant(quantity, equityType, id)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .vestingCommencementDate(vestingCommencementDate)
                .consentNumber(consentNumber)
                .grantDate(grantDate)
                .optionExpiration(optionExpiration)
                .exercisePrice(exercisePrice)
                .vestingTerm(vestingTerm)
                .grantType(grantType)
                .vestingSchedule(vestingSchedule)
                .grantNumber(grantNumber)
                .grantStatus(grantStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new salary entry for a given employee.
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewSalaryEntryTest() throws ApiException {
        CurrencyValue base = null;
        String payPeriod = null;
        String id = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        String payFrequency = null;
        api.createNewSalaryEntry(base, payPeriod, id)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .payFrequency(payFrequency)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new training records for a given employee
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrainingRecordTest() throws ApiException {
        String id = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        String description = null;
        String name = null;
        CurrencyValue cost = null;
        String status = null;
        String frequency = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Double documentId = null;
        api.createTrainingRecord(id)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .description(description)
                .name(name)
                .cost(cost)
                .status(status)
                .frequency(frequency)
                .startDate(startDate)
                .endDate(endDate)
                .documentId(documentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new variable payment for a given employee.
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVariablePaymentTest() throws ApiException {
        CurrencyValue amount = null;
        String paymentPeriod = null;
        String id = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        String variableType = null;
        Double companyPercent = null;
        Double departmentPercent = null;
        Double individualPercent = null;
        api.createVariablePayment(amount, paymentPeriod, id)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .variableType(variableType)
                .companyPercent(companyPercent)
                .departmentPercent(departmentPercent)
                .individualPercent(individualPercent)
                .execute();
        // TODO: test validations
    }

    /**
     * Creates a new work entry for a given employee.
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWorkEntryTest() throws ApiException {
        String id = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        String title = null;
        String department = null;
        String site = null;
        Integer siteId = null;
        WorkEntryAllOfReportsTo reportsTo = null;
        Object customColumns = null;
        api.createWorkEntry(id)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .title(title)
                .department(department)
                .site(site)
                .siteId(siteId)
                .reportsTo(reportsTo)
                .customColumns(customColumns)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes an employment entry from a given employee&#39;s employment history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmploymentEntryTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteEmploymentEntry(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes an equity grant for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEquityGrantTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteEquityGrant(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a salary entry from the employee&#39;s list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSalaryEntryTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteSalaryEntry(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a training record for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrainingRecordTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteTrainingRecord(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes any training records for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrainingRecord_0Test() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteTrainingRecord_0(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Deletes a work entry from a given employee&#39;s work history.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWorkEntryTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        api.deleteWorkEntry(id, entryId)
                .execute();
        // TODO: test validations
    }

    /**
     * Read avatar for an employee ID.
     *
     * Returns the avatar image URL of the employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvatarUrlTest() throws ApiException {
        String employeeId = null;
        api.getAvatarUrl(employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Read avatar for logged-in user
     *
     * Returns the avatar image URL of the logged-in user.&lt;b&gt;Supported user types:&lt;/b&gt; Employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAvatarUrl_0Test() throws ApiException {
        api.getAvatarUrl_0()
                .execute();
        // TODO: test validations
    }

    /**
     * Read avatar for an employee email
     *
     * Returns the avatar image URL of the employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailAvatarTest() throws ApiException {
        String email = null;
        api.getEmailAvatar()
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * List employee&#39;s employment history.
     *
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;Returns a list of employment history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmploymentHistoryTest() throws ApiException {
        String id = null;
        EmploymentEntries response = api.getEmploymentHistory(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List employee&#39;s salary history.
     *
     * Returns a list of salary history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSalaryHistoryTest() throws ApiException {
        String id = null;
        SalaryEntries response = api.getSalaryHistory(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List employee&#39;s work history
     *
     * Returns a list of work history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkHistoryTest() throws ApiException {
        String id = null;
        WorkEntries response = api.getWorkHistory(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Invite an employee with a welcome wizard ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteEmployeeWizardTest() throws ApiException {
        Integer welcomeWizardId = null;
        String employeeId = null;
        api.inviteEmployeeWizard(welcomeWizardId, employeeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Read the public profile section of all active employees.
     *
     * Returns the public section of all  active employees of the logged-in user company.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActiveEmployeesTest() throws ApiException {
        String sortBy = null;
        EmployeesProfiles response = api.listActiveEmployees()
                .sortBy(sortBy)
                .execute();
        // TODO: test validations
    }

    /**
     * List employee&#39;s life-cycle status history.
     *
     * Returns a list of life-cycle history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeeLifecycleTest() throws ApiException {
        String id = null;
        LifeCycleEntries response = api.listEmployeeLifecycle(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Read all company employees
     *
     * &lt;b&gt;Note:&lt;/b&gt; Deprecated at the end of March 2024. Please use &lt;b&gt;/people/search&lt;/b&gt; (\&quot;Search for employees\&quot;) instead. &lt;br/&gt;&lt;br/&gt; This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.&lt;br /&gt;&lt;br&gt; &lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEmployeesTest() throws ApiException {
        Boolean showInactive = null;
        Boolean humanReadable = null;
        Boolean includeHumanReadable = null;
        Employees response = api.listEmployees()
                .showInactive(showInactive)
                .humanReadable(humanReadable)
                .includeHumanReadable(includeHumanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * List the employee&#39;s equity grants.
     *
     * Returns a list of equity grants for a given employee.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEquityGrantsTest() throws ApiException {
        String id = null;
        EquityEntries response = api.listEquityGrants(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List the employee&#39;s training records.
     *
     * Returns a list of training records for a given employee&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTrainingRecordsTest() throws ApiException {
        String id = null;
        TrainingEntries response = api.listTrainingRecords(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List employee&#39;s variable payments
     *
     * Returns a list of variable payments for a given employee.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVariablePaymentsTest() throws ApiException {
        String id = null;
        VariableEntries response = api.listVariablePayments(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Read company employee by ID.
     *
     * &lt;b&gt;Note:&lt;/b&gt; Deprecated at the end of March 2024. Please use &lt;b&gt;POST /people/{identifier}&lt;/b&gt; (\&quot;Read company employee fields by ID.\&quot;) instead. &lt;br/&gt;&lt;br/&gt; Returns the employee by the specified ID.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readEmployeeByIdTest() throws ApiException {
        String identifier = null;
        List<String> fields = null;
        Boolean humanReadable = null;
        Boolean includeHumanReadable = null;
        Employees response = api.readEmployeeById(identifier, fields)
                .humanReadable(humanReadable)
                .includeHumanReadable(includeHumanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * Read company employee fields by employee ID.
     *
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;Returns the employee&#39;s fields by the specified ID or email.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readEmployeeFieldsTest() throws ApiException {
        String identifier = null;
        List<String> fields = null;
        String humanReadable = null;
        Employees response = api.readEmployeeFields(identifier)
                .fields(fields)
                .humanReadable(humanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * Revoke access to Bob for an employee.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokeAccessToEmployeeTest() throws ApiException {
        String identifier = null;
        api.revokeAccessToEmployee(identifier)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for employees
     *
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.&lt;br /&gt; &lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchEmployeesTest() throws ApiException {
        List<String> fields = null;
        List<EmployeeFilter> filters = null;
        Boolean showInactive = null;
        String humanReadable = null;
        Employees response = api.searchEmployees()
                .fields(fields)
                .filters(filters)
                .showInactive(showInactive)
                .humanReadable(humanReadable)
                .execute();
        // TODO: test validations
    }

    /**
     * Set or update an employee&#39;s start date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setStartDateTest() throws ApiException {
        LocalDate startDate = null;
        String employeeId = null;
        String reason = null;
        api.setStartDate(startDate, employeeId)
                .reason(reason)
                .execute();
        // TODO: test validations
    }

    /**
     * Terminate company employee.
     *
     * This changes the employee’s status to Terminated according to specified termination date. &lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void terminateEmployeeTest() throws ApiException {
        LocalDate terminationDate = null;
        String identifier = null;
        String terminationReason = null;
        String reasonType = null;
        EmployeeTerminationNoticePeriod noticePeriod = null;
        LocalDate lastDayOfWork = null;
        api.terminateEmployee(terminationDate, identifier)
                .terminationReason(terminationReason)
                .reasonType(reasonType)
                .noticePeriod(noticePeriod)
                .lastDayOfWork(lastDayOfWork)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an employee&#39;s email address.
     *
     * Change an employee&#39;s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmailTest() throws ApiException {
        String id = null;
        String email = null;
        api.updateEmail(id)
                .email(email)
                .execute();
        // TODO: test validations
    }

    /**
     * Update company employee.
     *
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  &lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmployeeRecordTest() throws ApiException {
        String identifier = null;
        String firstName = null;
        PeopleUpdateEmployeeRecordRequestPersonal personal = null;
        PeopleUpdateEmployeeRecordRequestAbout about = null;
        api.updateEmployeeRecord(identifier)
                .firstName(firstName)
                .personal(personal)
                .about(about)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates an employment entry from a given employee&#39;s employment history.
     *
     * &lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEmploymentEntryTest() throws ApiException {
        LocalDate effectiveDate = null;
        String id = null;
        Integer entryId = null;
        Integer id = null;
        String reason = null;
        String contract = null;
        String type = null;
        String salaryPayType = null;
        api.updateEmploymentEntry(effectiveDate, id, entryId)
                .id(id)
                .reason(reason)
                .contract(contract)
                .type(type)
                .salaryPayType(salaryPayType)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates an equity grant for an employee
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;. - Basic: [] - Bearer: []
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateEquityGrantForEmployeeTest() throws ApiException {
        Double quantity = null;
        String equityType = null;
        String id = null;
        Integer entryId = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        LocalDate vestingCommencementDate = null;
        String consentNumber = null;
        LocalDate grantDate = null;
        LocalDate optionExpiration = null;
        CurrencyValue exercisePrice = null;
        String vestingTerm = null;
        String grantType = null;
        Double vestingSchedule = null;
        Double grantNumber = null;
        String grantStatus = null;
        api.updateEquityGrantForEmployee(quantity, equityType, id, entryId)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .vestingCommencementDate(vestingCommencementDate)
                .consentNumber(consentNumber)
                .grantDate(grantDate)
                .optionExpiration(optionExpiration)
                .exercisePrice(exercisePrice)
                .vestingTerm(vestingTerm)
                .grantType(grantType)
                .vestingSchedule(vestingSchedule)
                .grantNumber(grantNumber)
                .grantStatus(grantStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Updates a work entry from employee&#39;s work history
     *
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWorkEntryTest() throws ApiException {
        String id = null;
        Integer entryId = null;
        Integer id = null;
        String reason = null;
        LocalDate effectiveDate = null;
        String title = null;
        String department = null;
        String site = null;
        Integer siteId = null;
        WorkEntryAllOfReportsTo reportsTo = null;
        Object customColumns = null;
        api.updateWorkEntry(id, entryId)
                .id(id)
                .reason(reason)
                .effectiveDate(effectiveDate)
                .title(title)
                .department(department)
                .site(site)
                .siteId(siteId)
                .reportsTo(reportsTo)
                .customColumns(customColumns)
                .execute();
        // TODO: test validations
    }

    /**
     * Upload employee&#39;s avatar by image url
     *
     * Upload an employee&#39;s Avatar by providing a URL to the image to upload.&lt;br /&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadEmployeeAvatarUrlTest() throws ApiException {
        String url = null;
        String employeeId = null;
        api.uploadEmployeeAvatarUrl(url, employeeId)
                .execute();
        // TODO: test validations
    }

}
