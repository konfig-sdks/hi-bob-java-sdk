/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CurrencyValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EquityEntryAllOf
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EquityEntryAllOf {
  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Double quantity;

  public static final String SERIALIZED_NAME_EQUITY_TYPE = "equityType";
  @SerializedName(SERIALIZED_NAME_EQUITY_TYPE)
  private String equityType;

  public static final String SERIALIZED_NAME_VESTING_COMMENCEMENT_DATE = "vestingCommencementDate";
  @SerializedName(SERIALIZED_NAME_VESTING_COMMENCEMENT_DATE)
  private LocalDate vestingCommencementDate;

  public static final String SERIALIZED_NAME_CONSENT_NUMBER = "consentNumber";
  @SerializedName(SERIALIZED_NAME_CONSENT_NUMBER)
  private String consentNumber;

  public static final String SERIALIZED_NAME_GRANT_DATE = "grantDate";
  @SerializedName(SERIALIZED_NAME_GRANT_DATE)
  private LocalDate grantDate;

  public static final String SERIALIZED_NAME_OPTION_EXPIRATION = "optionExpiration";
  @SerializedName(SERIALIZED_NAME_OPTION_EXPIRATION)
  private LocalDate optionExpiration;

  public static final String SERIALIZED_NAME_EXERCISE_PRICE = "exercisePrice";
  @SerializedName(SERIALIZED_NAME_EXERCISE_PRICE)
  private CurrencyValue exercisePrice;

  public static final String SERIALIZED_NAME_VESTING_TERM = "vestingTerm";
  @SerializedName(SERIALIZED_NAME_VESTING_TERM)
  private String vestingTerm;

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private String grantType;

  public static final String SERIALIZED_NAME_VESTING_SCHEDULE = "vestingSchedule";
  @SerializedName(SERIALIZED_NAME_VESTING_SCHEDULE)
  private Double vestingSchedule;

  public static final String SERIALIZED_NAME_GRANT_NUMBER = "grantNumber";
  @SerializedName(SERIALIZED_NAME_GRANT_NUMBER)
  private Double grantNumber;

  public static final String SERIALIZED_NAME_GRANT_STATUS = "grantStatus";
  @SerializedName(SERIALIZED_NAME_GRANT_STATUS)
  private String grantStatus;

  public EquityEntryAllOf() {
  }

  public EquityEntryAllOf quantity(Double quantity) {
    
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The number of equities granted.
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The number of equities granted.")

  public Double getQuantity() {
    return quantity;
  }


  public void setQuantity(Double quantity) {
    
    
    
    this.quantity = quantity;
  }


  public EquityEntryAllOf equityType(String equityType) {
    
    
    
    
    this.equityType = equityType;
    return this;
  }

   /**
   * The type of the grant.
   * @return equityType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of the grant.")

  public String getEquityType() {
    return equityType;
  }


  public void setEquityType(String equityType) {
    
    
    
    this.equityType = equityType;
  }


  public EquityEntryAllOf vestingCommencementDate(LocalDate vestingCommencementDate) {
    
    
    
    
    this.vestingCommencementDate = vestingCommencementDate;
    return this;
  }

   /**
   * Vesting commencement date.
   * @return vestingCommencementDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Vesting commencement date.")

  public LocalDate getVestingCommencementDate() {
    return vestingCommencementDate;
  }


  public void setVestingCommencementDate(LocalDate vestingCommencementDate) {
    
    
    
    this.vestingCommencementDate = vestingCommencementDate;
  }


  public EquityEntryAllOf consentNumber(String consentNumber) {
    
    
    
    
    this.consentNumber = consentNumber;
    return this;
  }

   /**
   * Consent number.
   * @return consentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Consent number.")

  public String getConsentNumber() {
    return consentNumber;
  }


  public void setConsentNumber(String consentNumber) {
    
    
    
    this.consentNumber = consentNumber;
  }


  public EquityEntryAllOf grantDate(LocalDate grantDate) {
    
    
    
    
    this.grantDate = grantDate;
    return this;
  }

   /**
   * Date the equity was granted.
   * @return grantDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the equity was granted.")

  public LocalDate getGrantDate() {
    return grantDate;
  }


  public void setGrantDate(LocalDate grantDate) {
    
    
    
    this.grantDate = grantDate;
  }


  public EquityEntryAllOf optionExpiration(LocalDate optionExpiration) {
    
    
    
    
    this.optionExpiration = optionExpiration;
    return this;
  }

   /**
   * Date the options expire.
   * @return optionExpiration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date the options expire.")

  public LocalDate getOptionExpiration() {
    return optionExpiration;
  }


  public void setOptionExpiration(LocalDate optionExpiration) {
    
    
    
    this.optionExpiration = optionExpiration;
  }


  public EquityEntryAllOf exercisePrice(CurrencyValue exercisePrice) {
    
    
    
    
    this.exercisePrice = exercisePrice;
    return this;
  }

   /**
   * Get exercisePrice
   * @return exercisePrice
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CurrencyValue getExercisePrice() {
    return exercisePrice;
  }


  public void setExercisePrice(CurrencyValue exercisePrice) {
    
    
    
    this.exercisePrice = exercisePrice;
  }


  public EquityEntryAllOf vestingTerm(String vestingTerm) {
    
    
    
    
    this.vestingTerm = vestingTerm;
    return this;
  }

   /**
   * Terms for exercising this grant.
   * @return vestingTerm
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Terms for exercising this grant.")

  public String getVestingTerm() {
    return vestingTerm;
  }


  public void setVestingTerm(String vestingTerm) {
    
    
    
    this.vestingTerm = vestingTerm;
  }


  public EquityEntryAllOf grantType(String grantType) {
    
    
    
    
    this.grantType = grantType;
    return this;
  }

   /**
   * Grant type. One of: Initial Grant, Merit Grant
   * @return grantType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Grant type. One of: Initial Grant, Merit Grant")

  public String getGrantType() {
    return grantType;
  }


  public void setGrantType(String grantType) {
    
    
    
    this.grantType = grantType;
  }


  public EquityEntryAllOf vestingSchedule(Double vestingSchedule) {
    
    
    
    
    this.vestingSchedule = vestingSchedule;
    return this;
  }

  public EquityEntryAllOf vestingSchedule(Integer vestingSchedule) {
    
    
    
    
    this.vestingSchedule = vestingSchedule.doubleValue();
    return this;
  }

   /**
   * The vesting schedule ID assigned to this grant.
   * @return vestingSchedule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The vesting schedule ID assigned to this grant.")

  public Double getVestingSchedule() {
    return vestingSchedule;
  }


  public void setVestingSchedule(Double vestingSchedule) {
    
    
    
    this.vestingSchedule = vestingSchedule;
  }


  public EquityEntryAllOf grantNumber(Double grantNumber) {
    
    
    
    
    this.grantNumber = grantNumber;
    return this;
  }

   /**
   * The Grant number for employee.
   * @return grantNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Grant number for employee.")

  public Double getGrantNumber() {
    return grantNumber;
  }


  public void setGrantNumber(Double grantNumber) {
    
    
    
    this.grantNumber = grantNumber;
  }


  public EquityEntryAllOf grantStatus(String grantStatus) {
    
    
    
    
    this.grantStatus = grantStatus;
    return this;
  }

   /**
   * Grant status. one of: Granted, Pending Approval
   * @return grantStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Grant status. one of: Granted, Pending Approval")

  public String getGrantStatus() {
    return grantStatus;
  }


  public void setGrantStatus(String grantStatus) {
    
    
    
    this.grantStatus = grantStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EquityEntryAllOf instance itself
   */
  public EquityEntryAllOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EquityEntryAllOf equityEntryAllOf = (EquityEntryAllOf) o;
    return Objects.equals(this.quantity, equityEntryAllOf.quantity) &&
        Objects.equals(this.equityType, equityEntryAllOf.equityType) &&
        Objects.equals(this.vestingCommencementDate, equityEntryAllOf.vestingCommencementDate) &&
        Objects.equals(this.consentNumber, equityEntryAllOf.consentNumber) &&
        Objects.equals(this.grantDate, equityEntryAllOf.grantDate) &&
        Objects.equals(this.optionExpiration, equityEntryAllOf.optionExpiration) &&
        Objects.equals(this.exercisePrice, equityEntryAllOf.exercisePrice) &&
        Objects.equals(this.vestingTerm, equityEntryAllOf.vestingTerm) &&
        Objects.equals(this.grantType, equityEntryAllOf.grantType) &&
        Objects.equals(this.vestingSchedule, equityEntryAllOf.vestingSchedule) &&
        Objects.equals(this.grantNumber, equityEntryAllOf.grantNumber) &&
        Objects.equals(this.grantStatus, equityEntryAllOf.grantStatus)&&
        Objects.equals(this.additionalProperties, equityEntryAllOf.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(quantity, equityType, vestingCommencementDate, consentNumber, grantDate, optionExpiration, exercisePrice, vestingTerm, grantType, vestingSchedule, grantNumber, grantStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EquityEntryAllOf {\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    equityType: ").append(toIndentedString(equityType)).append("\n");
    sb.append("    vestingCommencementDate: ").append(toIndentedString(vestingCommencementDate)).append("\n");
    sb.append("    consentNumber: ").append(toIndentedString(consentNumber)).append("\n");
    sb.append("    grantDate: ").append(toIndentedString(grantDate)).append("\n");
    sb.append("    optionExpiration: ").append(toIndentedString(optionExpiration)).append("\n");
    sb.append("    exercisePrice: ").append(toIndentedString(exercisePrice)).append("\n");
    sb.append("    vestingTerm: ").append(toIndentedString(vestingTerm)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    vestingSchedule: ").append(toIndentedString(vestingSchedule)).append("\n");
    sb.append("    grantNumber: ").append(toIndentedString(grantNumber)).append("\n");
    sb.append("    grantStatus: ").append(toIndentedString(grantStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("quantity");
    openapiFields.add("equityType");
    openapiFields.add("vestingCommencementDate");
    openapiFields.add("consentNumber");
    openapiFields.add("grantDate");
    openapiFields.add("optionExpiration");
    openapiFields.add("exercisePrice");
    openapiFields.add("vestingTerm");
    openapiFields.add("grantType");
    openapiFields.add("vestingSchedule");
    openapiFields.add("grantNumber");
    openapiFields.add("grantStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EquityEntryAllOf
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EquityEntryAllOf.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EquityEntryAllOf is not found in the empty JSON string", EquityEntryAllOf.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("equityType") != null && !jsonObj.get("equityType").isJsonNull()) && !jsonObj.get("equityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `equityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("equityType").toString()));
      }
      if ((jsonObj.get("consentNumber") != null && !jsonObj.get("consentNumber").isJsonNull()) && !jsonObj.get("consentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consentNumber").toString()));
      }
      // validate the optional field `exercisePrice`
      if (jsonObj.get("exercisePrice") != null && !jsonObj.get("exercisePrice").isJsonNull()) {
        CurrencyValue.validateJsonObject(jsonObj.getAsJsonObject("exercisePrice"));
      }
      if ((jsonObj.get("vestingTerm") != null && !jsonObj.get("vestingTerm").isJsonNull()) && !jsonObj.get("vestingTerm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vestingTerm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vestingTerm").toString()));
      }
      if ((jsonObj.get("grantType") != null && !jsonObj.get("grantType").isJsonNull()) && !jsonObj.get("grantType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantType").toString()));
      }
      if ((jsonObj.get("grantStatus") != null && !jsonObj.get("grantStatus").isJsonNull()) && !jsonObj.get("grantStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grantStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grantStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EquityEntryAllOf.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EquityEntryAllOf' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EquityEntryAllOf> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EquityEntryAllOf.class));

       return (TypeAdapter<T>) new TypeAdapter<EquityEntryAllOf>() {
           @Override
           public void write(JsonWriter out, EquityEntryAllOf value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EquityEntryAllOf read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EquityEntryAllOf instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EquityEntryAllOf given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EquityEntryAllOf
  * @throws IOException if the JSON string is invalid with respect to EquityEntryAllOf
  */
  public static EquityEntryAllOf fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EquityEntryAllOf.class);
  }

 /**
  * Convert an instance of EquityEntryAllOf to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

