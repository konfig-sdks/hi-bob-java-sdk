/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OutToday
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OutToday {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private UUID employeeId;

  public static final String SERIALIZED_NAME_EMPLOYEE_DISPLAY_NAME = "employeeDisplayName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_DISPLAY_NAME)
  private String employeeDisplayName;

  public static final String SERIALIZED_NAME_EMPLOYEE_EMAIL = "employeeEmail";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_EMAIL)
  private String employeeEmail;

  public static final String SERIALIZED_NAME_POLICY_TYPE_DISPLAY_NAME = "policyTypeDisplayName";
  @SerializedName(SERIALIZED_NAME_POLICY_TYPE_DISPLAY_NAME)
  private String policyTypeDisplayName;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private LocalDate startDate;

  public static final String SERIALIZED_NAME_START_DATE_PORTION = "startDatePortion";
  @SerializedName(SERIALIZED_NAME_START_DATE_PORTION)
  private String startDatePortion;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private LocalDate endDate;

  public static final String SERIALIZED_NAME_END_DATE_PORTION = "endDatePortion";
  @SerializedName(SERIALIZED_NAME_END_DATE_PORTION)
  private String endDatePortion;

  /**
   * The type of request duration.&lt;br&gt; &lt;b&gt;portionOnRange&lt;/b&gt; is when the request is for every morning or every afternoon during the days requested.&lt;br&gt; &lt;b&gt;hoursOnRange&lt;/b&gt; is when the request is for X hours every day during the days requested.
   */
  @JsonAdapter(RequestRangeTypeEnum.Adapter.class)
 public enum RequestRangeTypeEnum {
    DAYS("days"),
    
    HOURS("hours"),
    
    PORTIONONRANGE("portionOnRange"),
    
    HOURSONRANGE("hoursOnRange");

    private String value;

    RequestRangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RequestRangeTypeEnum fromValue(String value) {
      for (RequestRangeTypeEnum b : RequestRangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RequestRangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RequestRangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RequestRangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RequestRangeTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_REQUEST_RANGE_TYPE = "requestRangeType";
  @SerializedName(SERIALIZED_NAME_REQUEST_RANGE_TYPE)
  private RequestRangeTypeEnum requestRangeType;

  public static final String SERIALIZED_NAME_DAY_PORTION = "dayPortion";
  @SerializedName(SERIALIZED_NAME_DAY_PORTION)
  private String dayPortion;

  public static final String SERIALIZED_NAME_DAILY_HOURS = "dailyHours";
  @SerializedName(SERIALIZED_NAME_DAILY_HOURS)
  private Double dailyHours;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private LocalDate date;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Integer hours;

  public static final String SERIALIZED_NAME_MINUTES = "minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private Integer minutes;

  public OutToday() {
  }

  public OutToday employeeId(UUID employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Employee ID.
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee ID.")

  public UUID getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(UUID employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public OutToday employeeDisplayName(String employeeDisplayName) {
    
    
    
    
    this.employeeDisplayName = employeeDisplayName;
    return this;
  }

   /**
   * Employee display name.
   * @return employeeDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee display name.")

  public String getEmployeeDisplayName() {
    return employeeDisplayName;
  }


  public void setEmployeeDisplayName(String employeeDisplayName) {
    
    
    
    this.employeeDisplayName = employeeDisplayName;
  }


  public OutToday employeeEmail(String employeeEmail) {
    
    
    
    
    this.employeeEmail = employeeEmail;
    return this;
  }

   /**
   * Employee email address.
   * @return employeeEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee email address.")

  public String getEmployeeEmail() {
    return employeeEmail;
  }


  public void setEmployeeEmail(String employeeEmail) {
    
    
    
    this.employeeEmail = employeeEmail;
  }


  public OutToday policyTypeDisplayName(String policyTypeDisplayName) {
    
    
    
    
    this.policyTypeDisplayName = policyTypeDisplayName;
    return this;
  }

   /**
   * Display name of the policy type.
   * @return policyTypeDisplayName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Display name of the policy type.")

  public String getPolicyTypeDisplayName() {
    return policyTypeDisplayName;
  }


  public void setPolicyTypeDisplayName(String policyTypeDisplayName) {
    
    
    
    this.policyTypeDisplayName = policyTypeDisplayName;
  }


  public OutToday startDate(LocalDate startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Date of the first day of the time off (not relevant for requests using the hours type).
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the first day of the time off (not relevant for requests using the hours type).")

  public LocalDate getStartDate() {
    return startDate;
  }


  public void setStartDate(LocalDate startDate) {
    
    
    
    this.startDate = startDate;
  }


  public OutToday startDatePortion(String startDatePortion) {
    
    
    
    
    this.startDatePortion = startDatePortion;
    return this;
  }

   /**
   * What portion of the first day is included - all_day, morning or afternoon (relevant for request using the days type).
   * @return startDatePortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What portion of the first day is included - all_day, morning or afternoon (relevant for request using the days type).")

  public String getStartDatePortion() {
    return startDatePortion;
  }


  public void setStartDatePortion(String startDatePortion) {
    
    
    
    this.startDatePortion = startDatePortion;
  }


  public OutToday endDate(LocalDate endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Date of the last day of the time off (not relevant for requests using the hours type).
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the last day of the time off (not relevant for requests using the hours type).")

  public LocalDate getEndDate() {
    return endDate;
  }


  public void setEndDate(LocalDate endDate) {
    
    
    
    this.endDate = endDate;
  }


  public OutToday endDatePortion(String endDatePortion) {
    
    
    
    
    this.endDatePortion = endDatePortion;
    return this;
  }

   /**
   * What portion of the last day is included - all_day, morning or afternoon (relevant for request using the days type).
   * @return endDatePortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What portion of the last day is included - all_day, morning or afternoon (relevant for request using the days type).")

  public String getEndDatePortion() {
    return endDatePortion;
  }


  public void setEndDatePortion(String endDatePortion) {
    
    
    
    this.endDatePortion = endDatePortion;
  }


  public OutToday requestRangeType(RequestRangeTypeEnum requestRangeType) {
    
    
    
    
    this.requestRangeType = requestRangeType;
    return this;
  }

   /**
   * The type of request duration.&lt;br&gt; &lt;b&gt;portionOnRange&lt;/b&gt; is when the request is for every morning or every afternoon during the days requested.&lt;br&gt; &lt;b&gt;hoursOnRange&lt;/b&gt; is when the request is for X hours every day during the days requested.
   * @return requestRangeType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The type of request duration.<br> <b>portionOnRange</b> is when the request is for every morning or every afternoon during the days requested.<br> <b>hoursOnRange</b> is when the request is for X hours every day during the days requested.")

  public RequestRangeTypeEnum getRequestRangeType() {
    return requestRangeType;
  }


  public void setRequestRangeType(RequestRangeTypeEnum requestRangeType) {
    
    
    
    this.requestRangeType = requestRangeType;
  }


  public OutToday dayPortion(String dayPortion) {
    
    
    
    
    this.dayPortion = dayPortion;
    return this;
  }

   /**
   * What portion of the request&#39;s days is included - morning or afternoon (relevant for request using the portionOnRange type).
   * @return dayPortion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "What portion of the request's days is included - morning or afternoon (relevant for request using the portionOnRange type).")

  public String getDayPortion() {
    return dayPortion;
  }


  public void setDayPortion(String dayPortion) {
    
    
    
    this.dayPortion = dayPortion;
  }


  public OutToday dailyHours(Double dailyHours) {
    
    
    
    
    this.dailyHours = dailyHours;
    return this;
  }

  public OutToday dailyHours(Integer dailyHours) {
    
    
    
    
    this.dailyHours = dailyHours.doubleValue();
    return this;
  }

   /**
   * The time off duration in hours for every request&#39;s days (relevant for requests with hoursOnRange type).
   * @return dailyHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time off duration in hours for every request's days (relevant for requests with hoursOnRange type).")

  public Double getDailyHours() {
    return dailyHours;
  }


  public void setDailyHours(Double dailyHours) {
    
    
    
    this.dailyHours = dailyHours;
  }


  public OutToday date(LocalDate date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Date of the time off (relevant for requests using the hours type).
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of the time off (relevant for requests using the hours type).")

  public LocalDate getDate() {
    return date;
  }


  public void setDate(LocalDate date) {
    
    
    
    this.date = date;
  }


  public OutToday hours(Integer hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

   /**
   * The time off duration in hours for the date (relevant for requests with hours type).
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The time off duration in hours for the date (relevant for requests with hours type).")

  public Integer getHours() {
    return hours;
  }


  public void setHours(Integer hours) {
    
    
    
    this.hours = hours;
  }


  public OutToday minutes(Integer minutes) {
    
    
    
    
    this.minutes = minutes;
    return this;
  }

   /**
   * Relevant for requests using the hours type.
   * @return minutes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Relevant for requests using the hours type.")

  public Integer getMinutes() {
    return minutes;
  }


  public void setMinutes(Integer minutes) {
    
    
    
    this.minutes = minutes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OutToday instance itself
   */
  public OutToday putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutToday outToday = (OutToday) o;
    return Objects.equals(this.employeeId, outToday.employeeId) &&
        Objects.equals(this.employeeDisplayName, outToday.employeeDisplayName) &&
        Objects.equals(this.employeeEmail, outToday.employeeEmail) &&
        Objects.equals(this.policyTypeDisplayName, outToday.policyTypeDisplayName) &&
        Objects.equals(this.startDate, outToday.startDate) &&
        Objects.equals(this.startDatePortion, outToday.startDatePortion) &&
        Objects.equals(this.endDate, outToday.endDate) &&
        Objects.equals(this.endDatePortion, outToday.endDatePortion) &&
        Objects.equals(this.requestRangeType, outToday.requestRangeType) &&
        Objects.equals(this.dayPortion, outToday.dayPortion) &&
        Objects.equals(this.dailyHours, outToday.dailyHours) &&
        Objects.equals(this.date, outToday.date) &&
        Objects.equals(this.hours, outToday.hours) &&
        Objects.equals(this.minutes, outToday.minutes)&&
        Objects.equals(this.additionalProperties, outToday.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, employeeDisplayName, employeeEmail, policyTypeDisplayName, startDate, startDatePortion, endDate, endDatePortion, requestRangeType, dayPortion, dailyHours, date, hours, minutes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutToday {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    employeeDisplayName: ").append(toIndentedString(employeeDisplayName)).append("\n");
    sb.append("    employeeEmail: ").append(toIndentedString(employeeEmail)).append("\n");
    sb.append("    policyTypeDisplayName: ").append(toIndentedString(policyTypeDisplayName)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startDatePortion: ").append(toIndentedString(startDatePortion)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endDatePortion: ").append(toIndentedString(endDatePortion)).append("\n");
    sb.append("    requestRangeType: ").append(toIndentedString(requestRangeType)).append("\n");
    sb.append("    dayPortion: ").append(toIndentedString(dayPortion)).append("\n");
    sb.append("    dailyHours: ").append(toIndentedString(dailyHours)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("employeeDisplayName");
    openapiFields.add("employeeEmail");
    openapiFields.add("policyTypeDisplayName");
    openapiFields.add("startDate");
    openapiFields.add("startDatePortion");
    openapiFields.add("endDate");
    openapiFields.add("endDatePortion");
    openapiFields.add("requestRangeType");
    openapiFields.add("dayPortion");
    openapiFields.add("dailyHours");
    openapiFields.add("date");
    openapiFields.add("hours");
    openapiFields.add("minutes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OutToday
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OutToday.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OutToday is not found in the empty JSON string", OutToday.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("employeeDisplayName") != null && !jsonObj.get("employeeDisplayName").isJsonNull()) && !jsonObj.get("employeeDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeDisplayName").toString()));
      }
      if ((jsonObj.get("employeeEmail") != null && !jsonObj.get("employeeEmail").isJsonNull()) && !jsonObj.get("employeeEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeEmail").toString()));
      }
      if ((jsonObj.get("policyTypeDisplayName") != null && !jsonObj.get("policyTypeDisplayName").isJsonNull()) && !jsonObj.get("policyTypeDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyTypeDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyTypeDisplayName").toString()));
      }
      if ((jsonObj.get("startDatePortion") != null && !jsonObj.get("startDatePortion").isJsonNull()) && !jsonObj.get("startDatePortion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDatePortion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDatePortion").toString()));
      }
      if ((jsonObj.get("endDatePortion") != null && !jsonObj.get("endDatePortion").isJsonNull()) && !jsonObj.get("endDatePortion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDatePortion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDatePortion").toString()));
      }
      if ((jsonObj.get("requestRangeType") != null && !jsonObj.get("requestRangeType").isJsonNull()) && !jsonObj.get("requestRangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestRangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestRangeType").toString()));
      }
      if ((jsonObj.get("dayPortion") != null && !jsonObj.get("dayPortion").isJsonNull()) && !jsonObj.get("dayPortion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dayPortion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dayPortion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OutToday.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OutToday' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OutToday> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OutToday.class));

       return (TypeAdapter<T>) new TypeAdapter<OutToday>() {
           @Override
           public void write(JsonWriter out, OutToday value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OutToday read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OutToday instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OutToday given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OutToday
  * @throws IOException if the JSON string is invalid with respect to OutToday
  */
  public static OutToday fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OutToday.class);
  }

 /**
  * Convert an instance of OutToday to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

