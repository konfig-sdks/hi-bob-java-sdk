/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BalanceResult
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BalanceResult {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_TOTAL_BALANCE_AS_OF_DATE = "totalBalanceAsOfDate";
  @SerializedName(SERIALIZED_NAME_TOTAL_BALANCE_AS_OF_DATE)
  private Double totalBalanceAsOfDate;

  public static final String SERIALIZED_NAME_TOTAL_ROUNDED_BALANCE_AS_OF_DATE = "totalRoundedBalanceAsOfDate";
  @SerializedName(SERIALIZED_NAME_TOTAL_ROUNDED_BALANCE_AS_OF_DATE)
  private Double totalRoundedBalanceAsOfDate;

  public static final String SERIALIZED_NAME_POINT_IN_TIME = "pointInTime";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME)
  private LocalDate pointInTime;

  public static final String SERIALIZED_NAME_STARTING_BALANCE = "startingBalance";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE)
  private Double startingBalance;

  public static final String SERIALIZED_NAME_STARTING_BALANCE_AS_OF = "startingBalanceAsOf";
  @SerializedName(SERIALIZED_NAME_STARTING_BALANCE_AS_OF)
  private LocalDate startingBalanceAsOf;

  public static final String SERIALIZED_NAME_TOTAL_TAKEN = "totalTaken";
  @SerializedName(SERIALIZED_NAME_TOTAL_TAKEN)
  private Double totalTaken;

  public static final String SERIALIZED_NAME_TOTAL_ADMIN_ADJUSTMENTS = "totalAdminAdjustments";
  @SerializedName(SERIALIZED_NAME_TOTAL_ADMIN_ADJUSTMENTS)
  private Double totalAdminAdjustments;

  public static final String SERIALIZED_NAME_TOTAL_SYSTEM_ADJUSTMENTS = "totalSystemAdjustments";
  @SerializedName(SERIALIZED_NAME_TOTAL_SYSTEM_ADJUSTMENTS)
  private Double totalSystemAdjustments;

  public static final String SERIALIZED_NAME_ANNUAL_ALLOWANCE = "annualAllowance";
  @SerializedName(SERIALIZED_NAME_ANNUAL_ALLOWANCE)
  private Double annualAllowance;

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  private String policy;

  public BalanceResult() {
  }

  public BalanceResult employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Employee ID.
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Employee ID.")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public BalanceResult totalBalanceAsOfDate(Double totalBalanceAsOfDate) {
    
    
    
    
    this.totalBalanceAsOfDate = totalBalanceAsOfDate;
    return this;
  }

  public BalanceResult totalBalanceAsOfDate(Integer totalBalanceAsOfDate) {
    
    
    
    
    this.totalBalanceAsOfDate = totalBalanceAsOfDate.doubleValue();
    return this;
  }

   /**
   * The retrieved balance as of this date.
   * @return totalBalanceAsOfDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The retrieved balance as of this date.")

  public Double getTotalBalanceAsOfDate() {
    return totalBalanceAsOfDate;
  }


  public void setTotalBalanceAsOfDate(Double totalBalanceAsOfDate) {
    
    
    
    this.totalBalanceAsOfDate = totalBalanceAsOfDate;
  }


  public BalanceResult totalRoundedBalanceAsOfDate(Double totalRoundedBalanceAsOfDate) {
    
    
    
    
    this.totalRoundedBalanceAsOfDate = totalRoundedBalanceAsOfDate;
    return this;
  }

  public BalanceResult totalRoundedBalanceAsOfDate(Integer totalRoundedBalanceAsOfDate) {
    
    
    
    
    this.totalRoundedBalanceAsOfDate = totalRoundedBalanceAsOfDate.doubleValue();
    return this;
  }

   /**
   * The retrieved rounded balance as of this date.
   * @return totalRoundedBalanceAsOfDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The retrieved rounded balance as of this date.")

  public Double getTotalRoundedBalanceAsOfDate() {
    return totalRoundedBalanceAsOfDate;
  }


  public void setTotalRoundedBalanceAsOfDate(Double totalRoundedBalanceAsOfDate) {
    
    
    
    this.totalRoundedBalanceAsOfDate = totalRoundedBalanceAsOfDate;
  }


  public BalanceResult pointInTime(LocalDate pointInTime) {
    
    
    
    
    this.pointInTime = pointInTime;
    return this;
  }

   /**
   * The balance date.
   * @return pointInTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The balance date.")

  public LocalDate getPointInTime() {
    return pointInTime;
  }


  public void setPointInTime(LocalDate pointInTime) {
    
    
    
    this.pointInTime = pointInTime;
  }


  public BalanceResult startingBalance(Double startingBalance) {
    
    
    
    
    this.startingBalance = startingBalance;
    return this;
  }

  public BalanceResult startingBalance(Integer startingBalance) {
    
    
    
    
    this.startingBalance = startingBalance.doubleValue();
    return this;
  }

   /**
   * The balance as of the cycle start date.
   * @return startingBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The balance as of the cycle start date.")

  public Double getStartingBalance() {
    return startingBalance;
  }


  public void setStartingBalance(Double startingBalance) {
    
    
    
    this.startingBalance = startingBalance;
  }


  public BalanceResult startingBalanceAsOf(LocalDate startingBalanceAsOf) {
    
    
    
    
    this.startingBalanceAsOf = startingBalanceAsOf;
    return this;
  }

   /**
   * The cycle start date.
   * @return startingBalanceAsOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The cycle start date.")

  public LocalDate getStartingBalanceAsOf() {
    return startingBalanceAsOf;
  }


  public void setStartingBalanceAsOf(LocalDate startingBalanceAsOf) {
    
    
    
    this.startingBalanceAsOf = startingBalanceAsOf;
  }


  public BalanceResult totalTaken(Double totalTaken) {
    
    
    
    
    this.totalTaken = totalTaken;
    return this;
  }

  public BalanceResult totalTaken(Integer totalTaken) {
    
    
    
    
    this.totalTaken = totalTaken.doubleValue();
    return this;
  }

   /**
   * Total number of days/hours taken.
   * @return totalTaken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of days/hours taken.")

  public Double getTotalTaken() {
    return totalTaken;
  }


  public void setTotalTaken(Double totalTaken) {
    
    
    
    this.totalTaken = totalTaken;
  }


  public BalanceResult totalAdminAdjustments(Double totalAdminAdjustments) {
    
    
    
    
    this.totalAdminAdjustments = totalAdminAdjustments;
    return this;
  }

  public BalanceResult totalAdminAdjustments(Integer totalAdminAdjustments) {
    
    
    
    
    this.totalAdminAdjustments = totalAdminAdjustments.doubleValue();
    return this;
  }

   /**
   * Total number of days/hours manually adjusted.
   * @return totalAdminAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of days/hours manually adjusted.")

  public Double getTotalAdminAdjustments() {
    return totalAdminAdjustments;
  }


  public void setTotalAdminAdjustments(Double totalAdminAdjustments) {
    
    
    
    this.totalAdminAdjustments = totalAdminAdjustments;
  }


  public BalanceResult totalSystemAdjustments(Double totalSystemAdjustments) {
    
    
    
    
    this.totalSystemAdjustments = totalSystemAdjustments;
    return this;
  }

  public BalanceResult totalSystemAdjustments(Integer totalSystemAdjustments) {
    
    
    
    
    this.totalSystemAdjustments = totalSystemAdjustments.doubleValue();
    return this;
  }

   /**
   * Total number of days/hours adjusted.
   * @return totalSystemAdjustments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of days/hours adjusted.")

  public Double getTotalSystemAdjustments() {
    return totalSystemAdjustments;
  }


  public void setTotalSystemAdjustments(Double totalSystemAdjustments) {
    
    
    
    this.totalSystemAdjustments = totalSystemAdjustments;
  }


  public BalanceResult annualAllowance(Double annualAllowance) {
    
    
    
    
    this.annualAllowance = annualAllowance;
    return this;
  }

  public BalanceResult annualAllowance(Integer annualAllowance) {
    
    
    
    
    this.annualAllowance = annualAllowance.doubleValue();
    return this;
  }

   /**
   * Annual allowance.
   * @return annualAllowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Annual allowance.")

  public Double getAnnualAllowance() {
    return annualAllowance;
  }


  public void setAnnualAllowance(Double annualAllowance) {
    
    
    
    this.annualAllowance = annualAllowance;
  }


  public BalanceResult policy(String policy) {
    
    
    
    
    this.policy = policy;
    return this;
  }

   /**
   * Policy name.
   * @return policy
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Policy name.")

  public String getPolicy() {
    return policy;
  }


  public void setPolicy(String policy) {
    
    
    
    this.policy = policy;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BalanceResult instance itself
   */
  public BalanceResult putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceResult balanceResult = (BalanceResult) o;
    return Objects.equals(this.employeeId, balanceResult.employeeId) &&
        Objects.equals(this.totalBalanceAsOfDate, balanceResult.totalBalanceAsOfDate) &&
        Objects.equals(this.totalRoundedBalanceAsOfDate, balanceResult.totalRoundedBalanceAsOfDate) &&
        Objects.equals(this.pointInTime, balanceResult.pointInTime) &&
        Objects.equals(this.startingBalance, balanceResult.startingBalance) &&
        Objects.equals(this.startingBalanceAsOf, balanceResult.startingBalanceAsOf) &&
        Objects.equals(this.totalTaken, balanceResult.totalTaken) &&
        Objects.equals(this.totalAdminAdjustments, balanceResult.totalAdminAdjustments) &&
        Objects.equals(this.totalSystemAdjustments, balanceResult.totalSystemAdjustments) &&
        Objects.equals(this.annualAllowance, balanceResult.annualAllowance) &&
        Objects.equals(this.policy, balanceResult.policy)&&
        Objects.equals(this.additionalProperties, balanceResult.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, totalBalanceAsOfDate, totalRoundedBalanceAsOfDate, pointInTime, startingBalance, startingBalanceAsOf, totalTaken, totalAdminAdjustments, totalSystemAdjustments, annualAllowance, policy, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceResult {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    totalBalanceAsOfDate: ").append(toIndentedString(totalBalanceAsOfDate)).append("\n");
    sb.append("    totalRoundedBalanceAsOfDate: ").append(toIndentedString(totalRoundedBalanceAsOfDate)).append("\n");
    sb.append("    pointInTime: ").append(toIndentedString(pointInTime)).append("\n");
    sb.append("    startingBalance: ").append(toIndentedString(startingBalance)).append("\n");
    sb.append("    startingBalanceAsOf: ").append(toIndentedString(startingBalanceAsOf)).append("\n");
    sb.append("    totalTaken: ").append(toIndentedString(totalTaken)).append("\n");
    sb.append("    totalAdminAdjustments: ").append(toIndentedString(totalAdminAdjustments)).append("\n");
    sb.append("    totalSystemAdjustments: ").append(toIndentedString(totalSystemAdjustments)).append("\n");
    sb.append("    annualAllowance: ").append(toIndentedString(annualAllowance)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("totalBalanceAsOfDate");
    openapiFields.add("totalRoundedBalanceAsOfDate");
    openapiFields.add("pointInTime");
    openapiFields.add("startingBalance");
    openapiFields.add("startingBalanceAsOf");
    openapiFields.add("totalTaken");
    openapiFields.add("totalAdminAdjustments");
    openapiFields.add("totalSystemAdjustments");
    openapiFields.add("annualAllowance");
    openapiFields.add("policy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BalanceResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BalanceResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BalanceResult is not found in the empty JSON string", BalanceResult.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("policy") != null && !jsonObj.get("policy").isJsonNull()) && !jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BalanceResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BalanceResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BalanceResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BalanceResult.class));

       return (TypeAdapter<T>) new TypeAdapter<BalanceResult>() {
           @Override
           public void write(JsonWriter out, BalanceResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BalanceResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BalanceResult instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BalanceResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BalanceResult
  * @throws IOException if the JSON string is invalid with respect to BalanceResult
  */
  public static BalanceResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BalanceResult.class);
  }

 /**
  * Convert an instance of BalanceResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

