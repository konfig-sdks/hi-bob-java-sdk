/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeFilter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ReadEmployeesRequestReference
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ReadEmployeesRequestReference {
  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private List<String> fields = null;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<EmployeeFilter> filters = null;

  public static final String SERIALIZED_NAME_SHOW_INACTIVE = "showInactive";
  @SerializedName(SERIALIZED_NAME_SHOW_INACTIVE)
  private Boolean showInactive;

  public static final String SERIALIZED_NAME_HUMAN_READABLE = "humanReadable";
  @SerializedName(SERIALIZED_NAME_HUMAN_READABLE)
  private String humanReadable;

  public ReadEmployeesRequestReference() {
  }

  public ReadEmployeesRequestReference fields(List<String> fields) {
    
    
    
    
    this.fields = fields;
    return this;
  }

  public ReadEmployeesRequestReference addFieldsItem(String fieldsItem) {
    if (this.fields == null) {
      this.fields = new ArrayList<>();
    }
    this.fields.add(fieldsItem);
    return this;
  }

   /**
   * Optional array of employee field paths that&#39;s are required in response. If you don&#39;t specify fields - only basic fields and categories are returned: &lt;br/&gt;&lt;b&gt;Basic fields:&lt;/b&gt;  &lt;ul&gt;                       &lt;li&gt;ID&lt;/li&gt;                       &lt;li&gt;Company ID&lt;/li&gt;                       &lt;li&gt;Email&lt;/li&gt;                       &lt;li&gt;First name&lt;/li&gt;                       &lt;li&gt;Last name&lt;/li&gt;                       &lt;li&gt;Display name&lt;/li&gt;                       &lt;li&gt;Middle name&lt;/li&gt;                       &lt;li&gt;Creation timestamp&lt;/li&gt;                       &lt;li&gt;Avatar URL&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt;&lt;b&gt;Basic Categories:&lt;/b&gt; &lt;ul&gt;                       &lt;li&gt;About&lt;/li&gt;                       &lt;li&gt;Employment&lt;/li&gt;                       &lt;li&gt;Work&lt;/li&gt; &lt;/ul&gt;
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"root.id\",\"root.firstName\",\"root.surname\",\"root.email\",\"work.site\",\"work.department\"]", value = "Optional array of employee field paths that's are required in response. If you don't specify fields - only basic fields and categories are returned: <br/><b>Basic fields:</b>  <ul>                       <li>ID</li>                       <li>Company ID</li>                       <li>Email</li>                       <li>First name</li>                       <li>Last name</li>                       <li>Display name</li>                       <li>Middle name</li>                       <li>Creation timestamp</li>                       <li>Avatar URL</li> </ul> <br/><b>Basic Categories:</b> <ul>                       <li>About</li>                       <li>Employment</li>                       <li>Work</li> </ul>")

  public List<String> getFields() {
    return fields;
  }


  public void setFields(List<String> fields) {
    
    
    
    this.fields = fields;
  }


  public ReadEmployeesRequestReference filters(List<EmployeeFilter> filters) {
    
    
    
    
    this.filters = filters;
    return this;
  }

  public ReadEmployeesRequestReference addFiltersItem(EmployeeFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Optional list of filters for filtering employees. We currently support up to one filter.
   * @return filters
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional list of filters for filtering employees. We currently support up to one filter.")

  public List<EmployeeFilter> getFilters() {
    return filters;
  }


  public void setFilters(List<EmployeeFilter> filters) {
    
    
    
    this.filters = filters;
  }


  public ReadEmployeesRequestReference showInactive(Boolean showInactive) {
    
    
    
    
    this.showInactive = showInactive;
    return this;
  }

   /**
   * &lt;br&gt;Optional field. &lt;br&gt;Default value &#x3D; false. &lt;br&gt;Defines whether response should include inactive employees.
   * @return showInactive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "<br>Optional field. <br>Default value = false. <br>Defines whether response should include inactive employees.")

  public Boolean getShowInactive() {
    return showInactive;
  }


  public void setShowInactive(Boolean showInactive) {
    
    
    
    this.showInactive = showInactive;
  }


  public ReadEmployeesRequestReference humanReadable(String humanReadable) {
    
    
    
    
    this.humanReadable = humanReadable;
    return this;
  }

   /**
   * Optional field.  &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \&quot;humanReadable\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt;
   * @return humanReadable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional field.  <br> <b>If not sent:</b> supply machine-readable values only. <br> <br> Possible values: <br>  <br> <b>APPEND</b> - include the additional \"humanReadable\" JSON node in the response. <br>  <br> <b>REPLACE</b> - supply humanReadable values in JSON instead of machine-readable format. <br>")

  public String getHumanReadable() {
    return humanReadable;
  }


  public void setHumanReadable(String humanReadable) {
    
    
    
    this.humanReadable = humanReadable;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ReadEmployeesRequestReference instance itself
   */
  public ReadEmployeesRequestReference putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReadEmployeesRequestReference readEmployeesRequestReference = (ReadEmployeesRequestReference) o;
    return Objects.equals(this.fields, readEmployeesRequestReference.fields) &&
        Objects.equals(this.filters, readEmployeesRequestReference.filters) &&
        Objects.equals(this.showInactive, readEmployeesRequestReference.showInactive) &&
        Objects.equals(this.humanReadable, readEmployeesRequestReference.humanReadable)&&
        Objects.equals(this.additionalProperties, readEmployeesRequestReference.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fields, filters, showInactive, humanReadable, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReadEmployeesRequestReference {\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    showInactive: ").append(toIndentedString(showInactive)).append("\n");
    sb.append("    humanReadable: ").append(toIndentedString(humanReadable)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fields");
    openapiFields.add("filters");
    openapiFields.add("showInactive");
    openapiFields.add("humanReadable");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ReadEmployeesRequestReference
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ReadEmployeesRequestReference.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReadEmployeesRequestReference is not found in the empty JSON string", ReadEmployeesRequestReference.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fields") != null && !jsonObj.get("fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fields` to be an array in the JSON string but got `%s`", jsonObj.get("fields").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            EmployeeFilter.validateJsonObject(jsonArrayfilters.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("humanReadable") != null && !jsonObj.get("humanReadable").isJsonNull()) && !jsonObj.get("humanReadable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `humanReadable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("humanReadable").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReadEmployeesRequestReference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReadEmployeesRequestReference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReadEmployeesRequestReference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReadEmployeesRequestReference.class));

       return (TypeAdapter<T>) new TypeAdapter<ReadEmployeesRequestReference>() {
           @Override
           public void write(JsonWriter out, ReadEmployeesRequestReference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ReadEmployeesRequestReference read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ReadEmployeesRequestReference instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ReadEmployeesRequestReference given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ReadEmployeesRequestReference
  * @throws IOException if the JSON string is invalid with respect to ReadEmployeesRequestReference
  */
  public static ReadEmployeesRequestReference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReadEmployeesRequestReference.class);
  }

 /**
  * Convert an instance of ReadEmployeesRequestReference to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

