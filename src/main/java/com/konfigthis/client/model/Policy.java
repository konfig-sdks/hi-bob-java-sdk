/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.YearsOfServiceIncrements;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Policy
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Policy {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ALLOWANCE = "allowance";
  @SerializedName(SERIALIZED_NAME_ALLOWANCE)
  private Double allowance;

  public static final String SERIALIZED_NAME_MAX_BALANCE = "maxBalance";
  @SerializedName(SERIALIZED_NAME_MAX_BALANCE)
  private Double maxBalance;

  public static final String SERIALIZED_NAME_MIN_BALANCE = "minBalance";
  @SerializedName(SERIALIZED_NAME_MIN_BALANCE)
  private Double minBalance;

  public static final String SERIALIZED_NAME_YOS_INCREASE = "yosIncrease";
  @SerializedName(SERIALIZED_NAME_YOS_INCREASE)
  private List<YearsOfServiceIncrements> yosIncrease = null;

  /**
   * The shortest amount of time employees can request.
   */
  @JsonAdapter(MinTimeOffRequestDurationEnum.Adapter.class)
 public enum MinTimeOffRequestDurationEnum {
    FULLDAY("fullDay"),
    
    HALFDAY("halfDay"),
    
    FULLHOUR("fullHour"),
    
    HALFHOUR("halfHour"),
    
    QUARTERHOUR("quarterHour");

    private String value;

    MinTimeOffRequestDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MinTimeOffRequestDurationEnum fromValue(String value) {
      for (MinTimeOffRequestDurationEnum b : MinTimeOffRequestDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MinTimeOffRequestDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MinTimeOffRequestDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MinTimeOffRequestDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MinTimeOffRequestDurationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MIN_TIME_OFF_REQUEST_DURATION = "minTimeOffRequestDuration";
  @SerializedName(SERIALIZED_NAME_MIN_TIME_OFF_REQUEST_DURATION)
  private MinTimeOffRequestDurationEnum minTimeOffRequestDuration;

  public static final String SERIALIZED_NAME_APPROVAL_REQUIRED = "approvalRequired";
  @SerializedName(SERIALIZED_NAME_APPROVAL_REQUIRED)
  private Boolean approvalRequired;

  /**
   * Gets or Sets unit
   */
  @JsonAdapter(UnitEnum.Adapter.class)
 public enum UnitEnum {
    DAYS("days"),
    
    HOURS("hours");

    private String value;

    UnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnitEnum fromValue(String value) {
      for (UnitEnum b : UnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnitEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private UnitEnum unit;

  public Policy() {
  }

  public Policy description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Policy description.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Policy description.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Policy name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public Policy allowance(Double allowance) {
    
    
    
    
    this.allowance = allowance;
    return this;
  }

  public Policy allowance(Integer allowance) {
    
    
    
    
    this.allowance = allowance.doubleValue();
    return this;
  }

   /**
   * Base annual allowance.
   * @return allowance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Base annual allowance.")

  public Double getAllowance() {
    return allowance;
  }


  public void setAllowance(Double allowance) {
    
    
    
    this.allowance = allowance;
  }


  public Policy maxBalance(Double maxBalance) {
    
    
    
    
    this.maxBalance = maxBalance;
    return this;
  }

  public Policy maxBalance(Integer maxBalance) {
    
    
    
    
    this.maxBalance = maxBalance.doubleValue();
    return this;
  }

   /**
   * Maximum balance at the end of the cycle.
   * @return maxBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Maximum balance at the end of the cycle.")

  public Double getMaxBalance() {
    return maxBalance;
  }


  public void setMaxBalance(Double maxBalance) {
    
    
    
    this.maxBalance = maxBalance;
  }


  public Policy minBalance(Double minBalance) {
    
    
    
    
    this.minBalance = minBalance;
    return this;
  }

  public Policy minBalance(Integer minBalance) {
    
    
    
    
    this.minBalance = minBalance.doubleValue();
    return this;
  }

   /**
   * Minimum balance cap.
   * @return minBalance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Minimum balance cap.")

  public Double getMinBalance() {
    return minBalance;
  }


  public void setMinBalance(Double minBalance) {
    
    
    
    this.minBalance = minBalance;
  }


  public Policy yosIncrease(List<YearsOfServiceIncrements> yosIncrease) {
    
    
    
    
    this.yosIncrease = yosIncrease;
    return this;
  }

  public Policy addYosIncreaseItem(YearsOfServiceIncrements yosIncreaseItem) {
    if (this.yosIncrease == null) {
      this.yosIncrease = new ArrayList<>();
    }
    this.yosIncrease.add(yosIncreaseItem);
    return this;
  }

   /**
   * Get yosIncrease
   * @return yosIncrease
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<YearsOfServiceIncrements> getYosIncrease() {
    return yosIncrease;
  }


  public void setYosIncrease(List<YearsOfServiceIncrements> yosIncrease) {
    
    
    
    this.yosIncrease = yosIncrease;
  }


  public Policy minTimeOffRequestDuration(MinTimeOffRequestDurationEnum minTimeOffRequestDuration) {
    
    
    
    
    this.minTimeOffRequestDuration = minTimeOffRequestDuration;
    return this;
  }

   /**
   * The shortest amount of time employees can request.
   * @return minTimeOffRequestDuration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The shortest amount of time employees can request.")

  public MinTimeOffRequestDurationEnum getMinTimeOffRequestDuration() {
    return minTimeOffRequestDuration;
  }


  public void setMinTimeOffRequestDuration(MinTimeOffRequestDurationEnum minTimeOffRequestDuration) {
    
    
    
    this.minTimeOffRequestDuration = minTimeOffRequestDuration;
  }


  public Policy approvalRequired(Boolean approvalRequired) {
    
    
    
    
    this.approvalRequired = approvalRequired;
    return this;
  }

   /**
   * Requests require approval.
   * @return approvalRequired
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Requests require approval.")

  public Boolean getApprovalRequired() {
    return approvalRequired;
  }


  public void setApprovalRequired(Boolean approvalRequired) {
    
    
    
    this.approvalRequired = approvalRequired;
  }


  public Policy unit(UnitEnum unit) {
    
    
    
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UnitEnum getUnit() {
    return unit;
  }


  public void setUnit(UnitEnum unit) {
    
    
    
    this.unit = unit;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Policy instance itself
   */
  public Policy putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policy policy = (Policy) o;
    return Objects.equals(this.description, policy.description) &&
        Objects.equals(this.name, policy.name) &&
        Objects.equals(this.allowance, policy.allowance) &&
        Objects.equals(this.maxBalance, policy.maxBalance) &&
        Objects.equals(this.minBalance, policy.minBalance) &&
        Objects.equals(this.yosIncrease, policy.yosIncrease) &&
        Objects.equals(this.minTimeOffRequestDuration, policy.minTimeOffRequestDuration) &&
        Objects.equals(this.approvalRequired, policy.approvalRequired) &&
        Objects.equals(this.unit, policy.unit)&&
        Objects.equals(this.additionalProperties, policy.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, name, allowance, maxBalance, minBalance, yosIncrease, minTimeOffRequestDuration, approvalRequired, unit, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policy {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    allowance: ").append(toIndentedString(allowance)).append("\n");
    sb.append("    maxBalance: ").append(toIndentedString(maxBalance)).append("\n");
    sb.append("    minBalance: ").append(toIndentedString(minBalance)).append("\n");
    sb.append("    yosIncrease: ").append(toIndentedString(yosIncrease)).append("\n");
    sb.append("    minTimeOffRequestDuration: ").append(toIndentedString(minTimeOffRequestDuration)).append("\n");
    sb.append("    approvalRequired: ").append(toIndentedString(approvalRequired)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("allowance");
    openapiFields.add("maxBalance");
    openapiFields.add("minBalance");
    openapiFields.add("yosIncrease");
    openapiFields.add("minTimeOffRequestDuration");
    openapiFields.add("approvalRequired");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Policy
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Policy.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policy is not found in the empty JSON string", Policy.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("yosIncrease") != null && !jsonObj.get("yosIncrease").isJsonNull()) {
        JsonArray jsonArrayyosIncrease = jsonObj.getAsJsonArray("yosIncrease");
        if (jsonArrayyosIncrease != null) {
          // ensure the json data is an array
          if (!jsonObj.get("yosIncrease").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `yosIncrease` to be an array in the JSON string but got `%s`", jsonObj.get("yosIncrease").toString()));
          }

          // validate the optional field `yosIncrease` (array)
          for (int i = 0; i < jsonArrayyosIncrease.size(); i++) {
            YearsOfServiceIncrements.validateJsonObject(jsonArrayyosIncrease.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("minTimeOffRequestDuration") != null && !jsonObj.get("minTimeOffRequestDuration").isJsonNull()) && !jsonObj.get("minTimeOffRequestDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minTimeOffRequestDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minTimeOffRequestDuration").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policy.class));

       return (TypeAdapter<T>) new TypeAdapter<Policy>() {
           @Override
           public void write(JsonWriter out, Policy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Policy read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Policy instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policy given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policy
  * @throws IOException if the JSON string is invalid with respect to Policy
  */
  public static Policy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policy.class);
  }

 /**
  * Convert an instance of Policy to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

