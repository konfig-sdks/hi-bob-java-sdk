/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ImportAttendanceEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ImportAttendanceData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ImportAttendanceData {
  public static final String SERIALIZED_NAME_ID_TYPE = "idType";
  @SerializedName(SERIALIZED_NAME_ID_TYPE)
  private String idType;

  public static final String SERIALIZED_NAME_REQUESTS = "requests";
  @SerializedName(SERIALIZED_NAME_REQUESTS)
  private List<ImportAttendanceEvent> requests = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATE_TIME_FORMAT = "dateTimeFormat";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_FORMAT)
  private String dateTimeFormat;

  public ImportAttendanceData() {
  }

  public ImportAttendanceData idType(String idType) {
    
    
    
    
    this.idType = idType;
    return this;
  }

   /**
   * The ID type used to identify the employee. Can be one of: \&quot;bobId\&quot;, \&quot;email\&quot;, \&quot;idInCompany\&quot;, or a custom field.&lt;br/&gt;For &lt;b&gt;custom fields&lt;/b&gt; a forward slash separator should be used.&lt;br/&gt;In order to use a specific custom field to identify an employee, for example a custom field called \&quot;Payroll integration ID\&quot;:&lt;ul&gt;&lt;li&gt;Query the field name via the &lt;a href&#x3D;&#39;https://apidocs.hibob.com/reference/get_company-people-fields&#39;&gt;\&quot;Get all company fields\&quot;&lt;/a&gt;&lt;/li&gt;&lt;li&gt;In the response the name will look like &lt;b&gt;\&quot;identification.custom.Payroll Integration ID_1RNhIIf\&quot;&lt;/b&gt;&lt;/li&gt;&lt;li&gt;The value to use should be: &lt;b&gt;\&quot;/identification/custom/Payroll Integration ID_1RNhI\&quot;&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;
   * @return idType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The ID type used to identify the employee. Can be one of: \"bobId\", \"email\", \"idInCompany\", or a custom field.<br/>For <b>custom fields</b> a forward slash separator should be used.<br/>In order to use a specific custom field to identify an employee, for example a custom field called \"Payroll integration ID\":<ul><li>Query the field name via the <a href='https://apidocs.hibob.com/reference/get_company-people-fields'>\"Get all company fields\"</a></li><li>In the response the name will look like <b>\"identification.custom.Payroll Integration ID_1RNhIIf\"</b></li><li>The value to use should be: <b>\"/identification/custom/Payroll Integration ID_1RNhI\"</b></li></ul>")

  public String getIdType() {
    return idType;
  }


  public void setIdType(String idType) {
    
    
    
    this.idType = idType;
  }


  public ImportAttendanceData requests(List<ImportAttendanceEvent> requests) {
    
    
    
    
    this.requests = requests;
    return this;
  }

  public ImportAttendanceData addRequestsItem(ImportAttendanceEvent requestsItem) {
    this.requests.add(requestsItem);
    return this;
  }

   /**
   * List of attendance events
   * @return requests
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of attendance events")

  public List<ImportAttendanceEvent> getRequests() {
    return requests;
  }


  public void setRequests(List<ImportAttendanceEvent> requests) {
    
    
    
    this.requests = requests;
  }


  public ImportAttendanceData dateTimeFormat(String dateTimeFormat) {
    
    
    
    
    this.dateTimeFormat = dateTimeFormat;
    return this;
  }

   /**
   * Allows to set custom date format for the date-time values sent in the requests
   * @return dateTimeFormat
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "yyyy-MM-dd hh:mm a", value = "Allows to set custom date format for the date-time values sent in the requests")

  public String getDateTimeFormat() {
    return dateTimeFormat;
  }


  public void setDateTimeFormat(String dateTimeFormat) {
    
    
    
    this.dateTimeFormat = dateTimeFormat;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImportAttendanceData instance itself
   */
  public ImportAttendanceData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportAttendanceData importAttendanceData = (ImportAttendanceData) o;
    return Objects.equals(this.idType, importAttendanceData.idType) &&
        Objects.equals(this.requests, importAttendanceData.requests) &&
        Objects.equals(this.dateTimeFormat, importAttendanceData.dateTimeFormat)&&
        Objects.equals(this.additionalProperties, importAttendanceData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idType, requests, dateTimeFormat, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportAttendanceData {\n");
    sb.append("    idType: ").append(toIndentedString(idType)).append("\n");
    sb.append("    requests: ").append(toIndentedString(requests)).append("\n");
    sb.append("    dateTimeFormat: ").append(toIndentedString(dateTimeFormat)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("idType");
    openapiFields.add("requests");
    openapiFields.add("dateTimeFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("idType");
    openapiRequiredFields.add("requests");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImportAttendanceData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImportAttendanceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportAttendanceData is not found in the empty JSON string", ImportAttendanceData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImportAttendanceData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("idType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `idType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("idType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("requests").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `requests` to be an array in the JSON string but got `%s`", jsonObj.get("requests").toString()));
      }

      JsonArray jsonArrayrequests = jsonObj.getAsJsonArray("requests");
      // validate the required field `requests` (array)
      for (int i = 0; i < jsonArrayrequests.size(); i++) {
        ImportAttendanceEvent.validateJsonObject(jsonArrayrequests.get(i).getAsJsonObject());
      };
      if ((jsonObj.get("dateTimeFormat") != null && !jsonObj.get("dateTimeFormat").isJsonNull()) && !jsonObj.get("dateTimeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportAttendanceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportAttendanceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportAttendanceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportAttendanceData.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportAttendanceData>() {
           @Override
           public void write(JsonWriter out, ImportAttendanceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportAttendanceData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ImportAttendanceData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImportAttendanceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImportAttendanceData
  * @throws IOException if the JSON string is invalid with respect to ImportAttendanceData
  */
  public static ImportAttendanceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportAttendanceData.class);
  }

 /**
  * Convert an instance of ImportAttendanceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

