/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateFieldRequest;
import com.konfigthis.client.model.CustomTableMetadata;
import com.konfigthis.client.model.CustomTableMetadataList;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Field;
import com.konfigthis.client.model.FieldId;
import com.konfigthis.client.model.FlatListItemId;
import com.konfigthis.client.model.NewListItem;
import com.konfigthis.client.model.ObjectsMetadata;
import com.konfigthis.client.model.UpdateFieldRequest;
import com.konfigthis.client.model.UpdateListItemRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class MetadataApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetadataApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public MetadataApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addNewFieldCall(CreateFieldRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company/people/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewFieldValidateBeforeCall(CreateFieldRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewField(Async)");
        }

        return addNewFieldCall(body, _callback);

    }


    private ApiResponse<FieldId> addNewFieldWithHttpInfo(CreateFieldRequest body) throws ApiException {
        okhttp3.Call localVarCall = addNewFieldValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<FieldId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewFieldAsync(CreateFieldRequest body, final ApiCallback<FieldId> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewFieldValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<FieldId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewFieldRequestBuilder {
        private final String name;
        private final String category;
        private final String type;
        private String description;
        private String historical;

        private AddNewFieldRequestBuilder(String name, String category, String type) {
            this.name = name;
            this.category = category;
            this.type = type;
        }

        /**
         * Set description
         * @param description The description of the field. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set historical
         * @param historical When true, this field keeps the history of its values, each being active starting from a certain date. The default value is false. (optional)
         * @return AddNewFieldRequestBuilder
         */
        public AddNewFieldRequestBuilder historical(String historical) {
            this.historical = historical;
            return this;
        }
        
        /**
         * Build call for addNewField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new field was successfully created. The ID of the field is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the category of the field is root, or historical is set to true, but the category doesn&#39;t allow it, or if the field type is not supported. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the category of the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateFieldRequest body = buildBodyParams();
            return addNewFieldCall(body, _callback);
        }

        private CreateFieldRequest buildBodyParams() {
            CreateFieldRequest body = new CreateFieldRequest();
            body.description(this.description);
            body.name(this.name);
            body.category(this.category);
            body.type(this.type);
            body.historical(this.historical);
            return body;
        }

        /**
         * Execute addNewField request
         * @return FieldId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new field was successfully created. The ID of the field is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the category of the field is root, or historical is set to true, but the category doesn&#39;t allow it, or if the field type is not supported. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the category of the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public FieldId execute() throws ApiException {
            CreateFieldRequest body = buildBodyParams();
            ApiResponse<FieldId> localVarResp = addNewFieldWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewField request with HTTP info returned
         * @return ApiResponse&lt;FieldId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new field was successfully created. The ID of the field is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the category of the field is root, or historical is set to true, but the category doesn&#39;t allow it, or if the field type is not supported. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the category of the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FieldId> executeWithHttpInfo() throws ApiException {
            CreateFieldRequest body = buildBodyParams();
            return addNewFieldWithHttpInfo(body);
        }

        /**
         * Execute addNewField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The new field was successfully created. The ID of the field is returned. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the category of the field is root, or historical is set to true, but the category doesn&#39;t allow it, or if the field type is not supported. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the category of the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FieldId> _callback) throws ApiException {
            CreateFieldRequest body = buildBodyParams();
            return addNewFieldAsync(body, _callback);
        }
    }

    /**
     * Create a new field.
     * 
     * @param body The field to be created. (required)
     * @return AddNewFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The new field was successfully created. The ID of the field is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the category of the field is root, or historical is set to true, but the category doesn&#39;t allow it, or if the field type is not supported. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the category of the field doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public AddNewFieldRequestBuilder addNewField(String name, String category, String type) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (category == null) throw new IllegalArgumentException("\"category\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new AddNewFieldRequestBuilder(name, category, type);
    }
    private okhttp3.Call addNewItemToNamedListCall(String listName, NewListItem body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company/named-lists/{listName}"
            .replace("{" + "listName" + "}", localVarApiClient.escapeString(listName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addNewItemToNamedListValidateBeforeCall(String listName, NewListItem body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listName' is set
        if (listName == null) {
            throw new ApiException("Missing the required parameter 'listName' when calling addNewItemToNamedList(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addNewItemToNamedList(Async)");
        }

        return addNewItemToNamedListCall(listName, body, _callback);

    }


    private ApiResponse<FlatListItemId> addNewItemToNamedListWithHttpInfo(String listName, NewListItem body) throws ApiException {
        okhttp3.Call localVarCall = addNewItemToNamedListValidateBeforeCall(listName, body, null);
        Type localVarReturnType = new TypeToken<FlatListItemId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addNewItemToNamedListAsync(String listName, NewListItem body, final ApiCallback<FlatListItemId> _callback) throws ApiException {

        okhttp3.Call localVarCall = addNewItemToNamedListValidateBeforeCall(listName, body, _callback);
        Type localVarReturnType = new TypeToken<FlatListItemId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddNewItemToNamedListRequestBuilder {
        private final String name;
        private final String listName;
        private Integer parentId;

        private AddNewItemToNamedListRequestBuilder(String name, String listName) {
            this.name = name;
            this.listName = listName;
        }

        /**
         * Set parentId
         * @param parentId ID of the new hierarchy parent node. (optional)
         * @return AddNewItemToNamedListRequestBuilder
         */
        public AddNewItemToNamedListRequestBuilder parentId(Integer parentId) {
            this.parentId = parentId;
            return this;
        }
        
        /**
         * Build call for addNewItemToNamedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the added item already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewListItem body = buildBodyParams();
            return addNewItemToNamedListCall(listName, body, _callback);
        }

        private NewListItem buildBodyParams() {
            NewListItem body = new NewListItem();
            body.name(this.name);
            body.parentId(this.parentId);
            return body;
        }

        /**
         * Execute addNewItemToNamedList request
         * @return FlatListItemId
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the added item already exists </td><td>  -  </td></tr>
         </table>
         */
        public FlatListItemId execute() throws ApiException {
            NewListItem body = buildBodyParams();
            ApiResponse<FlatListItemId> localVarResp = addNewItemToNamedListWithHttpInfo(listName, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addNewItemToNamedList request with HTTP info returned
         * @return ApiResponse&lt;FlatListItemId&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the added item already exists </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlatListItemId> executeWithHttpInfo() throws ApiException {
            NewListItem body = buildBodyParams();
            return addNewItemToNamedListWithHttpInfo(listName, body);
        }

        /**
         * Execute addNewItemToNamedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
            <tr><td> 409 </td><td> If the added item already exists </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlatListItemId> _callback) throws ApiException {
            NewListItem body = buildBodyParams();
            return addNewItemToNamedListAsync(listName, body, _callback);
        }
    }

    /**
     * Add a new item to an existing list.
     * 
     * @param listName The internal name of the list. (required)
     * @param body The &lt;b&gt;parentId&lt;/b&gt; attribute is optional and only applies to hierarchy lists. When &lt;b&gt;parentId&lt;/b&gt; is specified, the newly created list item will be placed under the specific hierarchy parent node. (required)
     * @return AddNewItemToNamedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A new item is created. Please note that the ID of the newly created item may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> If the added item already exists </td><td>  -  </td></tr>
     </table>
     */
    public AddNewItemToNamedListRequestBuilder addNewItemToNamedList(String name, String listName) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (listName == null) throw new IllegalArgumentException("\"listName\" is required but got null");
            

        return new AddNewItemToNamedListRequestBuilder(name, listName);
    }
    private okhttp3.Call deleteFieldCall(String fieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/people/fields/{fieldId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFieldValidateBeforeCall(String fieldId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling deleteField(Async)");
        }

        return deleteFieldCall(fieldId, _callback);

    }


    private ApiResponse<Void> deleteFieldWithHttpInfo(String fieldId) throws ApiException {
        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(fieldId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteFieldAsync(String fieldId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFieldValidateBeforeCall(fieldId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteFieldRequestBuilder {
        private final String fieldId;

        private DeleteFieldRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Build call for deleteField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the field is a Bob default field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteFieldCall(fieldId, _callback);
        }


        /**
         * Execute deleteField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the field is a Bob default field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteFieldWithHttpInfo(fieldId);
        }

        /**
         * Execute deleteField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the field is a Bob default field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteFieldWithHttpInfo(fieldId);
        }

        /**
         * Execute deleteField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> If the field is a Bob default field. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteFieldAsync(fieldId, _callback);
        }
    }

    /**
     * Delete an existing field.
     * 
     * @param fieldId The ID of the field. (required)
     * @return DeleteFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The field was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> If the field is a Bob default field. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the field doesn&#39;t exist </td><td>  -  </td></tr>
     </table>
     */
    public DeleteFieldRequestBuilder deleteField(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new DeleteFieldRequestBuilder(fieldId);
    }
    private okhttp3.Call deleteItemFromCompanyNamedListCall(String listName, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/named-lists/{listName}/{itemId}"
            .replace("{" + "listName" + "}", localVarApiClient.escapeString(listName.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemFromCompanyNamedListValidateBeforeCall(String listName, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listName' is set
        if (listName == null) {
            throw new ApiException("Missing the required parameter 'listName' when calling deleteItemFromCompanyNamedList(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteItemFromCompanyNamedList(Async)");
        }

        return deleteItemFromCompanyNamedListCall(listName, itemId, _callback);

    }


    private ApiResponse<Void> deleteItemFromCompanyNamedListWithHttpInfo(String listName, String itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteItemFromCompanyNamedListValidateBeforeCall(listName, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteItemFromCompanyNamedListAsync(String listName, String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemFromCompanyNamedListValidateBeforeCall(listName, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteItemFromCompanyNamedListRequestBuilder {
        private final String listName;
        private final String itemId;

        private DeleteItemFromCompanyNamedListRequestBuilder(String listName, String itemId) {
            this.listName = listName;
            this.itemId = itemId;
        }

        /**
         * Build call for deleteItemFromCompanyNamedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list item was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteItemFromCompanyNamedListCall(listName, itemId, _callback);
        }


        /**
         * Execute deleteItemFromCompanyNamedList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list item was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteItemFromCompanyNamedListWithHttpInfo(listName, itemId);
        }

        /**
         * Execute deleteItemFromCompanyNamedList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list item was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteItemFromCompanyNamedListWithHttpInfo(listName, itemId);
        }

        /**
         * Execute deleteItemFromCompanyNamedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list item was deleted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteItemFromCompanyNamedListAsync(listName, itemId, _callback);
        }
    }

    /**
     * Delete an item from an existing list.
     * 
     * @param listName The internal name of the list. (required)
     * @param itemId The ID of the list item. (required)
     * @return DeleteItemFromCompanyNamedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list item was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the list or item was not found </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemFromCompanyNamedListRequestBuilder deleteItemFromCompanyNamedList(String listName, String itemId) throws IllegalArgumentException {
        if (listName == null) throw new IllegalArgumentException("\"listName\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        return new DeleteItemFromCompanyNamedListRequestBuilder(listName, itemId);
    }
    private okhttp3.Call getCompanyFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/people/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCompanyFieldsCall(_callback);

    }


    private ApiResponse<List<Field>> getCompanyFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCompanyFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Field>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyFieldsAsync(final ApiCallback<List<Field>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Field>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyFieldsRequestBuilder {

        private GetCompanyFieldsRequestBuilder() {
        }

        /**
         * Build call for getCompanyFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyFieldsCall(_callback);
        }


        /**
         * Execute getCompanyFields request
         * @return List&lt;Field&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public List<Field> execute() throws ApiException {
            ApiResponse<List<Field>> localVarResp = getCompanyFieldsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyFields request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Field&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Field>> executeWithHttpInfo() throws ApiException {
            return getCompanyFieldsWithHttpInfo();
        }

        /**
         * Execute getCompanyFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Field>> _callback) throws ApiException {
            return getCompanyFieldsAsync(_callback);
        }
    }

    /**
     * Get all company fields.
     * 
     * @return GetCompanyFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyFieldsRequestBuilder getCompanyFields() throws IllegalArgumentException {
        return new GetCompanyFieldsRequestBuilder();
    }
    private okhttp3.Call getCompanyNamedListsCall(Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/named-lists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCompanyNamedListsValidateBeforeCall(Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        return getCompanyNamedListsCall(includeArchived, _callback);

    }


    private ApiResponse<List<List>> getCompanyNamedListsWithHttpInfo(Boolean includeArchived) throws ApiException {
        okhttp3.Call localVarCall = getCompanyNamedListsValidateBeforeCall(includeArchived, null);
        Type localVarReturnType = new TypeToken<List<List>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCompanyNamedListsAsync(Boolean includeArchived, final ApiCallback<List<List>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCompanyNamedListsValidateBeforeCall(includeArchived, _callback);
        Type localVarReturnType = new TypeToken<List<List>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCompanyNamedListsRequestBuilder {
        private Boolean includeArchived;

        private GetCompanyNamedListsRequestBuilder() {
        }

        /**
         * Set includeArchived
         * @param includeArchived Whether to include archived items in the response. (optional, default to false)
         * @return GetCompanyNamedListsRequestBuilder
         */
        public GetCompanyNamedListsRequestBuilder includeArchived(Boolean includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }
        
        /**
         * Build call for getCompanyNamedLists
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCompanyNamedListsCall(includeArchived, _callback);
        }


        /**
         * Execute getCompanyNamedLists request
         * @return List&lt;List&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public List<List> execute() throws ApiException {
            ApiResponse<List<List>> localVarResp = getCompanyNamedListsWithHttpInfo(includeArchived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCompanyNamedLists request with HTTP info returned
         * @return ApiResponse&lt;List&lt;List&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<List>> executeWithHttpInfo() throws ApiException {
            return getCompanyNamedListsWithHttpInfo(includeArchived);
        }

        /**
         * Execute getCompanyNamedLists request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<List>> _callback) throws ApiException {
            return getCompanyNamedListsAsync(includeArchived, _callback);
        }
    }

    /**
     * Get all company lists
     * 
     * @return GetCompanyNamedListsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCompanyNamedListsRequestBuilder getCompanyNamedLists() throws IllegalArgumentException {
        return new GetCompanyNamedListsRequestBuilder();
    }
    private okhttp3.Call getCustomTableMetadataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/custom-tables/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomTableMetadataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getCustomTableMetadataCall(_callback);

    }


    private ApiResponse<CustomTableMetadataList> getCustomTableMetadataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getCustomTableMetadataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CustomTableMetadataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCustomTableMetadataAsync(final ApiCallback<CustomTableMetadataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomTableMetadataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CustomTableMetadataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCustomTableMetadataRequestBuilder {

        private GetCustomTableMetadataRequestBuilder() {
        }

        /**
         * Build call for getCustomTableMetadata
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCustomTableMetadataCall(_callback);
        }


        /**
         * Execute getCustomTableMetadata request
         * @return CustomTableMetadataList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public CustomTableMetadataList execute() throws ApiException {
            ApiResponse<CustomTableMetadataList> localVarResp = getCustomTableMetadataWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCustomTableMetadata request with HTTP info returned
         * @return ApiResponse&lt;CustomTableMetadataList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomTableMetadataList> executeWithHttpInfo() throws ApiException {
            return getCustomTableMetadataWithHttpInfo();
        }

        /**
         * Execute getCustomTableMetadata request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomTableMetadataList> _callback) throws ApiException {
            return getCustomTableMetadataAsync(_callback);
        }
    }

    /**
     * Read metadata of custom tables defined
     * 
     * @return GetCustomTableMetadataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetCustomTableMetadataRequestBuilder getCustomTableMetadata() throws IllegalArgumentException {
        return new GetCustomTableMetadataRequestBuilder();
    }
    private okhttp3.Call getNamedListCall(String listName, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/named-lists/{listName}"
            .replace("{" + "listName" + "}", localVarApiClient.escapeString(listName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeArchived", includeArchived));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNamedListValidateBeforeCall(String listName, Boolean includeArchived, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listName' is set
        if (listName == null) {
            throw new ApiException("Missing the required parameter 'listName' when calling getNamedList(Async)");
        }

        return getNamedListCall(listName, includeArchived, _callback);

    }


    private ApiResponse<List> getNamedListWithHttpInfo(String listName, Boolean includeArchived) throws ApiException {
        okhttp3.Call localVarCall = getNamedListValidateBeforeCall(listName, includeArchived, null);
        Type localVarReturnType = new TypeToken<List>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNamedListAsync(String listName, Boolean includeArchived, final ApiCallback<List> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNamedListValidateBeforeCall(listName, includeArchived, _callback);
        Type localVarReturnType = new TypeToken<List>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNamedListRequestBuilder {
        private final String listName;
        private Boolean includeArchived;

        private GetNamedListRequestBuilder(String listName) {
            this.listName = listName;
        }

        /**
         * Set includeArchived
         * @param includeArchived Whether to include archived items in the response. (optional, default to false)
         * @return GetNamedListRequestBuilder
         */
        public GetNamedListRequestBuilder includeArchived(Boolean includeArchived) {
            this.includeArchived = includeArchived;
            return this;
        }
        
        /**
         * Build call for getNamedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Please note that the item ID may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNamedListCall(listName, includeArchived, _callback);
        }


        /**
         * Execute getNamedList request
         * @return List
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Please note that the item ID may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
         </table>
         */
        public List execute() throws ApiException {
            ApiResponse<List> localVarResp = getNamedListWithHttpInfo(listName, includeArchived);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNamedList request with HTTP info returned
         * @return ApiResponse&lt;List&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Please note that the item ID may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List> executeWithHttpInfo() throws ApiException {
            return getNamedListWithHttpInfo(listName, includeArchived);
        }

        /**
         * Execute getNamedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response. Please note that the item ID may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List> _callback) throws ApiException {
            return getNamedListAsync(listName, includeArchived, _callback);
        }
    }

    /**
     * Get a specific company list by name.
     * 
     * @param listName The internal name of the list. (required)
     * @return GetNamedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. Please note that the item ID may be textual or numeric depending on the list type. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the list was not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetNamedListRequestBuilder getNamedList(String listName) throws IllegalArgumentException {
        if (listName == null) throw new IllegalArgumentException("\"listName\" is required but got null");
            

        return new GetNamedListRequestBuilder(listName);
    }
    private okhttp3.Call getPositionFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/objects/position";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPositionFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPositionFieldsCall(_callback);

    }


    private ApiResponse<ObjectsMetadata> getPositionFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPositionFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ObjectsMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPositionFieldsAsync(final ApiCallback<ObjectsMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPositionFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ObjectsMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPositionFieldsRequestBuilder {

        private GetPositionFieldsRequestBuilder() {
        }

        /**
         * Build call for getPositionFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPositionFieldsCall(_callback);
        }


        /**
         * Execute getPositionFields request
         * @return ObjectsMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ObjectsMetadata execute() throws ApiException {
            ApiResponse<ObjectsMetadata> localVarResp = getPositionFieldsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPositionFields request with HTTP info returned
         * @return ApiResponse&lt;ObjectsMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ObjectsMetadata> executeWithHttpInfo() throws ApiException {
            return getPositionFieldsWithHttpInfo();
        }

        /**
         * Execute getPositionFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ObjectsMetadata> _callback) throws ApiException {
            return getPositionFieldsAsync(_callback);
        }
    }

    /**
     * Get all positions fields
     * Returns a list of all fields of object type position.&lt;br/&gt;
     * @return GetPositionFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public GetPositionFieldsRequestBuilder getPositionFields() throws IllegalArgumentException {
        return new GetPositionFieldsRequestBuilder();
    }
    private okhttp3.Call getTableDetailsCall(String customTableId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/custom-tables/metadata/{custom_table_id}"
            .replace("{" + "custom_table_id" + "}", localVarApiClient.escapeString(customTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTableDetailsValidateBeforeCall(String customTableId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'customTableId' is set
        if (customTableId == null) {
            throw new ApiException("Missing the required parameter 'customTableId' when calling getTableDetails(Async)");
        }

        return getTableDetailsCall(customTableId, _callback);

    }


    private ApiResponse<CustomTableMetadata> getTableDetailsWithHttpInfo(String customTableId) throws ApiException {
        okhttp3.Call localVarCall = getTableDetailsValidateBeforeCall(customTableId, null);
        Type localVarReturnType = new TypeToken<CustomTableMetadata>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTableDetailsAsync(String customTableId, final ApiCallback<CustomTableMetadata> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTableDetailsValidateBeforeCall(customTableId, _callback);
        Type localVarReturnType = new TypeToken<CustomTableMetadata>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTableDetailsRequestBuilder {
        private final String customTableId;

        private GetTableDetailsRequestBuilder(String customTableId) {
            this.customTableId = customTableId;
        }

        /**
         * Build call for getTableDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTableDetailsCall(customTableId, _callback);
        }


        /**
         * Execute getTableDetails request
         * @return CustomTableMetadata
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public CustomTableMetadata execute() throws ApiException {
            ApiResponse<CustomTableMetadata> localVarResp = getTableDetailsWithHttpInfo(customTableId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTableDetails request with HTTP info returned
         * @return ApiResponse&lt;CustomTableMetadata&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomTableMetadata> executeWithHttpInfo() throws ApiException {
            return getTableDetailsWithHttpInfo(customTableId);
        }

        /**
         * Execute getTableDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomTableMetadata> _callback) throws ApiException {
            return getTableDetailsAsync(customTableId, _callback);
        }
    }

    /**
     * Read metadata for specific custom table
     * 
     * @param customTableId The ID of custom table. (required)
     * @return GetTableDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GetTableDetailsRequestBuilder getTableDetails(String customTableId) throws IllegalArgumentException {
        if (customTableId == null) throw new IllegalArgumentException("\"customTableId\" is required but got null");
            

        return new GetTableDetailsRequestBuilder(customTableId);
    }
    private okhttp3.Call updateFieldCall(String fieldId, UpdateFieldRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company/people/fields/{fieldId}"
            .replace("{" + "fieldId" + "}", localVarApiClient.escapeString(fieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateFieldValidateBeforeCall(String fieldId, UpdateFieldRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fieldId' is set
        if (fieldId == null) {
            throw new ApiException("Missing the required parameter 'fieldId' when calling updateField(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateField(Async)");
        }

        return updateFieldCall(fieldId, body, _callback);

    }


    private ApiResponse<Void> updateFieldWithHttpInfo(String fieldId, UpdateFieldRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateFieldValidateBeforeCall(fieldId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateFieldAsync(String fieldId, UpdateFieldRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateFieldValidateBeforeCall(fieldId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateFieldRequestBuilder {
        private final String fieldId;
        private String description;
        private String name;

        private UpdateFieldRequestBuilder(String fieldId) {
            this.fieldId = fieldId;
        }

        /**
         * Set description
         * @param description The description of the field. (optional)
         * @return UpdateFieldRequestBuilder
         */
        public UpdateFieldRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the field. (optional)
         * @return UpdateFieldRequestBuilder
         */
        public UpdateFieldRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Build call for updateField
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateFieldRequest body = buildBodyParams();
            return updateFieldCall(fieldId, body, _callback);
        }

        private UpdateFieldRequest buildBodyParams() {
            UpdateFieldRequest body = new UpdateFieldRequest();
            body.description(this.description);
            body.name(this.name);
            return body;
        }

        /**
         * Execute updateField request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateFieldRequest body = buildBodyParams();
            updateFieldWithHttpInfo(fieldId, body);
        }

        /**
         * Execute updateField request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateFieldRequest body = buildBodyParams();
            return updateFieldWithHttpInfo(fieldId, body);
        }

        /**
         * Execute updateField request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The field was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the field doesn&#39;t exist. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateFieldRequest body = buildBodyParams();
            return updateFieldAsync(fieldId, body, _callback);
        }
    }

    /**
     * Update an existing field
     * 
     * @param fieldId The ID of the field. (required)
     * @param body The new name and/or description of the updated field. (required)
     * @return UpdateFieldRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The field was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the field doesn&#39;t exist. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateFieldRequestBuilder updateField(String fieldId) throws IllegalArgumentException {
        if (fieldId == null) throw new IllegalArgumentException("\"fieldId\" is required but got null");
            

        return new UpdateFieldRequestBuilder(fieldId);
    }
    private okhttp3.Call updateItemFromNamedListCall(String listName, String itemId, UpdateListItemRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/company/named-lists/{listName}/{itemId}"
            .replace("{" + "listName" + "}", localVarApiClient.escapeString(listName.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemFromNamedListValidateBeforeCall(String listName, String itemId, UpdateListItemRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'listName' is set
        if (listName == null) {
            throw new ApiException("Missing the required parameter 'listName' when calling updateItemFromNamedList(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateItemFromNamedList(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItemFromNamedList(Async)");
        }

        return updateItemFromNamedListCall(listName, itemId, body, _callback);

    }


    private ApiResponse<Void> updateItemFromNamedListWithHttpInfo(String listName, String itemId, UpdateListItemRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateItemFromNamedListValidateBeforeCall(listName, itemId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateItemFromNamedListAsync(String listName, String itemId, UpdateListItemRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemFromNamedListValidateBeforeCall(listName, itemId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateItemFromNamedListRequestBuilder {
        private final String listName;
        private final String itemId;
        private String name;
        private Integer parentId;

        private UpdateItemFromNamedListRequestBuilder(String listName, String itemId) {
            this.listName = listName;
            this.itemId = itemId;
        }

        /**
         * Set name
         * @param name Name of the item. (optional)
         * @return UpdateItemFromNamedListRequestBuilder
         */
        public UpdateItemFromNamedListRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set parentId
         * @param parentId ID of the new hierarchy parent node. (optional)
         * @return UpdateItemFromNamedListRequestBuilder
         */
        public UpdateItemFromNamedListRequestBuilder parentId(Integer parentId) {
            this.parentId = parentId;
            return this;
        }
        
        /**
         * Build call for updateItemFromNamedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List item was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateListItemRequest body = buildBodyParams();
            return updateItemFromNamedListCall(listName, itemId, body, _callback);
        }

        private UpdateListItemRequest buildBodyParams() {
            UpdateListItemRequest body = new UpdateListItemRequest();
            body.name(this.name);
            body.parentId(this.parentId);
            return body;
        }

        /**
         * Execute updateItemFromNamedList request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List item was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateListItemRequest body = buildBodyParams();
            updateItemFromNamedListWithHttpInfo(listName, itemId, body);
        }

        /**
         * Execute updateItemFromNamedList request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List item was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateListItemRequest body = buildBodyParams();
            return updateItemFromNamedListWithHttpInfo(listName, itemId, body);
        }

        /**
         * Execute updateItemFromNamedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List item was updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> If the list or item was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateListItemRequest body = buildBodyParams();
            return updateItemFromNamedListAsync(listName, itemId, body, _callback);
        }
    }

    /**
     * Update an existing item from a list.
     * 
     * @param listName The internal name of the list. (required)
     * @param itemId The ID of the list item. (required)
     * @param body You need to provide at least one of: &lt;b&gt;name&lt;/b&gt; or &lt;b&gt;parentId&lt;/b&gt;. Providing a name will rename the list item value. Providing the parent ID will move the hierarchy list item (together with its children) under the indicated parent node. (required)
     * @return UpdateItemFromNamedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List item was updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the list or item was not found. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemFromNamedListRequestBuilder updateItemFromNamedList(String listName, String itemId) throws IllegalArgumentException {
        if (listName == null) throw new IllegalArgumentException("\"listName\" is required but got null");
            

        if (itemId == null) throw new IllegalArgumentException("\"itemId\" is required but got null");
            

        return new UpdateItemFromNamedListRequestBuilder(listName, itemId);
    }
}
