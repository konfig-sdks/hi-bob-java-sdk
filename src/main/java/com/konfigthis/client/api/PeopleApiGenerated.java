/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ChangeEmail;
import com.konfigthis.client.model.CreateEmployeeRequest;
import com.konfigthis.client.model.CreateEmployeeRequestWork;
import com.konfigthis.client.model.CurrencyValue;
import com.konfigthis.client.model.Employee;
import com.konfigthis.client.model.EmployeeFilter;
import com.konfigthis.client.model.EmployeeTermination;
import com.konfigthis.client.model.EmployeeTerminationNoticePeriod;
import com.konfigthis.client.model.Employees;
import com.konfigthis.client.model.EmployeesProfiles;
import com.konfigthis.client.model.EmploymentEntries;
import com.konfigthis.client.model.EmploymentEntry;
import com.konfigthis.client.model.EquityEntries;
import com.konfigthis.client.model.EquityEntry;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.InvitationByWizard;
import com.konfigthis.client.model.LifeCycleEntries;
import java.time.LocalDate;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequest;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequestAbout;
import com.konfigthis.client.model.PeopleUpdateEmployeeRecordRequestPersonal;
import com.konfigthis.client.model.ReadEmployeesRequestReference;
import com.konfigthis.client.model.ReadSingleEmployeeRequestReference;
import com.konfigthis.client.model.SalaryEntries;
import com.konfigthis.client.model.SalaryEntry;
import com.konfigthis.client.model.StartDateUpdate;
import com.konfigthis.client.model.TrainingEntries;
import com.konfigthis.client.model.TrainingEntry;
import com.konfigthis.client.model.UploadAvatar;
import com.konfigthis.client.model.VariableEntries;
import com.konfigthis.client.model.VariableEntry;
import com.konfigthis.client.model.WorkEntries;
import com.konfigthis.client.model.WorkEntry;
import com.konfigthis.client.model.WorkEntryAllOfReportsTo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PeopleApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PeopleApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PeopleApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmployeeRecordCall(CreateEmployeeRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmployeeRecordValidateBeforeCall(CreateEmployeeRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEmployeeRecord(Async)");
        }

        return createEmployeeRecordCall(body, _callback);

    }


    private ApiResponse<Employee> createEmployeeRecordWithHttpInfo(CreateEmployeeRequest body) throws ApiException {
        okhttp3.Call localVarCall = createEmployeeRecordValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmployeeRecordAsync(CreateEmployeeRequest body, final ApiCallback<Employee> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmployeeRecordValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Employee>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateEmployeeRecordRequestBuilder {
        private final String firstName;
        private final String surname;
        private final String email;
        private CreateEmployeeRequestWork work;

        private CreateEmployeeRecordRequestBuilder(String firstName, String surname, String email) {
            this.firstName = firstName;
            this.surname = surname;
            this.email = email;
        }

        /**
         * Set work
         * @param work  (optional)
         * @return CreateEmployeeRecordRequestBuilder
         */
        public CreateEmployeeRecordRequestBuilder work(CreateEmployeeRequestWork work) {
            this.work = work;
            return this;
        }
        
        /**
         * Build call for createEmployeeRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateEmployeeRequest body = buildBodyParams();
            return createEmployeeRecordCall(body, _callback);
        }

        private CreateEmployeeRequest buildBodyParams() {
            CreateEmployeeRequest body = new CreateEmployeeRequest();
            body.firstName(this.firstName);
            body.surname(this.surname);
            body.email(this.email);
            body.work(this.work);
            return body;
        }

        /**
         * Execute createEmployeeRecord request
         * @return Employee
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
         </table>
         */
        public Employee execute() throws ApiException {
            CreateEmployeeRequest body = buildBodyParams();
            ApiResponse<Employee> localVarResp = createEmployeeRecordWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createEmployeeRecord request with HTTP info returned
         * @return ApiResponse&lt;Employee&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employee> executeWithHttpInfo() throws ApiException {
            CreateEmployeeRequest body = buildBodyParams();
            return createEmployeeRecordWithHttpInfo(body);
        }

        /**
         * Execute createEmployeeRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employee> _callback) throws ApiException {
            CreateEmployeeRequest body = buildBodyParams();
            return createEmployeeRecordAsync(body, _callback);
        }
    }

    /**
     * Create company employee.
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This creates a new employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields).  &lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;
     * @param body  (required)
     * @return CreateEmployeeRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmployeeRecordRequestBuilder createEmployeeRecord(String firstName, String surname, String email) throws IllegalArgumentException {
        if (firstName == null) throw new IllegalArgumentException("\"firstName\" is required but got null");
            

        if (surname == null) throw new IllegalArgumentException("\"surname\" is required but got null");
            

        if (email == null) throw new IllegalArgumentException("\"email\" is required but got null");
            

        return new CreateEmployeeRecordRequestBuilder(firstName, surname, email);
    }
    private okhttp3.Call createEmploymentEntryCall(String id, EmploymentEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/employment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmploymentEntryValidateBeforeCall(String id, EmploymentEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEmploymentEntry(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createEmploymentEntry(Async)");
        }

        return createEmploymentEntryCall(id, entry, _callback);

    }


    private ApiResponse<Void> createEmploymentEntryWithHttpInfo(String id, EmploymentEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createEmploymentEntryValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createEmploymentEntryAsync(String id, EmploymentEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmploymentEntryValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateEmploymentEntryRequestBuilder {
        private final LocalDate effectiveDate;
        private final String id;
        private Integer id;
        private String reason;
        private String contract;
        private String type;
        private String salaryPayType;

        private CreateEmploymentEntryRequestBuilder(LocalDate effectiveDate, String id) {
            this.effectiveDate = effectiveDate;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateEmploymentEntryRequestBuilder
         */
        public CreateEmploymentEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateEmploymentEntryRequestBuilder
         */
        public CreateEmploymentEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set contract
         * @param contract Contract. (optional)
         * @return CreateEmploymentEntryRequestBuilder
         */
        public CreateEmploymentEntryRequestBuilder contract(String contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set type
         * @param type Type. (optional)
         * @return CreateEmploymentEntryRequestBuilder
         */
        public CreateEmploymentEntryRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set salaryPayType
         * @param salaryPayType Salary pay type. (optional)
         * @return CreateEmploymentEntryRequestBuilder
         */
        public CreateEmploymentEntryRequestBuilder salaryPayType(String salaryPayType) {
            this.salaryPayType = salaryPayType;
            return this;
        }
        
        /**
         * Build call for createEmploymentEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmploymentEntry entry = buildBodyParams();
            return createEmploymentEntryCall(id, entry, _callback);
        }

        private EmploymentEntry buildBodyParams() {
            EmploymentEntry entry = new EmploymentEntry();
            return entry;
        }

        /**
         * Execute createEmploymentEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmploymentEntry entry = buildBodyParams();
            createEmploymentEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createEmploymentEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmploymentEntry entry = buildBodyParams();
            return createEmploymentEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createEmploymentEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmploymentEntry entry = buildBodyParams();
            return createEmploymentEntryAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new employment entry for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id employee id (required)
     * @param entry Employment entry to add. This must not conflict with another entry on the same effective date. (required)
     * @return CreateEmploymentEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateEmploymentEntryRequestBuilder createEmploymentEntry(LocalDate effectiveDate, String id) throws IllegalArgumentException {
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEmploymentEntryRequestBuilder(effectiveDate, id);
    }
    private okhttp3.Call createEquityGrantCall(String id, EquityEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/equities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEquityGrantValidateBeforeCall(String id, EquityEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEquityGrant(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createEquityGrant(Async)");
        }

        return createEquityGrantCall(id, entry, _callback);

    }


    private ApiResponse<Void> createEquityGrantWithHttpInfo(String id, EquityEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createEquityGrantValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createEquityGrantAsync(String id, EquityEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEquityGrantValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateEquityGrantRequestBuilder {
        private final Double quantity;
        private final String equityType;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private LocalDate vestingCommencementDate;
        private String consentNumber;
        private LocalDate grantDate;
        private LocalDate optionExpiration;
        private CurrencyValue exercisePrice;
        private String vestingTerm;
        private String grantType;
        private Double vestingSchedule;
        private Double grantNumber;
        private String grantStatus;

        private CreateEquityGrantRequestBuilder(Double quantity, String equityType, String id) {
            this.quantity = quantity;
            this.equityType = equityType;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set vestingCommencementDate
         * @param vestingCommencementDate Vesting commencement date. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingCommencementDate(LocalDate vestingCommencementDate) {
            this.vestingCommencementDate = vestingCommencementDate;
            return this;
        }
        
        /**
         * Set consentNumber
         * @param consentNumber Consent number. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder consentNumber(String consentNumber) {
            this.consentNumber = consentNumber;
            return this;
        }
        
        /**
         * Set grantDate
         * @param grantDate Date the equity was granted. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantDate(LocalDate grantDate) {
            this.grantDate = grantDate;
            return this;
        }
        
        /**
         * Set optionExpiration
         * @param optionExpiration Date the options expire. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder optionExpiration(LocalDate optionExpiration) {
            this.optionExpiration = optionExpiration;
            return this;
        }
        
        /**
         * Set exercisePrice
         * @param exercisePrice  (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder exercisePrice(CurrencyValue exercisePrice) {
            this.exercisePrice = exercisePrice;
            return this;
        }
        
        /**
         * Set vestingTerm
         * @param vestingTerm Terms for exercising this grant. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingTerm(String vestingTerm) {
            this.vestingTerm = vestingTerm;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType Grant type. One of: Initial Grant, Merit Grant (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set vestingSchedule
         * @param vestingSchedule The vesting schedule ID assigned to this grant. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingSchedule(Double vestingSchedule) {
            this.vestingSchedule = vestingSchedule;
            return this;
        }
        
        /**
         * Set grantNumber
         * @param grantNumber The Grant number for employee. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantNumber(Double grantNumber) {
            this.grantNumber = grantNumber;
            return this;
        }
        
        /**
         * Set grantStatus
         * @param grantStatus Grant status. one of: Granted, Pending Approval (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantStatus(String grantStatus) {
            this.grantStatus = grantStatus;
            return this;
        }
        
        /**
         * Build call for createEquityGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantCall(id, entry, _callback);
        }

        private EquityEntry buildBodyParams() {
            EquityEntry entry = new EquityEntry();
            return entry;
        }

        /**
         * Execute createEquityGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EquityEntry entry = buildBodyParams();
            createEquityGrantWithHttpInfo(id, entry);
        }

        /**
         * Execute createEquityGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantWithHttpInfo(id, entry);
        }

        /**
         * Execute createEquityGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new equity grant for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Equity grant to add. (required)
     * @return CreateEquityGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEquityGrantRequestBuilder createEquityGrant(Double quantity, String equityType, String id) throws IllegalArgumentException {
        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        if (equityType == null) throw new IllegalArgumentException("\"equityType\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEquityGrantRequestBuilder(quantity, equityType, id);
    }
    private okhttp3.Call createNewSalaryEntryCall(String id, SalaryEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSalaryEntryValidateBeforeCall(String id, SalaryEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createNewSalaryEntry(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createNewSalaryEntry(Async)");
        }

        return createNewSalaryEntryCall(id, entry, _callback);

    }


    private ApiResponse<Void> createNewSalaryEntryWithHttpInfo(String id, SalaryEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createNewSalaryEntryValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewSalaryEntryAsync(String id, SalaryEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSalaryEntryValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewSalaryEntryRequestBuilder {
        private final CurrencyValue base;
        private final String payPeriod;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String payFrequency;

        private CreateNewSalaryEntryRequestBuilder(CurrencyValue base, String payPeriod, String id) {
            this.base = base;
            this.payPeriod = payPeriod;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set payFrequency
         * @param payFrequency Represents the frequency the salary is paid. This can be one of: Weekly, Monthly, Pro rata, Every two weeks, Twice a month, Every four weeks. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder payFrequency(String payFrequency) {
            this.payFrequency = payFrequency;
            return this;
        }
        
        /**
         * Build call for createNewSalaryEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryCall(id, entry, _callback);
        }

        private SalaryEntry buildBodyParams() {
            SalaryEntry entry = new SalaryEntry();
            return entry;
        }

        /**
         * Execute createNewSalaryEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SalaryEntry entry = buildBodyParams();
            createNewSalaryEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createNewSalaryEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createNewSalaryEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new salary entry for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Salary entry to add. This must not conflict with another entry on the same effective date. (required)
     * @return CreateNewSalaryEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSalaryEntryRequestBuilder createNewSalaryEntry(CurrencyValue base, String payPeriod, String id) throws IllegalArgumentException {
        if (base == null) throw new IllegalArgumentException("\"base\" is required but got null");
        if (payPeriod == null) throw new IllegalArgumentException("\"payPeriod\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateNewSalaryEntryRequestBuilder(base, payPeriod, id);
    }
    private okhttp3.Call createTrainingRecordCall(String id, TrainingEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/training"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrainingRecordValidateBeforeCall(String id, TrainingEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTrainingRecord(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createTrainingRecord(Async)");
        }

        return createTrainingRecordCall(id, entry, _callback);

    }


    private ApiResponse<Void> createTrainingRecordWithHttpInfo(String id, TrainingEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createTrainingRecordValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createTrainingRecordAsync(String id, TrainingEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrainingRecordValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateTrainingRecordRequestBuilder {
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String description;
        private String name;
        private CurrencyValue cost;
        private String status;
        private String frequency;
        private LocalDate startDate;
        private LocalDate endDate;
        private Double documentId;

        private CreateTrainingRecordRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set description
         * @param description Further description about the training entry. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the training entry. The name must be an item in the training list field. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set cost
         * @param cost  (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder cost(CurrencyValue cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the training entry (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency The frequency of the training entry. The name must be of an item in the frequency list field. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date this entry becomes effective. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The date of training completion. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set documentId
         * @param documentId ID of the document attached to this training entry. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder documentId(Double documentId) {
            this.documentId = documentId;
            return this;
        }
        
        /**
         * Build call for createTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordCall(id, entry, _callback);
        }

        private TrainingEntry buildBodyParams() {
            TrainingEntry entry = new TrainingEntry();
            return entry;
        }

        /**
         * Execute createTrainingRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TrainingEntry entry = buildBodyParams();
            createTrainingRecordWithHttpInfo(id, entry);
        }

        /**
         * Execute createTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordWithHttpInfo(id, entry);
        }

        /**
         * Execute createTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new training records for a given employee
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Training entry to add. (required)
     * @return CreateTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrainingRecordRequestBuilder createTrainingRecord(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateTrainingRecordRequestBuilder(id);
    }
    private okhttp3.Call createVariablePaymentCall(String id, VariableEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/variable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVariablePaymentValidateBeforeCall(String id, VariableEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createVariablePayment(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createVariablePayment(Async)");
        }

        return createVariablePaymentCall(id, entry, _callback);

    }


    private ApiResponse<Void> createVariablePaymentWithHttpInfo(String id, VariableEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createVariablePaymentValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createVariablePaymentAsync(String id, VariableEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVariablePaymentValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateVariablePaymentRequestBuilder {
        private final CurrencyValue amount;
        private final String paymentPeriod;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String variableType;
        private Double companyPercent;
        private Double departmentPercent;
        private Double individualPercent;

        private CreateVariablePaymentRequestBuilder(CurrencyValue amount, String paymentPeriod, String id) {
            this.amount = amount;
            this.paymentPeriod = paymentPeriod;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set variableType
         * @param variableType The type of variable pay. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder variableType(String variableType) {
            this.variableType = variableType;
            return this;
        }
        
        /**
         * Set companyPercent
         * @param companyPercent The employee&#39;s company on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder companyPercent(Double companyPercent) {
            this.companyPercent = companyPercent;
            return this;
        }
        
        /**
         * Set departmentPercent
         * @param departmentPercent The employee&#39;s department on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder departmentPercent(Double departmentPercent) {
            this.departmentPercent = departmentPercent;
            return this;
        }
        
        /**
         * Set individualPercent
         * @param individualPercent The employee&#39;s individual on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder individualPercent(Double individualPercent) {
            this.individualPercent = individualPercent;
            return this;
        }
        
        /**
         * Build call for createVariablePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentCall(id, entry, _callback);
        }

        private VariableEntry buildBodyParams() {
            VariableEntry entry = new VariableEntry();
            return entry;
        }

        /**
         * Execute createVariablePayment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            VariableEntry entry = buildBodyParams();
            createVariablePaymentWithHttpInfo(id, entry);
        }

        /**
         * Execute createVariablePayment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentWithHttpInfo(id, entry);
        }

        /**
         * Execute createVariablePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new variable payment for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Variable payment to add. (required)
     * @return CreateVariablePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateVariablePaymentRequestBuilder createVariablePayment(CurrencyValue amount, String paymentPeriod, String id) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (paymentPeriod == null) throw new IllegalArgumentException("\"paymentPeriod\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateVariablePaymentRequestBuilder(amount, paymentPeriod, id);
    }
    private okhttp3.Call createWorkEntryCall(String id, WorkEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/work"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWorkEntryValidateBeforeCall(String id, WorkEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createWorkEntry(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createWorkEntry(Async)");
        }

        return createWorkEntryCall(id, entry, _callback);

    }


    private ApiResponse<Void> createWorkEntryWithHttpInfo(String id, WorkEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createWorkEntryValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createWorkEntryAsync(String id, WorkEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWorkEntryValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateWorkEntryRequestBuilder {
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String title;
        private String department;
        private String site;
        private Integer siteId;
        private WorkEntryAllOfReportsTo reportsTo;
        private Object customColumns;

        private CreateWorkEntryRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set title
         * @param title The employee&#39;s job title. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set department
         * @param department The employee&#39;s department. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set site
         * @param site The employee&#39;s site. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder site(String site) {
            this.site = site;
            return this;
        }
        
        /**
         * Set siteId
         * @param siteId The employee&#39;s site ID. (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder siteId(Integer siteId) {
            this.siteId = siteId;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder reportsTo(WorkEntryAllOfReportsTo reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Set customColumns
         * @param customColumns  (optional)
         * @return CreateWorkEntryRequestBuilder
         */
        public CreateWorkEntryRequestBuilder customColumns(Object customColumns) {
            this.customColumns = customColumns;
            return this;
        }
        
        /**
         * Build call for createWorkEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntry entry = buildBodyParams();
            return createWorkEntryCall(id, entry, _callback);
        }

        private WorkEntry buildBodyParams() {
            WorkEntry entry = new WorkEntry();
            return entry;
        }

        /**
         * Execute createWorkEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WorkEntry entry = buildBodyParams();
            createWorkEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createWorkEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WorkEntry entry = buildBodyParams();
            return createWorkEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createWorkEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WorkEntry entry = buildBodyParams();
            return createWorkEntryAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new work entry for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Work entry to add. This must not conflict with another entry on the same effective date. (required)
     * @return CreateWorkEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateWorkEntryRequestBuilder createWorkEntry(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateWorkEntryRequestBuilder(id);
    }
    private okhttp3.Call deleteEmploymentEntryCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/employment/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmploymentEntryValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEmploymentEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteEmploymentEntry(Async)");
        }

        return deleteEmploymentEntryCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteEmploymentEntryWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmploymentEntryValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmploymentEntryAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmploymentEntryValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmploymentEntryRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteEmploymentEntryRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteEmploymentEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmploymentEntryCall(id, entryId, _callback);
        }


        /**
         * Execute deleteEmploymentEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmploymentEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEmploymentEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmploymentEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEmploymentEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmploymentEntryAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes an employment entry from a given employee&#39;s employment history.
     * 
     * @param id Employee ID. (required)
     * @param entryId The entry ID to delete. (required)
     * @return DeleteEmploymentEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmploymentEntryRequestBuilder deleteEmploymentEntry(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteEmploymentEntryRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteEquityGrantCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/equities/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEquityGrantValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEquityGrant(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteEquityGrant(Async)");
        }

        return deleteEquityGrantCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteEquityGrantWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteEquityGrantValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEquityGrantAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEquityGrantValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEquityGrantRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteEquityGrantRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteEquityGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEquityGrantCall(id, entryId, _callback);
        }


        /**
         * Execute deleteEquityGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEquityGrantWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEquityGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEquityGrantWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEquityGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEquityGrantAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes an equity grant for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteEquityGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEquityGrantRequestBuilder deleteEquityGrant(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteEquityGrantRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteSalaryEntryCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSalaryEntryValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSalaryEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteSalaryEntry(Async)");
        }

        return deleteSalaryEntryCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteSalaryEntryWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteSalaryEntryValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSalaryEntryAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSalaryEntryValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSalaryEntryRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteSalaryEntryRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteSalaryEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSalaryEntryCall(id, entryId, _callback);
        }


        /**
         * Execute deleteSalaryEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSalaryEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteSalaryEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSalaryEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteSalaryEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSalaryEntryAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes a salary entry from the employee&#39;s list.
     * 
     * @param id Employee ID. (required)
     * @param entryId The entry ID to delete. (required)
     * @return DeleteSalaryEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSalaryEntryRequestBuilder deleteSalaryEntry(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteSalaryEntryRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteTrainingRecordCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/variable/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrainingRecordValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrainingRecord(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteTrainingRecord(Async)");
        }

        return deleteTrainingRecordCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteTrainingRecordWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrainingRecordValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTrainingRecordAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrainingRecordValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTrainingRecordRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteTrainingRecordRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTrainingRecordCall(id, entryId, _callback);
        }


        /**
         * Execute deleteTrainingRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTrainingRecordWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTrainingRecordWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTrainingRecordAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes a training record for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTrainingRecordRequestBuilder deleteTrainingRecord(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteTrainingRecordRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteTrainingRecord_0Call(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/training/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrainingRecord_0ValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrainingRecord_0(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteTrainingRecord_0(Async)");
        }

        return deleteTrainingRecord_0Call(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteTrainingRecord_0WithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrainingRecord_0ValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTrainingRecord_0Async(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrainingRecord_0ValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTrainingRecord0RequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteTrainingRecord0RequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteTrainingRecord_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTrainingRecord_0Call(id, entryId, _callback);
        }


        /**
         * Execute deleteTrainingRecord_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTrainingRecord_0WithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTrainingRecord_0WithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTrainingRecord_0Async(id, entryId, _callback);
        }
    }

    /**
     * Deletes any training records for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteTrainingRecord0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTrainingRecord0RequestBuilder deleteTrainingRecord_0(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteTrainingRecord0RequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteWorkEntryCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/work/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWorkEntryValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteWorkEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteWorkEntry(Async)");
        }

        return deleteWorkEntryCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteWorkEntryWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteWorkEntryValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWorkEntryAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWorkEntryValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteWorkEntryRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteWorkEntryRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteWorkEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWorkEntryCall(id, entryId, _callback);
        }


        /**
         * Execute deleteWorkEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWorkEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteWorkEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWorkEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteWorkEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWorkEntryAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes a work entry from a given employee&#39;s work history.
     * 
     * @param id Employee ID. (required)
     * @param entryId The entry ID to delete (required)
     * @return DeleteWorkEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public DeleteWorkEntryRequestBuilder deleteWorkEntry(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteWorkEntryRequestBuilder(id, entryId);
    }
    private okhttp3.Call getAvatarUrlCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvatarUrlValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getAvatarUrl(Async)");
        }

        return getAvatarUrlCall(employeeId, _callback);

    }


    private ApiResponse<Void> getAvatarUrlWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getAvatarUrlValidateBeforeCall(employeeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAvatarUrlAsync(String employeeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvatarUrlValidateBeforeCall(employeeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAvatarUrlRequestBuilder {
        private final String employeeId;

        private GetAvatarUrlRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for getAvatarUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvatarUrlCall(employeeId, _callback);
        }


        /**
         * Execute getAvatarUrl request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAvatarUrlWithHttpInfo(employeeId);
        }

        /**
         * Execute getAvatarUrl request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAvatarUrlWithHttpInfo(employeeId);
        }

        /**
         * Execute getAvatarUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAvatarUrlAsync(employeeId, _callback);
        }
    }

    /**
     * Read avatar for an employee ID.
     * Returns the avatar image URL of the employee.
     * @param employeeId employee id (required)
     * @return GetAvatarUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
     </table>
     */
    public GetAvatarUrlRequestBuilder getAvatarUrl(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetAvatarUrlRequestBuilder(employeeId);
    }
    private okhttp3.Call getAvatarUrl_0Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/avatar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvatarUrl_0ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getAvatarUrl_0Call(_callback);

    }


    private ApiResponse<Void> getAvatarUrl_0WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAvatarUrl_0ValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getAvatarUrl_0Async(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvatarUrl_0ValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetAvatarUrl0RequestBuilder {

        private GetAvatarUrl0RequestBuilder() {
        }

        /**
         * Build call for getAvatarUrl_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of logged-in user avatar </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvatarUrl_0Call(_callback);
        }


        /**
         * Execute getAvatarUrl_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of logged-in user avatar </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getAvatarUrl_0WithHttpInfo();
        }

        /**
         * Execute getAvatarUrl_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of logged-in user avatar </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getAvatarUrl_0WithHttpInfo();
        }

        /**
         * Execute getAvatarUrl_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of logged-in user avatar </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getAvatarUrl_0Async(_callback);
        }
    }

    /**
     * Read avatar for logged-in user
     * Returns the avatar image URL of the logged-in user.&lt;b&gt;Supported user types:&lt;/b&gt; Employee.
     * @return GetAvatarUrl0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> URL of logged-in user avatar </td><td>  -  </td></tr>
     </table>
     */
    public GetAvatarUrl0RequestBuilder getAvatarUrl_0() throws IllegalArgumentException {
        return new GetAvatarUrl0RequestBuilder();
    }
    private okhttp3.Call getEmailAvatarCall(String email, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/avatars";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (email != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("email", email));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailAvatarValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        return getEmailAvatarCall(email, _callback);

    }


    private ApiResponse<Void> getEmailAvatarWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = getEmailAvatarValidateBeforeCall(email, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmailAvatarAsync(String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailAvatarValidateBeforeCall(email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetEmailAvatarRequestBuilder {
        private String email;

        private GetEmailAvatarRequestBuilder() {
        }

        /**
         * Set email
         * @param email Employee email. (optional)
         * @return GetEmailAvatarRequestBuilder
         */
        public GetEmailAvatarRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for getEmailAvatar
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailAvatarCall(email, _callback);
        }


        /**
         * Execute getEmailAvatar request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmailAvatarWithHttpInfo(email);
        }

        /**
         * Execute getEmailAvatar request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmailAvatarWithHttpInfo(email);
        }

        /**
         * Execute getEmailAvatar request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmailAvatarAsync(email, _callback);
        }
    }

    /**
     * Read avatar for an employee email
     * Returns the avatar image URL of the employee.
     * @return GetEmailAvatarRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> URL of the emloyee avatar. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmailAvatarRequestBuilder getEmailAvatar() throws IllegalArgumentException {
        return new GetEmailAvatarRequestBuilder();
    }
    private okhttp3.Call getEmploymentHistoryCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/employment"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmploymentHistoryValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmploymentHistory(Async)");
        }

        return getEmploymentHistoryCall(id, _callback);

    }


    private ApiResponse<EmploymentEntries> getEmploymentHistoryWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getEmploymentHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmploymentEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmploymentHistoryAsync(String id, final ApiCallback<EmploymentEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmploymentHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmploymentEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmploymentHistoryRequestBuilder {
        private final String id;

        private GetEmploymentHistoryRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getEmploymentHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employment history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmploymentHistoryCall(id, _callback);
        }


        /**
         * Execute getEmploymentHistory request
         * @return EmploymentEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employment history entries. </td><td>  -  </td></tr>
         </table>
         */
        public EmploymentEntries execute() throws ApiException {
            ApiResponse<EmploymentEntries> localVarResp = getEmploymentHistoryWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmploymentHistory request with HTTP info returned
         * @return ApiResponse&lt;EmploymentEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employment history entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmploymentEntries> executeWithHttpInfo() throws ApiException {
            return getEmploymentHistoryWithHttpInfo(id);
        }

        /**
         * Execute getEmploymentHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of employment history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmploymentEntries> _callback) throws ApiException {
            return getEmploymentHistoryAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s employment history.
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;Returns a list of employment history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id employee id (required)
     * @return GetEmploymentHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of employment history entries. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmploymentHistoryRequestBuilder getEmploymentHistory(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetEmploymentHistoryRequestBuilder(id);
    }
    private okhttp3.Call getSalaryHistoryCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalaryHistoryValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSalaryHistory(Async)");
        }

        return getSalaryHistoryCall(id, _callback);

    }


    private ApiResponse<SalaryEntries> getSalaryHistoryWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSalaryHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SalaryEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSalaryHistoryAsync(String id, final ApiCallback<SalaryEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalaryHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SalaryEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSalaryHistoryRequestBuilder {
        private final String id;

        private GetSalaryHistoryRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSalaryHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSalaryHistoryCall(id, _callback);
        }


        /**
         * Execute getSalaryHistory request
         * @return SalaryEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public SalaryEntries execute() throws ApiException {
            ApiResponse<SalaryEntries> localVarResp = getSalaryHistoryWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSalaryHistory request with HTTP info returned
         * @return ApiResponse&lt;SalaryEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalaryEntries> executeWithHttpInfo() throws ApiException {
            return getSalaryHistoryWithHttpInfo(id);
        }

        /**
         * Execute getSalaryHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalaryEntries> _callback) throws ApiException {
            return getSalaryHistoryAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s salary history.
     * Returns a list of salary history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return GetSalaryHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
     </table>
     */
    public GetSalaryHistoryRequestBuilder getSalaryHistory(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSalaryHistoryRequestBuilder(id);
    }
    private okhttp3.Call getWorkHistoryCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/work"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkHistoryValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWorkHistory(Async)");
        }

        return getWorkHistoryCall(id, _callback);

    }


    private ApiResponse<WorkEntries> getWorkHistoryWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getWorkHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WorkEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkHistoryAsync(String id, final ApiCallback<WorkEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WorkEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkHistoryRequestBuilder {
        private final String id;

        private GetWorkHistoryRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getWorkHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of work history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkHistoryCall(id, _callback);
        }


        /**
         * Execute getWorkHistory request
         * @return WorkEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of work history entries. </td><td>  -  </td></tr>
         </table>
         */
        public WorkEntries execute() throws ApiException {
            ApiResponse<WorkEntries> localVarResp = getWorkHistoryWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkHistory request with HTTP info returned
         * @return ApiResponse&lt;WorkEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of work history entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkEntries> executeWithHttpInfo() throws ApiException {
            return getWorkHistoryWithHttpInfo(id);
        }

        /**
         * Execute getWorkHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of work history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkEntries> _callback) throws ApiException {
            return getWorkHistoryAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s work history
     * Returns a list of work history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return GetWorkHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of work history entries. </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkHistoryRequestBuilder getWorkHistory(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetWorkHistoryRequestBuilder(id);
    }
    private okhttp3.Call inviteEmployeeWizardCall(String employeeId, InvitationByWizard body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/invitations"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inviteEmployeeWizardValidateBeforeCall(String employeeId, InvitationByWizard body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling inviteEmployeeWizard(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling inviteEmployeeWizard(Async)");
        }

        return inviteEmployeeWizardCall(employeeId, body, _callback);

    }


    private ApiResponse<Void> inviteEmployeeWizardWithHttpInfo(String employeeId, InvitationByWizard body) throws ApiException {
        okhttp3.Call localVarCall = inviteEmployeeWizardValidateBeforeCall(employeeId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call inviteEmployeeWizardAsync(String employeeId, InvitationByWizard body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inviteEmployeeWizardValidateBeforeCall(employeeId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class InviteEmployeeWizardRequestBuilder {
        private final Integer welcomeWizardId;
        private final String employeeId;

        private InviteEmployeeWizardRequestBuilder(Integer welcomeWizardId, String employeeId) {
            this.welcomeWizardId = welcomeWizardId;
            this.employeeId = employeeId;
        }

        /**
         * Build call for inviteEmployeeWizard
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            InvitationByWizard body = buildBodyParams();
            return inviteEmployeeWizardCall(employeeId, body, _callback);
        }

        private InvitationByWizard buildBodyParams() {
            InvitationByWizard body = new InvitationByWizard();
            body.welcomeWizardId(this.welcomeWizardId);
            return body;
        }

        /**
         * Execute inviteEmployeeWizard request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            InvitationByWizard body = buildBodyParams();
            inviteEmployeeWizardWithHttpInfo(employeeId, body);
        }

        /**
         * Execute inviteEmployeeWizard request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            InvitationByWizard body = buildBodyParams();
            return inviteEmployeeWizardWithHttpInfo(employeeId, body);
        }

        /**
         * Execute inviteEmployeeWizard request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            InvitationByWizard body = buildBodyParams();
            return inviteEmployeeWizardAsync(employeeId, body, _callback);
        }
    }

    /**
     * Invite an employee with a welcome wizard ID.
     * 
     * @param employeeId Employee ID. (required)
     * @param body  (required)
     * @return InviteEmployeeWizardRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public InviteEmployeeWizardRequestBuilder inviteEmployeeWizard(Integer welcomeWizardId, String employeeId) throws IllegalArgumentException {
        if (welcomeWizardId == null) throw new IllegalArgumentException("\"welcomeWizardId\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new InviteEmployeeWizardRequestBuilder(welcomeWizardId, employeeId);
    }
    private okhttp3.Call listActiveEmployeesCall(String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/profiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActiveEmployeesValidateBeforeCall(String sortBy, final ApiCallback _callback) throws ApiException {
        return listActiveEmployeesCall(sortBy, _callback);

    }


    private ApiResponse<EmployeesProfiles> listActiveEmployeesWithHttpInfo(String sortBy) throws ApiException {
        okhttp3.Call localVarCall = listActiveEmployeesValidateBeforeCall(sortBy, null);
        Type localVarReturnType = new TypeToken<EmployeesProfiles>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listActiveEmployeesAsync(String sortBy, final ApiCallback<EmployeesProfiles> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActiveEmployeesValidateBeforeCall(sortBy, _callback);
        Type localVarReturnType = new TypeToken<EmployeesProfiles>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListActiveEmployeesRequestBuilder {
        private String sortBy;

        private ListActiveEmployeesRequestBuilder() {
        }

        /**
         * Set sortBy
         * @param sortBy Optional field name to sort by. This defaults to firstName. (optional)
         * @return ListActiveEmployeesRequestBuilder
         */
        public ListActiveEmployeesRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for listActiveEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee profiles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listActiveEmployeesCall(sortBy, _callback);
        }


        /**
         * Execute listActiveEmployees request
         * @return EmployeesProfiles
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee profiles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public EmployeesProfiles execute() throws ApiException {
            ApiResponse<EmployeesProfiles> localVarResp = listActiveEmployeesWithHttpInfo(sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listActiveEmployees request with HTTP info returned
         * @return ApiResponse&lt;EmployeesProfiles&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee profiles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeesProfiles> executeWithHttpInfo() throws ApiException {
            return listActiveEmployeesWithHttpInfo(sortBy);
        }

        /**
         * Execute listActiveEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee profiles </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeesProfiles> _callback) throws ApiException {
            return listActiveEmployeesAsync(sortBy, _callback);
        }
    }

    /**
     * Read the public profile section of all active employees.
     * Returns the public section of all  active employees of the logged-in user company.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value. Use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @return ListActiveEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee profiles </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListActiveEmployeesRequestBuilder listActiveEmployees() throws IllegalArgumentException {
        return new ListActiveEmployeesRequestBuilder();
    }
    private okhttp3.Call listEmployeeLifecycleCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/lifecycle"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeLifecycleValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listEmployeeLifecycle(Async)");
        }

        return listEmployeeLifecycleCall(id, _callback);

    }


    private ApiResponse<LifeCycleEntries> listEmployeeLifecycleWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeLifecycleValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LifeCycleEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeLifecycleAsync(String id, final ApiCallback<LifeCycleEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeLifecycleValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LifeCycleEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeLifecycleRequestBuilder {
        private final String id;

        private ListEmployeeLifecycleRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listEmployeeLifecycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of life-cycle history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeLifecycleCall(id, _callback);
        }


        /**
         * Execute listEmployeeLifecycle request
         * @return LifeCycleEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of life-cycle history entries. </td><td>  -  </td></tr>
         </table>
         */
        public LifeCycleEntries execute() throws ApiException {
            ApiResponse<LifeCycleEntries> localVarResp = listEmployeeLifecycleWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeLifecycle request with HTTP info returned
         * @return ApiResponse&lt;LifeCycleEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of life-cycle history entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LifeCycleEntries> executeWithHttpInfo() throws ApiException {
            return listEmployeeLifecycleWithHttpInfo(id);
        }

        /**
         * Execute listEmployeeLifecycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of life-cycle history entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LifeCycleEntries> _callback) throws ApiException {
            return listEmployeeLifecycleAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s life-cycle status history.
     * Returns a list of life-cycle history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: TThe values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListEmployeeLifecycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of life-cycle history entries. </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeLifecycleRequestBuilder listEmployeeLifecycle(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListEmployeeLifecycleRequestBuilder(id);
    }
    private okhttp3.Call listEmployeesCall(Boolean showInactive, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (showInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showInactive", showInactive));
        }

        if (humanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("humanReadable", humanReadable));
        }

        if (includeHumanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHumanReadable", includeHumanReadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeesValidateBeforeCall(Boolean showInactive, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        return listEmployeesCall(showInactive, humanReadable, includeHumanReadable, _callback);

    }


    private ApiResponse<Employees> listEmployeesWithHttpInfo(Boolean showInactive, Boolean humanReadable, Boolean includeHumanReadable) throws ApiException {
        okhttp3.Call localVarCall = listEmployeesValidateBeforeCall(showInactive, humanReadable, includeHumanReadable, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeesAsync(Boolean showInactive, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeesValidateBeforeCall(showInactive, humanReadable, includeHumanReadable, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeesRequestBuilder {
        private Boolean showInactive;
        private Boolean humanReadable;
        private Boolean includeHumanReadable;

        private ListEmployeesRequestBuilder() {
        }

        /**
         * Set showInactive
         * @param showInactive Should include inactive employees. (optional)
         * @return ListEmployeesRequestBuilder
         */
        public ListEmployeesRequestBuilder showInactive(Boolean showInactive) {
            this.showInactive = showInactive;
            return this;
        }
        
        /**
         * Set humanReadable
         * @param humanReadable Whether to supply humanReadable values in JSON instead of machine-readable format (default). (optional, default to false)
         * @return ListEmployeesRequestBuilder
         */
        public ListEmployeesRequestBuilder humanReadable(Boolean humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Set includeHumanReadable
         * @param includeHumanReadable Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response. (optional, default to false)
         * @return ListEmployeesRequestBuilder
         */
        public ListEmployeesRequestBuilder includeHumanReadable(Boolean includeHumanReadable) {
            this.includeHumanReadable = includeHumanReadable;
            return this;
        }
        
        /**
         * Build call for listEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeesCall(showInactive, humanReadable, includeHumanReadable, _callback);
        }


        /**
         * Execute listEmployees request
         * @return Employees
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Employees execute() throws ApiException {
            ApiResponse<Employees> localVarResp = listEmployeesWithHttpInfo(showInactive, humanReadable, includeHumanReadable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployees request with HTTP info returned
         * @return ApiResponse&lt;Employees&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Employees> executeWithHttpInfo() throws ApiException {
            return listEmployeesWithHttpInfo(showInactive, humanReadable, includeHumanReadable);
        }

        /**
         * Execute listEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Employees> _callback) throws ApiException {
            return listEmployeesAsync(showInactive, humanReadable, includeHumanReadable, _callback);
        }
    }

    /**
     * Read all company employees
     * &lt;b&gt;Note:&lt;/b&gt; Deprecated at the end of March 2024. Please use &lt;b&gt;/people/search&lt;/b&gt; (\&quot;Search for employees\&quot;) instead. &lt;br/&gt;&lt;br/&gt; This returns a list of all active employees. The data is filtered based on the access level of the logged-in user. Only viewable categories are returned.&lt;br /&gt;&lt;br&gt; &lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @return ListEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All employees. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListEmployeesRequestBuilder listEmployees() throws IllegalArgumentException {
        return new ListEmployeesRequestBuilder();
    }
    private okhttp3.Call listEquityGrantsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/equities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEquityGrantsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listEquityGrants(Async)");
        }

        return listEquityGrantsCall(id, _callback);

    }


    private ApiResponse<EquityEntries> listEquityGrantsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listEquityGrantsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EquityEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEquityGrantsAsync(String id, final ApiCallback<EquityEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEquityGrantsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EquityEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEquityGrantsRequestBuilder {
        private final String id;

        private ListEquityGrantsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listEquityGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEquityGrantsCall(id, _callback);
        }


        /**
         * Execute listEquityGrants request
         * @return EquityEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public EquityEntries execute() throws ApiException {
            ApiResponse<EquityEntries> localVarResp = listEquityGrantsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEquityGrants request with HTTP info returned
         * @return ApiResponse&lt;EquityEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EquityEntries> executeWithHttpInfo() throws ApiException {
            return listEquityGrantsWithHttpInfo(id);
        }

        /**
         * Execute listEquityGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EquityEntries> _callback) throws ApiException {
            return listEquityGrantsAsync(id, _callback);
        }
    }

    /**
     * List the employee&#39;s equity grants.
     * Returns a list of equity grants for a given employee.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListEquityGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
     </table>
     */
    public ListEquityGrantsRequestBuilder listEquityGrants(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListEquityGrantsRequestBuilder(id);
    }
    private okhttp3.Call listTrainingRecordsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/training"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrainingRecordsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTrainingRecords(Async)");
        }

        return listTrainingRecordsCall(id, _callback);

    }


    private ApiResponse<TrainingEntries> listTrainingRecordsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTrainingRecordsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TrainingEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTrainingRecordsAsync(String id, final ApiCallback<TrainingEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrainingRecordsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TrainingEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTrainingRecordsRequestBuilder {
        private final String id;

        private ListTrainingRecordsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listTrainingRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTrainingRecordsCall(id, _callback);
        }


        /**
         * Execute listTrainingRecords request
         * @return TrainingEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingEntries execute() throws ApiException {
            ApiResponse<TrainingEntries> localVarResp = listTrainingRecordsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTrainingRecords request with HTTP info returned
         * @return ApiResponse&lt;TrainingEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingEntries> executeWithHttpInfo() throws ApiException {
            return listTrainingRecordsWithHttpInfo(id);
        }

        /**
         * Execute listTrainingRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingEntries> _callback) throws ApiException {
            return listTrainingRecordsAsync(id, _callback);
        }
    }

    /**
     * List the employee&#39;s training records.
     * Returns a list of training records for a given employee&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListTrainingRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
     </table>
     */
    public ListTrainingRecordsRequestBuilder listTrainingRecords(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListTrainingRecordsRequestBuilder(id);
    }
    private okhttp3.Call listVariablePaymentsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/variable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVariablePaymentsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listVariablePayments(Async)");
        }

        return listVariablePaymentsCall(id, _callback);

    }


    private ApiResponse<VariableEntries> listVariablePaymentsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listVariablePaymentsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VariableEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVariablePaymentsAsync(String id, final ApiCallback<VariableEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVariablePaymentsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VariableEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVariablePaymentsRequestBuilder {
        private final String id;

        private ListVariablePaymentsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listVariablePayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVariablePaymentsCall(id, _callback);
        }


        /**
         * Execute listVariablePayments request
         * @return VariableEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public VariableEntries execute() throws ApiException {
            ApiResponse<VariableEntries> localVarResp = listVariablePaymentsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVariablePayments request with HTTP info returned
         * @return ApiResponse&lt;VariableEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VariableEntries> executeWithHttpInfo() throws ApiException {
            return listVariablePaymentsWithHttpInfo(id);
        }

        /**
         * Execute listVariablePayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VariableEntries> _callback) throws ApiException {
            return listVariablePaymentsAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s variable payments
     * Returns a list of variable payments for a given employee.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListVariablePaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
     </table>
     */
    public ListVariablePaymentsRequestBuilder listVariablePayments(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListVariablePaymentsRequestBuilder(id);
    }
    private okhttp3.Call readEmployeeByIdCall(String identifier, List<String> fields, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fields != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "fields", fields));
        }

        if (humanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("humanReadable", humanReadable));
        }

        if (includeHumanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHumanReadable", includeHumanReadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEmployeeByIdValidateBeforeCall(String identifier, List<String> fields, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling readEmployeeById(Async)");
        }

        // verify the required parameter 'fields' is set
        if (fields == null) {
            throw new ApiException("Missing the required parameter 'fields' when calling readEmployeeById(Async)");
        }

        return readEmployeeByIdCall(identifier, fields, humanReadable, includeHumanReadable, _callback);

    }


    private ApiResponse<Employees> readEmployeeByIdWithHttpInfo(String identifier, List<String> fields, Boolean humanReadable, Boolean includeHumanReadable) throws ApiException {
        okhttp3.Call localVarCall = readEmployeeByIdValidateBeforeCall(identifier, fields, humanReadable, includeHumanReadable, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call readEmployeeByIdAsync(String identifier, List<String> fields, Boolean humanReadable, Boolean includeHumanReadable, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEmployeeByIdValidateBeforeCall(identifier, fields, humanReadable, includeHumanReadable, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReadEmployeeByIdRequestBuilder {
        private final String identifier;
        private final List<String> fields;
        private Boolean humanReadable;
        private Boolean includeHumanReadable;

        private ReadEmployeeByIdRequestBuilder(String identifier, List<String> fields) {
            this.identifier = identifier;
            this.fields = fields;
        }

        /**
         * Set humanReadable
         * @param humanReadable Whether to supply humanReadable values in JSON instead of machine-readable (default) format. (optional, default to false)
         * @return ReadEmployeeByIdRequestBuilder
         */
        public ReadEmployeeByIdRequestBuilder humanReadable(Boolean humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Set includeHumanReadable
         * @param includeHumanReadable Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response. (optional, default to false)
         * @return ReadEmployeeByIdRequestBuilder
         */
        public ReadEmployeeByIdRequestBuilder includeHumanReadable(Boolean includeHumanReadable) {
            this.includeHumanReadable = includeHumanReadable;
            return this;
        }
        
        /**
         * Build call for readEmployeeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return readEmployeeByIdCall(identifier, fields, humanReadable, includeHumanReadable, _callback);
        }


        /**
         * Execute readEmployeeById request
         * @return Employees
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public Employees execute() throws ApiException {
            ApiResponse<Employees> localVarResp = readEmployeeByIdWithHttpInfo(identifier, fields, humanReadable, includeHumanReadable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute readEmployeeById request with HTTP info returned
         * @return ApiResponse&lt;Employees&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<Employees> executeWithHttpInfo() throws ApiException {
            return readEmployeeByIdWithHttpInfo(identifier, fields, humanReadable, includeHumanReadable);
        }

        /**
         * Execute readEmployeeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<Employees> _callback) throws ApiException {
            return readEmployeeByIdAsync(identifier, fields, humanReadable, includeHumanReadable, _callback);
        }
    }

    /**
     * Read company employee by ID.
     * &lt;b&gt;Note:&lt;/b&gt; Deprecated at the end of March 2024. Please use &lt;b&gt;POST /people/{identifier}&lt;/b&gt; (\&quot;Read company employee fields by ID.\&quot;) instead. &lt;br/&gt;&lt;br/&gt; Returns the employee by the specified ID.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param identifier employee id (required)
     * @param fields Whether to supply fields (paths) instead of empty list as a default in order  to not exceed data permitted. (required)
     * @return ReadEmployeeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ReadEmployeeByIdRequestBuilder readEmployeeById(String identifier, List<String> fields) throws IllegalArgumentException {
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        if (fields == null) throw new IllegalArgumentException("\"fields\" is required but got null");
        return new ReadEmployeeByIdRequestBuilder(identifier, fields);
    }
    private okhttp3.Call readEmployeeFieldsCall(String identifier, ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readSingleEmployeeRequestReference;

        // create path and map variables
        String localVarPath = "/people/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEmployeeFieldsValidateBeforeCall(String identifier, ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling readEmployeeFields(Async)");
        }

        return readEmployeeFieldsCall(identifier, readSingleEmployeeRequestReference, _callback);

    }


    private ApiResponse<Employees> readEmployeeFieldsWithHttpInfo(String identifier, ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference) throws ApiException {
        okhttp3.Call localVarCall = readEmployeeFieldsValidateBeforeCall(identifier, readSingleEmployeeRequestReference, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call readEmployeeFieldsAsync(String identifier, ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEmployeeFieldsValidateBeforeCall(identifier, readSingleEmployeeRequestReference, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReadEmployeeFieldsRequestBuilder {
        private final String identifier;
        private List<String> fields;
        private String humanReadable;

        private ReadEmployeeFieldsRequestBuilder(String identifier) {
            this.identifier = identifier;
        }

        /**
         * Set fields
         * @param fields Optional array of employee field paths that&#39;s are required in response. If you don&#39;t specify fields - only basic fields and categories are returned: &lt;br/&gt;&lt;b&gt;Basic fields:&lt;/b&gt;  &lt;ul&gt;                       &lt;li&gt;ID&lt;/li&gt;                       &lt;li&gt;Company ID&lt;/li&gt;                       &lt;li&gt;Email&lt;/li&gt;                       &lt;li&gt;First name&lt;/li&gt;                       &lt;li&gt;Last name&lt;/li&gt;                       &lt;li&gt;Display name&lt;/li&gt;                       &lt;li&gt;Middle name&lt;/li&gt;                       &lt;li&gt;Creation timestamp&lt;/li&gt;                       &lt;li&gt;Avatar URL&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt;&lt;b&gt;Basic Categories:&lt;/b&gt; &lt;ul&gt;                       &lt;li&gt;About&lt;/li&gt;                       &lt;li&gt;Employment&lt;/li&gt;                       &lt;li&gt;Work&lt;/li&gt; &lt;/ul&gt; (optional)
         * @return ReadEmployeeFieldsRequestBuilder
         */
        public ReadEmployeeFieldsRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set humanReadable
         * @param humanReadable Optional field.  &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \\\&quot;humanReadable\\\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt; (optional)
         * @return ReadEmployeeFieldsRequestBuilder
         */
        public ReadEmployeeFieldsRequestBuilder humanReadable(String humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Build call for readEmployeeFields
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference = buildBodyParams();
            return readEmployeeFieldsCall(identifier, readSingleEmployeeRequestReference, _callback);
        }

        private ReadSingleEmployeeRequestReference buildBodyParams() {
            ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference = new ReadSingleEmployeeRequestReference();
            readSingleEmployeeRequestReference.fields(this.fields);
            readSingleEmployeeRequestReference.humanReadable(this.humanReadable);
            return readSingleEmployeeRequestReference;
        }

        /**
         * Execute readEmployeeFields request
         * @return Employees
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public Employees execute() throws ApiException {
            ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference = buildBodyParams();
            ApiResponse<Employees> localVarResp = readEmployeeFieldsWithHttpInfo(identifier, readSingleEmployeeRequestReference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute readEmployeeFields request with HTTP info returned
         * @return ApiResponse&lt;Employees&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employees> executeWithHttpInfo() throws ApiException {
            ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference = buildBodyParams();
            return readEmployeeFieldsWithHttpInfo(identifier, readSingleEmployeeRequestReference);
        }

        /**
         * Execute readEmployeeFields request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employees> _callback) throws ApiException {
            ReadSingleEmployeeRequestReference readSingleEmployeeRequestReference = buildBodyParams();
            return readEmployeeFieldsAsync(identifier, readSingleEmployeeRequestReference, _callback);
        }
    }

    /**
     * Read company employee fields by employee ID.
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;Returns the employee&#39;s fields by the specified ID or email.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param identifier employee ID or email (required)
     * @return ReadEmployeeFieldsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ReadEmployeeFieldsRequestBuilder readEmployeeFields(String identifier) throws IllegalArgumentException {
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new ReadEmployeeFieldsRequestBuilder(identifier);
    }
    private okhttp3.Call revokeAccessToEmployeeCall(String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/employees/{identifier}/uninvite"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokeAccessToEmployeeValidateBeforeCall(String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling revokeAccessToEmployee(Async)");
        }

        return revokeAccessToEmployeeCall(identifier, _callback);

    }


    private ApiResponse<Void> revokeAccessToEmployeeWithHttpInfo(String identifier) throws ApiException {
        okhttp3.Call localVarCall = revokeAccessToEmployeeValidateBeforeCall(identifier, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call revokeAccessToEmployeeAsync(String identifier, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokeAccessToEmployeeValidateBeforeCall(identifier, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RevokeAccessToEmployeeRequestBuilder {
        private final String identifier;

        private RevokeAccessToEmployeeRequestBuilder(String identifier) {
            this.identifier = identifier;
        }

        /**
         * Build call for revokeAccessToEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revoke access successful. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return revokeAccessToEmployeeCall(identifier, _callback);
        }


        /**
         * Execute revokeAccessToEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revoke access successful. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            revokeAccessToEmployeeWithHttpInfo(identifier);
        }

        /**
         * Execute revokeAccessToEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revoke access successful. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return revokeAccessToEmployeeWithHttpInfo(identifier);
        }

        /**
         * Execute revokeAccessToEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Revoke access successful. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return revokeAccessToEmployeeAsync(identifier, _callback);
        }
    }

    /**
     * Revoke access to Bob for an employee.
     * 
     * @param identifier employee id (required)
     * @return RevokeAccessToEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Revoke access successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RevokeAccessToEmployeeRequestBuilder revokeAccessToEmployee(String identifier) throws IllegalArgumentException {
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new RevokeAccessToEmployeeRequestBuilder(identifier);
    }
    private okhttp3.Call searchEmployeesCall(ReadEmployeesRequestReference readEmployeesRequestReference, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = readEmployeesRequestReference;

        // create path and map variables
        String localVarPath = "/people/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEmployeesValidateBeforeCall(ReadEmployeesRequestReference readEmployeesRequestReference, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'readEmployeesRequestReference' is set
        if (readEmployeesRequestReference == null) {
            throw new ApiException("Missing the required parameter 'readEmployeesRequestReference' when calling searchEmployees(Async)");
        }

        return searchEmployeesCall(readEmployeesRequestReference, _callback);

    }


    private ApiResponse<Employees> searchEmployeesWithHttpInfo(ReadEmployeesRequestReference readEmployeesRequestReference) throws ApiException {
        okhttp3.Call localVarCall = searchEmployeesValidateBeforeCall(readEmployeesRequestReference, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchEmployeesAsync(ReadEmployeesRequestReference readEmployeesRequestReference, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEmployeesValidateBeforeCall(readEmployeesRequestReference, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchEmployeesRequestBuilder {
        private List<String> fields;
        private List<EmployeeFilter> filters;
        private Boolean showInactive;
        private String humanReadable;

        private SearchEmployeesRequestBuilder() {
        }

        /**
         * Set fields
         * @param fields Optional array of employee field paths that&#39;s are required in response. If you don&#39;t specify fields - only basic fields and categories are returned: &lt;br/&gt;&lt;b&gt;Basic fields:&lt;/b&gt;  &lt;ul&gt;                       &lt;li&gt;ID&lt;/li&gt;                       &lt;li&gt;Company ID&lt;/li&gt;                       &lt;li&gt;Email&lt;/li&gt;                       &lt;li&gt;First name&lt;/li&gt;                       &lt;li&gt;Last name&lt;/li&gt;                       &lt;li&gt;Display name&lt;/li&gt;                       &lt;li&gt;Middle name&lt;/li&gt;                       &lt;li&gt;Creation timestamp&lt;/li&gt;                       &lt;li&gt;Avatar URL&lt;/li&gt; &lt;/ul&gt; &lt;br/&gt;&lt;b&gt;Basic Categories:&lt;/b&gt; &lt;ul&gt;                       &lt;li&gt;About&lt;/li&gt;                       &lt;li&gt;Employment&lt;/li&gt;                       &lt;li&gt;Work&lt;/li&gt; &lt;/ul&gt; (optional)
         * @return SearchEmployeesRequestBuilder
         */
        public SearchEmployeesRequestBuilder fields(List<String> fields) {
            this.fields = fields;
            return this;
        }
        
        /**
         * Set filters
         * @param filters Optional list of filters for filtering employees. We currently support up to one filter. (optional)
         * @return SearchEmployeesRequestBuilder
         */
        public SearchEmployeesRequestBuilder filters(List<EmployeeFilter> filters) {
            this.filters = filters;
            return this;
        }
        
        /**
         * Set showInactive
         * @param showInactive &lt;br&gt;Optional field. &lt;br&gt;Default value &#x3D; false. &lt;br&gt;Defines whether response should include inactive employees. (optional)
         * @return SearchEmployeesRequestBuilder
         */
        public SearchEmployeesRequestBuilder showInactive(Boolean showInactive) {
            this.showInactive = showInactive;
            return this;
        }
        
        /**
         * Set humanReadable
         * @param humanReadable Optional field.  &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \\\&quot;humanReadable\\\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt; (optional)
         * @return SearchEmployeesRequestBuilder
         */
        public SearchEmployeesRequestBuilder humanReadable(String humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Build call for searchEmployees
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReadEmployeesRequestReference readEmployeesRequestReference = buildBodyParams();
            return searchEmployeesCall(readEmployeesRequestReference, _callback);
        }

        private ReadEmployeesRequestReference buildBodyParams() {
            ReadEmployeesRequestReference readEmployeesRequestReference = new ReadEmployeesRequestReference();
            readEmployeesRequestReference.fields(this.fields);
            readEmployeesRequestReference.filters(this.filters);
            readEmployeesRequestReference.showInactive(this.showInactive);
            readEmployeesRequestReference.humanReadable(this.humanReadable);
            return readEmployeesRequestReference;
        }

        /**
         * Execute searchEmployees request
         * @return Employees
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public Employees execute() throws ApiException {
            ReadEmployeesRequestReference readEmployeesRequestReference = buildBodyParams();
            ApiResponse<Employees> localVarResp = searchEmployeesWithHttpInfo(readEmployeesRequestReference);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchEmployees request with HTTP info returned
         * @return ApiResponse&lt;Employees&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employees> executeWithHttpInfo() throws ApiException {
            ReadEmployeesRequestReference readEmployeesRequestReference = buildBodyParams();
            return searchEmployeesWithHttpInfo(readEmployeesRequestReference);
        }

        /**
         * Execute searchEmployees request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Requested employees. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employees> _callback) throws ApiException {
            ReadEmployeesRequestReference readEmployeesRequestReference = buildBodyParams();
            return searchEmployeesAsync(readEmployeesRequestReference, _callback);
        }
    }

    /**
     * Search for employees
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This API returns a list of requested employees with requested fields.  The data is filtered based on the requested fields and access level of the logged-in user.  Only viewable categories are returned.&lt;br /&gt; &lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param readEmployeesRequestReference Read request content that allows you to select fields and other options (required)
     * @return SearchEmployeesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Requested employees. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public SearchEmployeesRequestBuilder searchEmployees() throws IllegalArgumentException {
        return new SearchEmployeesRequestBuilder();
    }
    private okhttp3.Call setStartDateCall(String employeeId, StartDateUpdate body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/employees/{employeeId}/start-date"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setStartDateValidateBeforeCall(String employeeId, StartDateUpdate body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling setStartDate(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setStartDate(Async)");
        }

        return setStartDateCall(employeeId, body, _callback);

    }


    private ApiResponse<Void> setStartDateWithHttpInfo(String employeeId, StartDateUpdate body) throws ApiException {
        okhttp3.Call localVarCall = setStartDateValidateBeforeCall(employeeId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setStartDateAsync(String employeeId, StartDateUpdate body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setStartDateValidateBeforeCall(employeeId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SetStartDateRequestBuilder {
        private final LocalDate startDate;
        private final String employeeId;
        private String reason;

        private SetStartDateRequestBuilder(LocalDate startDate, String employeeId) {
            this.startDate = startDate;
            this.employeeId = employeeId;
        }

        /**
         * Set reason
         * @param reason Additional info for the start date update. (optional)
         * @return SetStartDateRequestBuilder
         */
        public SetStartDateRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for setStartDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start date was set successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            StartDateUpdate body = buildBodyParams();
            return setStartDateCall(employeeId, body, _callback);
        }

        private StartDateUpdate buildBodyParams() {
            StartDateUpdate body = new StartDateUpdate();
            body.startDate(this.startDate);
            body.reason(this.reason);
            return body;
        }

        /**
         * Execute setStartDate request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start date was set successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            StartDateUpdate body = buildBodyParams();
            setStartDateWithHttpInfo(employeeId, body);
        }

        /**
         * Execute setStartDate request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start date was set successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            StartDateUpdate body = buildBodyParams();
            return setStartDateWithHttpInfo(employeeId, body);
        }

        /**
         * Execute setStartDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Start date was set successfully. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            StartDateUpdate body = buildBodyParams();
            return setStartDateAsync(employeeId, body, _callback);
        }
    }

    /**
     * Set or update an employee&#39;s start date.
     * 
     * @param employeeId employee ID (required)
     * @param body  (required)
     * @return SetStartDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Start date was set successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public SetStartDateRequestBuilder setStartDate(LocalDate startDate, String employeeId) throws IllegalArgumentException {
        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new SetStartDateRequestBuilder(startDate, employeeId);
    }
    private okhttp3.Call terminateEmployeeCall(String identifier, EmployeeTermination body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/employees/{identifier}/terminate"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call terminateEmployeeValidateBeforeCall(String identifier, EmployeeTermination body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling terminateEmployee(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling terminateEmployee(Async)");
        }

        return terminateEmployeeCall(identifier, body, _callback);

    }


    private ApiResponse<Void> terminateEmployeeWithHttpInfo(String identifier, EmployeeTermination body) throws ApiException {
        okhttp3.Call localVarCall = terminateEmployeeValidateBeforeCall(identifier, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call terminateEmployeeAsync(String identifier, EmployeeTermination body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = terminateEmployeeValidateBeforeCall(identifier, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class TerminateEmployeeRequestBuilder {
        private final LocalDate terminationDate;
        private final String identifier;
        private String terminationReason;
        private String reasonType;
        private EmployeeTerminationNoticePeriod noticePeriod;
        private LocalDate lastDayOfWork;

        private TerminateEmployeeRequestBuilder(LocalDate terminationDate, String identifier) {
            this.terminationDate = terminationDate;
            this.identifier = identifier;
        }

        /**
         * Set terminationReason
         * @param terminationReason The ID of the &#39;terminationReason&#39; list entry (optional)
         * @return TerminateEmployeeRequestBuilder
         */
        public TerminateEmployeeRequestBuilder terminationReason(String terminationReason) {
            this.terminationReason = terminationReason;
            return this;
        }
        
        /**
         * Set reasonType
         * @param reasonType The ID of the &#39;lifecycleReasonType&#39; list entry (optional)
         * @return TerminateEmployeeRequestBuilder
         */
        public TerminateEmployeeRequestBuilder reasonType(String reasonType) {
            this.reasonType = reasonType;
            return this;
        }
        
        /**
         * Set noticePeriod
         * @param noticePeriod  (optional)
         * @return TerminateEmployeeRequestBuilder
         */
        public TerminateEmployeeRequestBuilder noticePeriod(EmployeeTerminationNoticePeriod noticePeriod) {
            this.noticePeriod = noticePeriod;
            return this;
        }
        
        /**
         * Set lastDayOfWork
         * @param lastDayOfWork  (optional)
         * @return TerminateEmployeeRequestBuilder
         */
        public TerminateEmployeeRequestBuilder lastDayOfWork(LocalDate lastDayOfWork) {
            this.lastDayOfWork = lastDayOfWork;
            return this;
        }
        
        /**
         * Build call for terminateEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Termination entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeeTermination body = buildBodyParams();
            return terminateEmployeeCall(identifier, body, _callback);
        }

        private EmployeeTermination buildBodyParams() {
            EmployeeTermination body = new EmployeeTermination();
            body.terminationDate(this.terminationDate);
            body.terminationReason(this.terminationReason);
            body.reasonType(this.reasonType);
            body.noticePeriod(this.noticePeriod);
            body.lastDayOfWork(this.lastDayOfWork);
            return body;
        }

        /**
         * Execute terminateEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Termination entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmployeeTermination body = buildBodyParams();
            terminateEmployeeWithHttpInfo(identifier, body);
        }

        /**
         * Execute terminateEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Termination entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmployeeTermination body = buildBodyParams();
            return terminateEmployeeWithHttpInfo(identifier, body);
        }

        /**
         * Execute terminateEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Termination entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmployeeTermination body = buildBodyParams();
            return terminateEmployeeAsync(identifier, body, _callback);
        }
    }

    /**
     * Terminate company employee.
     * This changes the employee’s status to Terminated according to specified termination date. &lt;br /&gt;
     * @param identifier Employee ID. (required)
     * @param body  (required)
     * @return TerminateEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Termination entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public TerminateEmployeeRequestBuilder terminateEmployee(LocalDate terminationDate, String identifier) throws IllegalArgumentException {
        if (terminationDate == null) throw new IllegalArgumentException("\"terminationDate\" is required but got null");
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new TerminateEmployeeRequestBuilder(terminationDate, identifier);
    }
    private okhttp3.Call updateEmailCall(String id, ChangeEmail body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{id}/email"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmailValidateBeforeCall(String id, ChangeEmail body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmail(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEmail(Async)");
        }

        return updateEmailCall(id, body, _callback);

    }


    private ApiResponse<Void> updateEmailWithHttpInfo(String id, ChangeEmail body) throws ApiException {
        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmailAsync(String id, ChangeEmail body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmailValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmailRequestBuilder {
        private final String id;
        private String email;

        private UpdateEmailRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set email
         * @param email new email (optional)
         * @return UpdateEmailRequestBuilder
         */
        public UpdateEmailRequestBuilder email(String email) {
            this.email = email;
            return this;
        }
        
        /**
         * Build call for updateEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation sent successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ChangeEmail body = buildBodyParams();
            return updateEmailCall(id, body, _callback);
        }

        private ChangeEmail buildBodyParams() {
            ChangeEmail body = new ChangeEmail();
            body.email(this.email);
            return body;
        }

        /**
         * Execute updateEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation sent successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ChangeEmail body = buildBodyParams();
            updateEmailWithHttpInfo(id, body);
        }

        /**
         * Execute updateEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation sent successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ChangeEmail body = buildBodyParams();
            return updateEmailWithHttpInfo(id, body);
        }

        /**
         * Execute updateEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Invitation sent successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ChangeEmail body = buildBodyParams();
            return updateEmailAsync(id, body, _callback);
        }
    }

    /**
     * Update an employee&#39;s email address.
     * Change an employee&#39;s email address. If you cannot change the self email an invitation will be sent to the new address to verify the email if the employee is invited/active.&lt;br /&gt;
     * @param id employee id (required)
     * @param body  (required)
     * @return UpdateEmailRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Invitation sent successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmailRequestBuilder updateEmail(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateEmailRequestBuilder(id);
    }
    private okhttp3.Call updateEmployeeRecordCall(String identifier, PeopleUpdateEmployeeRecordRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{identifier}"
            .replace("{" + "identifier" + "}", localVarApiClient.escapeString(identifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmployeeRecordValidateBeforeCall(String identifier, PeopleUpdateEmployeeRecordRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling updateEmployeeRecord(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEmployeeRecord(Async)");
        }

        return updateEmployeeRecordCall(identifier, body, _callback);

    }


    private ApiResponse<Void> updateEmployeeRecordWithHttpInfo(String identifier, PeopleUpdateEmployeeRecordRequest body) throws ApiException {
        okhttp3.Call localVarCall = updateEmployeeRecordValidateBeforeCall(identifier, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmployeeRecordAsync(String identifier, PeopleUpdateEmployeeRecordRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmployeeRecordValidateBeforeCall(identifier, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmployeeRecordRequestBuilder {
        private final String identifier;
        private String firstName;
        private PeopleUpdateEmployeeRecordRequestPersonal personal;
        private PeopleUpdateEmployeeRecordRequestAbout about;

        private UpdateEmployeeRecordRequestBuilder(String identifier) {
            this.identifier = identifier;
        }

        /**
         * Set firstName
         * @param firstName  (optional)
         * @return UpdateEmployeeRecordRequestBuilder
         */
        public UpdateEmployeeRecordRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set personal
         * @param personal  (optional)
         * @return UpdateEmployeeRecordRequestBuilder
         */
        public UpdateEmployeeRecordRequestBuilder personal(PeopleUpdateEmployeeRecordRequestPersonal personal) {
            this.personal = personal;
            return this;
        }
        
        /**
         * Set about
         * @param about  (optional)
         * @return UpdateEmployeeRecordRequestBuilder
         */
        public UpdateEmployeeRecordRequestBuilder about(PeopleUpdateEmployeeRecordRequestAbout about) {
            this.about = about;
            return this;
        }
        
        /**
         * Build call for updateEmployeeRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> If employee data not modified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PeopleUpdateEmployeeRecordRequest body = buildBodyParams();
            return updateEmployeeRecordCall(identifier, body, _callback);
        }

        private PeopleUpdateEmployeeRecordRequest buildBodyParams() {
            PeopleUpdateEmployeeRecordRequest body = new PeopleUpdateEmployeeRecordRequest();
            body.firstName(this.firstName);
            body.personal(this.personal);
            body.about(this.about);
            return body;
        }

        /**
         * Execute updateEmployeeRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> If employee data not modified. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            PeopleUpdateEmployeeRecordRequest body = buildBodyParams();
            updateEmployeeRecordWithHttpInfo(identifier, body);
        }

        /**
         * Execute updateEmployeeRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> If employee data not modified. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            PeopleUpdateEmployeeRecordRequest body = buildBodyParams();
            return updateEmployeeRecordWithHttpInfo(identifier, body);
        }

        /**
         * Execute updateEmployeeRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
            <tr><td> 304 </td><td> If employee data not modified. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            PeopleUpdateEmployeeRecordRequest body = buildBodyParams();
            return updateEmployeeRecordAsync(identifier, body, _callback);
        }
    }

    /**
     * Update company employee.
     * &lt;b&gt;Note:&lt;/b&gt; Changes to this API are planned to take effect on May 31, 2024.  Make sure to review all of the details in the &lt;a href&#x3D;&#39;https://help.hibob.com/hc/en-us/articles/19726260483601&#39;&gt;Working pattern API Changes&lt;/a&gt;  article in the help center.&lt;br&gt; &lt;br&gt;This updates the employee record in Bob. You can include only the fields listed in the  [Fields Metadata API](https://apidocs.hibob.com/reference/get_company-people-fields) where historical is equal to false.  &lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;
     * @param identifier Employee ID. (required)
     * @param body Use Fields Metadata API for available field definitions (required)
     * @return UpdateEmployeeRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Employee updated successfully. </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> If employee data not modified. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmployeeRecordRequestBuilder updateEmployeeRecord(String identifier) throws IllegalArgumentException {
        if (identifier == null) throw new IllegalArgumentException("\"identifier\" is required but got null");
            

        return new UpdateEmployeeRecordRequestBuilder(identifier);
    }
    private okhttp3.Call updateEmploymentEntryCall(String id, Integer entryId, EmploymentEntry body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{id}/employment/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEmploymentEntryValidateBeforeCall(String id, Integer entryId, EmploymentEntry body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEmploymentEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateEmploymentEntry(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEmploymentEntry(Async)");
        }

        return updateEmploymentEntryCall(id, entryId, body, _callback);

    }


    private ApiResponse<Void> updateEmploymentEntryWithHttpInfo(String id, Integer entryId, EmploymentEntry body) throws ApiException {
        okhttp3.Call localVarCall = updateEmploymentEntryValidateBeforeCall(id, entryId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEmploymentEntryAsync(String id, Integer entryId, EmploymentEntry body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEmploymentEntryValidateBeforeCall(id, entryId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEmploymentEntryRequestBuilder {
        private final LocalDate effectiveDate;
        private final String id;
        private final Integer entryId;
        private Integer id;
        private String reason;
        private String contract;
        private String type;
        private String salaryPayType;

        private UpdateEmploymentEntryRequestBuilder(LocalDate effectiveDate, String id, Integer entryId) {
            this.effectiveDate = effectiveDate;
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return UpdateEmploymentEntryRequestBuilder
         */
        public UpdateEmploymentEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return UpdateEmploymentEntryRequestBuilder
         */
        public UpdateEmploymentEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set contract
         * @param contract Contract. (optional)
         * @return UpdateEmploymentEntryRequestBuilder
         */
        public UpdateEmploymentEntryRequestBuilder contract(String contract) {
            this.contract = contract;
            return this;
        }
        
        /**
         * Set type
         * @param type Type. (optional)
         * @return UpdateEmploymentEntryRequestBuilder
         */
        public UpdateEmploymentEntryRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Set salaryPayType
         * @param salaryPayType Salary pay type. (optional)
         * @return UpdateEmploymentEntryRequestBuilder
         */
        public UpdateEmploymentEntryRequestBuilder salaryPayType(String salaryPayType) {
            this.salaryPayType = salaryPayType;
            return this;
        }
        
        /**
         * Build call for updateEmploymentEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmploymentEntry body = buildBodyParams();
            return updateEmploymentEntryCall(id, entryId, body, _callback);
        }

        private EmploymentEntry buildBodyParams() {
            EmploymentEntry body = new EmploymentEntry();
            return body;
        }

        /**
         * Execute updateEmploymentEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EmploymentEntry body = buildBodyParams();
            updateEmploymentEntryWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEmploymentEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EmploymentEntry body = buildBodyParams();
            return updateEmploymentEntryWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEmploymentEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EmploymentEntry body = buildBodyParams();
            return updateEmploymentEntryAsync(id, entryId, body, _callback);
        }
    }

    /**
     * Updates an employment entry from a given employee&#39;s employment history.
     * &lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entryId The entry ID to update. (required)
     * @param body  (required)
     * @return UpdateEmploymentEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEmploymentEntryRequestBuilder updateEmploymentEntry(LocalDate effectiveDate, String id, Integer entryId) throws IllegalArgumentException {
        if (effectiveDate == null) throw new IllegalArgumentException("\"effectiveDate\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new UpdateEmploymentEntryRequestBuilder(effectiveDate, id, entryId);
    }
    private okhttp3.Call updateEquityGrantForEmployeeCall(String id, Integer entryId, EquityEntry body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{id}/equities/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEquityGrantForEmployeeValidateBeforeCall(String id, Integer entryId, EquityEntry body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEquityGrantForEmployee(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateEquityGrantForEmployee(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEquityGrantForEmployee(Async)");
        }

        return updateEquityGrantForEmployeeCall(id, entryId, body, _callback);

    }


    private ApiResponse<Void> updateEquityGrantForEmployeeWithHttpInfo(String id, Integer entryId, EquityEntry body) throws ApiException {
        okhttp3.Call localVarCall = updateEquityGrantForEmployeeValidateBeforeCall(id, entryId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEquityGrantForEmployeeAsync(String id, Integer entryId, EquityEntry body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEquityGrantForEmployeeValidateBeforeCall(id, entryId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEquityGrantForEmployeeRequestBuilder {
        private final Double quantity;
        private final String equityType;
        private final String id;
        private final Integer entryId;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private LocalDate vestingCommencementDate;
        private String consentNumber;
        private LocalDate grantDate;
        private LocalDate optionExpiration;
        private CurrencyValue exercisePrice;
        private String vestingTerm;
        private String grantType;
        private Double vestingSchedule;
        private Double grantNumber;
        private String grantStatus;

        private UpdateEquityGrantForEmployeeRequestBuilder(Double quantity, String equityType, String id, Integer entryId) {
            this.quantity = quantity;
            this.equityType = equityType;
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set vestingCommencementDate
         * @param vestingCommencementDate Vesting commencement date. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingCommencementDate(LocalDate vestingCommencementDate) {
            this.vestingCommencementDate = vestingCommencementDate;
            return this;
        }
        
        /**
         * Set consentNumber
         * @param consentNumber Consent number. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder consentNumber(String consentNumber) {
            this.consentNumber = consentNumber;
            return this;
        }
        
        /**
         * Set grantDate
         * @param grantDate Date the equity was granted. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantDate(LocalDate grantDate) {
            this.grantDate = grantDate;
            return this;
        }
        
        /**
         * Set optionExpiration
         * @param optionExpiration Date the options expire. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder optionExpiration(LocalDate optionExpiration) {
            this.optionExpiration = optionExpiration;
            return this;
        }
        
        /**
         * Set exercisePrice
         * @param exercisePrice  (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder exercisePrice(CurrencyValue exercisePrice) {
            this.exercisePrice = exercisePrice;
            return this;
        }
        
        /**
         * Set vestingTerm
         * @param vestingTerm Terms for exercising this grant. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingTerm(String vestingTerm) {
            this.vestingTerm = vestingTerm;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType Grant type. One of: Initial Grant, Merit Grant (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set vestingSchedule
         * @param vestingSchedule The vesting schedule ID assigned to this grant. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingSchedule(Double vestingSchedule) {
            this.vestingSchedule = vestingSchedule;
            return this;
        }
        
        /**
         * Set grantNumber
         * @param grantNumber The Grant number for employee. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantNumber(Double grantNumber) {
            this.grantNumber = grantNumber;
            return this;
        }
        
        /**
         * Set grantStatus
         * @param grantStatus Grant status. one of: Granted, Pending Approval (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantStatus(String grantStatus) {
            this.grantStatus = grantStatus;
            return this;
        }
        
        /**
         * Build call for updateEquityGrantForEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeCall(id, entryId, body, _callback);
        }

        private EquityEntry buildBodyParams() {
            EquityEntry body = new EquityEntry();
            return body;
        }

        /**
         * Execute updateEquityGrantForEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EquityEntry body = buildBodyParams();
            updateEquityGrantForEmployeeWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEquityGrantForEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEquityGrantForEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeAsync(id, entryId, body, _callback);
        }
    }

    /**
     * Updates an equity grant for an employee
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;. - Basic: [] - Bearer: []
     * @param id Employee ID (required)
     * @param entryId The entry ID to update. (required)
     * @param body  (required)
     * @return UpdateEquityGrantForEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEquityGrantForEmployeeRequestBuilder updateEquityGrantForEmployee(Double quantity, String equityType, String id, Integer entryId) throws IllegalArgumentException {
        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        if (equityType == null) throw new IllegalArgumentException("\"equityType\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new UpdateEquityGrantForEmployeeRequestBuilder(quantity, equityType, id, entryId);
    }
    private okhttp3.Call updateWorkEntryCall(String id, Integer entryId, WorkEntry body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{id}/work/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWorkEntryValidateBeforeCall(String id, Integer entryId, WorkEntry body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWorkEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateWorkEntry(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWorkEntry(Async)");
        }

        return updateWorkEntryCall(id, entryId, body, _callback);

    }


    private ApiResponse<Void> updateWorkEntryWithHttpInfo(String id, Integer entryId, WorkEntry body) throws ApiException {
        okhttp3.Call localVarCall = updateWorkEntryValidateBeforeCall(id, entryId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateWorkEntryAsync(String id, Integer entryId, WorkEntry body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWorkEntryValidateBeforeCall(id, entryId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateWorkEntryRequestBuilder {
        private final String id;
        private final Integer entryId;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String title;
        private String department;
        private String site;
        private Integer siteId;
        private WorkEntryAllOfReportsTo reportsTo;
        private Object customColumns;

        private UpdateWorkEntryRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set title
         * @param title The employee&#39;s job title. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set department
         * @param department The employee&#39;s department. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set site
         * @param site The employee&#39;s site. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder site(String site) {
            this.site = site;
            return this;
        }
        
        /**
         * Set siteId
         * @param siteId The employee&#39;s site ID. (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder siteId(Integer siteId) {
            this.siteId = siteId;
            return this;
        }
        
        /**
         * Set reportsTo
         * @param reportsTo  (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder reportsTo(WorkEntryAllOfReportsTo reportsTo) {
            this.reportsTo = reportsTo;
            return this;
        }
        
        /**
         * Set customColumns
         * @param customColumns  (optional)
         * @return UpdateWorkEntryRequestBuilder
         */
        public UpdateWorkEntryRequestBuilder customColumns(Object customColumns) {
            this.customColumns = customColumns;
            return this;
        }
        
        /**
         * Build call for updateWorkEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Requested entry not found. Nothing was changed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            WorkEntry body = buildBodyParams();
            return updateWorkEntryCall(id, entryId, body, _callback);
        }

        private WorkEntry buildBodyParams() {
            WorkEntry body = new WorkEntry();
            return body;
        }

        /**
         * Execute updateWorkEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Requested entry not found. Nothing was changed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            WorkEntry body = buildBodyParams();
            updateWorkEntryWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateWorkEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Requested entry not found. Nothing was changed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            WorkEntry body = buildBodyParams();
            return updateWorkEntryWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateWorkEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Requested entry not found. Nothing was changed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            WorkEntry body = buildBodyParams();
            return updateWorkEntryAsync(id, entryId, body, _callback);
        }
    }

    /**
     * Updates a work entry from employee&#39;s work history
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entryId The entry ID to update. (required)
     * @param body  (required)
     * @return UpdateWorkEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Requested entry not found. Nothing was changed </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWorkEntryRequestBuilder updateWorkEntry(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new UpdateWorkEntryRequestBuilder(id, entryId);
    }
    private okhttp3.Call uploadEmployeeAvatarUrlCall(String employeeId, UploadAvatar body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/avatars/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadEmployeeAvatarUrlValidateBeforeCall(String employeeId, UploadAvatar body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling uploadEmployeeAvatarUrl(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadEmployeeAvatarUrl(Async)");
        }

        return uploadEmployeeAvatarUrlCall(employeeId, body, _callback);

    }


    private ApiResponse<Void> uploadEmployeeAvatarUrlWithHttpInfo(String employeeId, UploadAvatar body) throws ApiException {
        okhttp3.Call localVarCall = uploadEmployeeAvatarUrlValidateBeforeCall(employeeId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadEmployeeAvatarUrlAsync(String employeeId, UploadAvatar body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadEmployeeAvatarUrlValidateBeforeCall(employeeId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadEmployeeAvatarUrlRequestBuilder {
        private final String url;
        private final String employeeId;

        private UploadEmployeeAvatarUrlRequestBuilder(String url, String employeeId) {
            this.url = url;
            this.employeeId = employeeId;
        }

        /**
         * Build call for uploadEmployeeAvatarUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Avatar Uploaded successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UploadAvatar body = buildBodyParams();
            return uploadEmployeeAvatarUrlCall(employeeId, body, _callback);
        }

        private UploadAvatar buildBodyParams() {
            UploadAvatar body = new UploadAvatar();
            body.url(this.url);
            return body;
        }

        /**
         * Execute uploadEmployeeAvatarUrl request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Avatar Uploaded successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UploadAvatar body = buildBodyParams();
            uploadEmployeeAvatarUrlWithHttpInfo(employeeId, body);
        }

        /**
         * Execute uploadEmployeeAvatarUrl request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Avatar Uploaded successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UploadAvatar body = buildBodyParams();
            return uploadEmployeeAvatarUrlWithHttpInfo(employeeId, body);
        }

        /**
         * Execute uploadEmployeeAvatarUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Avatar Uploaded successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UploadAvatar body = buildBodyParams();
            return uploadEmployeeAvatarUrlAsync(employeeId, body, _callback);
        }
    }

    /**
     * Upload employee&#39;s avatar by image url
     * Upload an employee&#39;s Avatar by providing a URL to the image to upload.&lt;br /&gt;
     * @param employeeId Employee ID. (required)
     * @param body  (required)
     * @return UploadEmployeeAvatarUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Avatar Uploaded successfully </td><td>  -  </td></tr>
     </table>
     */
    public UploadEmployeeAvatarUrlRequestBuilder uploadEmployeeAvatarUrl(String url, String employeeId) throws IllegalArgumentException {
        if (url == null) throw new IllegalArgumentException("\"url\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new UploadEmployeeAvatarUrlRequestBuilder(url, employeeId);
    }
}
