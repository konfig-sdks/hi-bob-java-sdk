/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CustomTableEntriesList;
import com.konfigthis.client.model.CustomTablesCreateNewEntryRequest;
import com.konfigthis.client.model.CustomTablesUpdateEntryRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CustomTablesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomTablesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CustomTablesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEntryCall(String employeeId, String customTableId, CustomTablesCreateNewEntryRequest values, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = values;

        // create path and map variables
        String localVarPath = "/people/custom-tables/{employee_id}/{custom_table_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "custom_table_id" + "}", localVarApiClient.escapeString(customTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEntryValidateBeforeCall(String employeeId, String customTableId, CustomTablesCreateNewEntryRequest values, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling createNewEntry(Async)");
        }

        // verify the required parameter 'customTableId' is set
        if (customTableId == null) {
            throw new ApiException("Missing the required parameter 'customTableId' when calling createNewEntry(Async)");
        }

        // verify the required parameter 'values' is set
        if (values == null) {
            throw new ApiException("Missing the required parameter 'values' when calling createNewEntry(Async)");
        }

        return createNewEntryCall(employeeId, customTableId, values, _callback);

    }


    private ApiResponse<Void> createNewEntryWithHttpInfo(String employeeId, String customTableId, CustomTablesCreateNewEntryRequest values) throws ApiException {
        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(employeeId, customTableId, values, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewEntryAsync(String employeeId, String customTableId, CustomTablesCreateNewEntryRequest values, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEntryValidateBeforeCall(employeeId, customTableId, values, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewEntryRequestBuilder {
        private final String employeeId;
        private final String customTableId;
        private String RAW_BODY;

        private CreateNewEntryRequestBuilder(String employeeId, String customTableId) {
            this.employeeId = employeeId;
            this.customTableId = customTableId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return CreateNewEntryRequestBuilder
         */
        public CreateNewEntryRequestBuilder RAW_BODY(String RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for createNewEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomTablesCreateNewEntryRequest values = buildBodyParams();
            return createNewEntryCall(employeeId, customTableId, values, _callback);
        }

        private CustomTablesCreateNewEntryRequest buildBodyParams() {
            CustomTablesCreateNewEntryRequest values = new CustomTablesCreateNewEntryRequest();
            values.RAW_BODY(this.RAW_BODY);
            return values;
        }

        /**
         * Execute createNewEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CustomTablesCreateNewEntryRequest values = buildBodyParams();
            createNewEntryWithHttpInfo(employeeId, customTableId, values);
        }

        /**
         * Execute createNewEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CustomTablesCreateNewEntryRequest values = buildBodyParams();
            return createNewEntryWithHttpInfo(employeeId, customTableId, values);
        }

        /**
         * Execute createNewEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CustomTablesCreateNewEntryRequest values = buildBodyParams();
            return createNewEntryAsync(employeeId, customTableId, values, _callback);
        }
    }

    /**
     * Create new custom table entry
     * 
     * @param employeeId Employee ID. (required)
     * @param customTableId The ID of custom table. (required)
     * @param values  (required)
     * @return CreateNewEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry created successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewEntryRequestBuilder createNewEntry(String employeeId, String customTableId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (customTableId == null) throw new IllegalArgumentException("\"customTableId\" is required but got null");
            

        return new CreateNewEntryRequestBuilder(employeeId, customTableId);
    }
    private okhttp3.Call deleteEntryByIdCall(String employeeId, String customTableId, String entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "custom_table_id" + "}", localVarApiClient.escapeString(customTableId.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEntryByIdValidateBeforeCall(String employeeId, String customTableId, String entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling deleteEntryById(Async)");
        }

        // verify the required parameter 'customTableId' is set
        if (customTableId == null) {
            throw new ApiException("Missing the required parameter 'customTableId' when calling deleteEntryById(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteEntryById(Async)");
        }

        return deleteEntryByIdCall(employeeId, customTableId, entryId, _callback);

    }


    private ApiResponse<Void> deleteEntryByIdWithHttpInfo(String employeeId, String customTableId, String entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteEntryByIdValidateBeforeCall(employeeId, customTableId, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEntryByIdAsync(String employeeId, String customTableId, String entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEntryByIdValidateBeforeCall(employeeId, customTableId, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEntryByIdRequestBuilder {
        private final String employeeId;
        private final String customTableId;
        private final String entryId;

        private DeleteEntryByIdRequestBuilder(String employeeId, String customTableId, String entryId) {
            this.employeeId = employeeId;
            this.customTableId = customTableId;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteEntryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEntryByIdCall(employeeId, customTableId, entryId, _callback);
        }


        /**
         * Execute deleteEntryById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEntryByIdWithHttpInfo(employeeId, customTableId, entryId);
        }

        /**
         * Execute deleteEntryById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEntryByIdWithHttpInfo(employeeId, customTableId, entryId);
        }

        /**
         * Execute deleteEntryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEntryByIdAsync(employeeId, customTableId, entryId, _callback);
        }
    }

    /**
     * Delete custom table entry
     * 
     * @param employeeId Employee ID. (required)
     * @param customTableId The ID of custom table. (required)
     * @param entryId The ID of custom table entry. (required)
     * @return DeleteEntryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEntryByIdRequestBuilder deleteEntryById(String employeeId, String customTableId, String entryId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (customTableId == null) throw new IllegalArgumentException("\"customTableId\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
            

        return new DeleteEntryByIdRequestBuilder(employeeId, customTableId, entryId);
    }
    private okhttp3.Call readEntriesCall(String employeeId, String customTableId, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/custom-tables/{employee_id}/{custom_table_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "custom_table_id" + "}", localVarApiClient.escapeString(customTableId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeHumanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHumanReadable", includeHumanReadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEntriesValidateBeforeCall(String employeeId, String customTableId, Boolean includeHumanReadable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling readEntries(Async)");
        }

        // verify the required parameter 'customTableId' is set
        if (customTableId == null) {
            throw new ApiException("Missing the required parameter 'customTableId' when calling readEntries(Async)");
        }

        return readEntriesCall(employeeId, customTableId, includeHumanReadable, _callback);

    }


    private ApiResponse<CustomTableEntriesList> readEntriesWithHttpInfo(String employeeId, String customTableId, Boolean includeHumanReadable) throws ApiException {
        okhttp3.Call localVarCall = readEntriesValidateBeforeCall(employeeId, customTableId, includeHumanReadable, null);
        Type localVarReturnType = new TypeToken<CustomTableEntriesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call readEntriesAsync(String employeeId, String customTableId, Boolean includeHumanReadable, final ApiCallback<CustomTableEntriesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEntriesValidateBeforeCall(employeeId, customTableId, includeHumanReadable, _callback);
        Type localVarReturnType = new TypeToken<CustomTableEntriesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReadEntriesRequestBuilder {
        private final String employeeId;
        private final String customTableId;
        private Boolean includeHumanReadable;

        private ReadEntriesRequestBuilder(String employeeId, String customTableId) {
            this.employeeId = employeeId;
            this.customTableId = customTableId;
        }

        /**
         * Set includeHumanReadable
         * @param includeHumanReadable Whether to include the additional \&quot;humanReadable\&quot; JSON node in the response. (optional, default to false)
         * @return ReadEntriesRequestBuilder
         */
        public ReadEntriesRequestBuilder includeHumanReadable(Boolean includeHumanReadable) {
            this.includeHumanReadable = includeHumanReadable;
            return this;
        }
        
        /**
         * Build call for readEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return readEntriesCall(employeeId, customTableId, includeHumanReadable, _callback);
        }


        /**
         * Execute readEntries request
         * @return CustomTableEntriesList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public CustomTableEntriesList execute() throws ApiException {
            ApiResponse<CustomTableEntriesList> localVarResp = readEntriesWithHttpInfo(employeeId, customTableId, includeHumanReadable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute readEntries request with HTTP info returned
         * @return ApiResponse&lt;CustomTableEntriesList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CustomTableEntriesList> executeWithHttpInfo() throws ApiException {
            return readEntriesWithHttpInfo(employeeId, customTableId, includeHumanReadable);
        }

        /**
         * Execute readEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CustomTableEntriesList> _callback) throws ApiException {
            return readEntriesAsync(employeeId, customTableId, includeHumanReadable, _callback);
        }
    }

    /**
     * Read all entries of the given custom table
     * 
     * @param employeeId Employee ID. (required)
     * @param customTableId The ID of custom table. (required)
     * @return ReadEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ReadEntriesRequestBuilder readEntries(String employeeId, String customTableId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (customTableId == null) throw new IllegalArgumentException("\"customTableId\" is required but got null");
            

        return new ReadEntriesRequestBuilder(employeeId, customTableId);
    }
    private okhttp3.Call updateEntryCall(String employeeId, String customTableId, String entryId, CustomTablesUpdateEntryRequest entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/custom-tables/{employee_id}/{custom_table_id}/{entry_id}"
            .replace("{" + "employee_id" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "custom_table_id" + "}", localVarApiClient.escapeString(customTableId.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEntryValidateBeforeCall(String employeeId, String customTableId, String entryId, CustomTablesUpdateEntryRequest entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling updateEntry(Async)");
        }

        // verify the required parameter 'customTableId' is set
        if (customTableId == null) {
            throw new ApiException("Missing the required parameter 'customTableId' when calling updateEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateEntry(Async)");
        }

        return updateEntryCall(employeeId, customTableId, entryId, entry, _callback);

    }


    private ApiResponse<Void> updateEntryWithHttpInfo(String employeeId, String customTableId, String entryId, CustomTablesUpdateEntryRequest entry) throws ApiException {
        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(employeeId, customTableId, entryId, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEntryAsync(String employeeId, String customTableId, String entryId, CustomTablesUpdateEntryRequest entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEntryValidateBeforeCall(employeeId, customTableId, entryId, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEntryRequestBuilder {
        private final String employeeId;
        private final String customTableId;
        private final String entryId;
        private String RAW_BODY;

        private UpdateEntryRequestBuilder(String employeeId, String customTableId, String entryId) {
            this.employeeId = employeeId;
            this.customTableId = customTableId;
            this.entryId = entryId;
        }

        /**
         * Set RAW_BODY
         * @param RAW_BODY  (optional)
         * @return UpdateEntryRequestBuilder
         */
        public UpdateEntryRequestBuilder RAW_BODY(String RAW_BODY) {
            this.RAW_BODY = RAW_BODY;
            return this;
        }
        
        /**
         * Build call for updateEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CustomTablesUpdateEntryRequest entry = buildBodyParams();
            return updateEntryCall(employeeId, customTableId, entryId, entry, _callback);
        }

        private CustomTablesUpdateEntryRequest buildBodyParams() {
            CustomTablesUpdateEntryRequest entry = new CustomTablesUpdateEntryRequest();
            entry.RAW_BODY(this.RAW_BODY);
            return entry;
        }

        /**
         * Execute updateEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            CustomTablesUpdateEntryRequest entry = buildBodyParams();
            updateEntryWithHttpInfo(employeeId, customTableId, entryId, entry);
        }

        /**
         * Execute updateEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            CustomTablesUpdateEntryRequest entry = buildBodyParams();
            return updateEntryWithHttpInfo(employeeId, customTableId, entryId, entry);
        }

        /**
         * Execute updateEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            CustomTablesUpdateEntryRequest entry = buildBodyParams();
            return updateEntryAsync(employeeId, customTableId, entryId, entry, _callback);
        }
    }

    /**
     * Update custom table entry
     * 
     * @param employeeId Employee ID. (required)
     * @param customTableId The ID of custom table. (required)
     * @param entryId The ID of custom table entry. (required)
     * @return UpdateEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry updated successfully </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEntryRequestBuilder updateEntry(String employeeId, String customTableId, String entryId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (customTableId == null) throw new IllegalArgumentException("\"customTableId\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
            

        return new UpdateEntryRequestBuilder(employeeId, customTableId, entryId);
    }
}
