/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddDocument;
import com.konfigthis.client.model.DocumentsUploadConfidentialFileRequest;
import com.konfigthis.client.model.DocumentsUploadToSharedFolderRequest;
import com.konfigthis.client.model.EmployeeDocumentResponse;
import com.konfigthis.client.model.Error;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteEmployeeConfidentialDocCall(String id, String docId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/confidential/{docId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "docId" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmployeeConfidentialDocValidateBeforeCall(String id, String docId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEmployeeConfidentialDoc(Async)");
        }

        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling deleteEmployeeConfidentialDoc(Async)");
        }

        return deleteEmployeeConfidentialDocCall(id, docId, _callback);

    }


    private ApiResponse<Void> deleteEmployeeConfidentialDocWithHttpInfo(String id, String docId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmployeeConfidentialDocValidateBeforeCall(id, docId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmployeeConfidentialDocAsync(String id, String docId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmployeeConfidentialDocValidateBeforeCall(id, docId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEmployeeConfidentialDocRequestBuilder {
        private final String id;
        private final String docId;

        private DeleteEmployeeConfidentialDocRequestBuilder(String id, String docId) {
            this.id = id;
            this.docId = docId;
        }

        /**
         * Build call for deleteEmployeeConfidentialDoc
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmployeeConfidentialDocCall(id, docId, _callback);
        }


        /**
         * Execute deleteEmployeeConfidentialDoc request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmployeeConfidentialDocWithHttpInfo(id, docId);
        }

        /**
         * Execute deleteEmployeeConfidentialDoc request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmployeeConfidentialDocWithHttpInfo(id, docId);
        }

        /**
         * Execute deleteEmployeeConfidentialDoc request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmployeeConfidentialDocAsync(id, docId, _callback);
        }
    }

    /**
     * Delete a specific document from the employee&#39;s confidential folder.
     * 
     * @param id Employee ID. (required)
     * @param docId Document ID. (required)
     * @return DeleteEmployeeConfidentialDocRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEmployeeConfidentialDocRequestBuilder deleteEmployeeConfidentialDoc(String id, String docId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (docId == null) throw new IllegalArgumentException("\"docId\" is required but got null");
            

        return new DeleteEmployeeConfidentialDocRequestBuilder(id, docId);
    }
    private okhttp3.Call downloadLinksCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/people/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadLinksValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadLinks(Async)");
        }

        return downloadLinksCall(id, _callback);

    }


    private ApiResponse<EmployeeDocumentResponse> downloadLinksWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = downloadLinksValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmployeeDocumentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadLinksAsync(String id, final ApiCallback<EmployeeDocumentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadLinksValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmployeeDocumentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadLinksRequestBuilder {
        private final String id;

        private DownloadLinksRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for downloadLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of the documents&#39; names and download links. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadLinksCall(id, _callback);
        }


        /**
         * Execute downloadLinks request
         * @return EmployeeDocumentResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of the documents&#39; names and download links. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public EmployeeDocumentResponse execute() throws ApiException {
            ApiResponse<EmployeeDocumentResponse> localVarResp = downloadLinksWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadLinks request with HTTP info returned
         * @return ApiResponse&lt;EmployeeDocumentResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of the documents&#39; names and download links. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeeDocumentResponse> executeWithHttpInfo() throws ApiException {
            return downloadLinksWithHttpInfo(id);
        }

        /**
         * Execute downloadLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of the documents&#39; names and download links. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeeDocumentResponse> _callback) throws ApiException {
            return downloadLinksAsync(id, _callback);
        }
    }

    /**
     * Download employee&#39;s documents
     * Returns a list of documents and download links.&lt;br /&gt;
     * @param id Employee ID. (required)
     * @return DownloadLinksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of the documents&#39; names and download links. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DownloadLinksRequestBuilder downloadLinks(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new DownloadLinksRequestBuilder(id);
    }
    private okhttp3.Call removeEmployeeSharedDocumentCall(String id, String docId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/shared/{docId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "docId" + "}", localVarApiClient.escapeString(docId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeEmployeeSharedDocumentValidateBeforeCall(String id, String docId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeEmployeeSharedDocument(Async)");
        }

        // verify the required parameter 'docId' is set
        if (docId == null) {
            throw new ApiException("Missing the required parameter 'docId' when calling removeEmployeeSharedDocument(Async)");
        }

        return removeEmployeeSharedDocumentCall(id, docId, _callback);

    }


    private ApiResponse<Void> removeEmployeeSharedDocumentWithHttpInfo(String id, String docId) throws ApiException {
        okhttp3.Call localVarCall = removeEmployeeSharedDocumentValidateBeforeCall(id, docId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call removeEmployeeSharedDocumentAsync(String id, String docId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeEmployeeSharedDocumentValidateBeforeCall(id, docId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class RemoveEmployeeSharedDocumentRequestBuilder {
        private final String id;
        private final String docId;

        private RemoveEmployeeSharedDocumentRequestBuilder(String id, String docId) {
            this.id = id;
            this.docId = docId;
        }

        /**
         * Build call for removeEmployeeSharedDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeEmployeeSharedDocumentCall(id, docId, _callback);
        }


        /**
         * Execute removeEmployeeSharedDocument request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            removeEmployeeSharedDocumentWithHttpInfo(id, docId);
        }

        /**
         * Execute removeEmployeeSharedDocument request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return removeEmployeeSharedDocumentWithHttpInfo(id, docId);
        }

        /**
         * Execute removeEmployeeSharedDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return removeEmployeeSharedDocumentAsync(id, docId, _callback);
        }
    }

    /**
     * Delete specific document from the employee&#39;s shared folder.
     * 
     * @param id Employee ID. (required)
     * @param docId Document ID. (required)
     * @return RemoveEmployeeSharedDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveEmployeeSharedDocumentRequestBuilder removeEmployeeSharedDocument(String id, String docId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (docId == null) throw new IllegalArgumentException("\"docId\" is required but got null");
            

        return new RemoveEmployeeSharedDocumentRequestBuilder(id, docId);
    }
    private okhttp3.Call uploadConfidentialFileCall(String id, File _file, DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsUploadConfidentialFileRequest;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/confidential/upload"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadConfidentialFileValidateBeforeCall(String id, File _file, DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadConfidentialFile(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadConfidentialFile(Async)");
        }

        // verify the required parameter 'documentsUploadConfidentialFileRequest' is set
        if (documentsUploadConfidentialFileRequest == null) {
            throw new ApiException("Missing the required parameter 'documentsUploadConfidentialFileRequest' when calling uploadConfidentialFile(Async)");
        }

        return uploadConfidentialFileCall(id, _file, documentsUploadConfidentialFileRequest, _callback);

    }


    private ApiResponse<Void> uploadConfidentialFileWithHttpInfo(String id, File _file, DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadConfidentialFileValidateBeforeCall(id, _file, documentsUploadConfidentialFileRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadConfidentialFileAsync(String id, File _file, DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadConfidentialFileValidateBeforeCall(id, _file, documentsUploadConfidentialFileRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadConfidentialFileRequestBuilder {
        private final String id;
        private final File _file;

        private UploadConfidentialFileRequestBuilder(String id, File _file) {
            this.id = id;
            this._file = _file;
        }

        /**
         * Build call for uploadConfidentialFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest = buildBodyParams();
            return uploadConfidentialFileCall(id, _file, documentsUploadConfidentialFileRequest, _callback);
        }

        private DocumentsUploadConfidentialFileRequest buildBodyParams() {
            DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest = new DocumentsUploadConfidentialFileRequest();
            documentsUploadConfidentialFileRequest._file(this._file);
            return documentsUploadConfidentialFileRequest;
        }

        /**
         * Execute uploadConfidentialFile request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest = buildBodyParams();
            uploadConfidentialFileWithHttpInfo(id, _file, documentsUploadConfidentialFileRequest);
        }

        /**
         * Execute uploadConfidentialFile request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest = buildBodyParams();
            return uploadConfidentialFileWithHttpInfo(id, _file, documentsUploadConfidentialFileRequest);
        }

        /**
         * Execute uploadConfidentialFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DocumentsUploadConfidentialFileRequest documentsUploadConfidentialFileRequest = buildBodyParams();
            return uploadConfidentialFileAsync(id, _file, documentsUploadConfidentialFileRequest, _callback);
        }
    }

    /**
     * Upload a file to the employee&#39;s confidential folder.
     * 
     * @param id employee id (required)
     * @param _file The file to upload. (required)
     * @param documentsUploadConfidentialFileRequest  (required)
     * @return UploadConfidentialFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public UploadConfidentialFileRequestBuilder uploadConfidentialFile(String id, File _file) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadConfidentialFileRequestBuilder(id, _file);
    }
    private okhttp3.Call uploadToConfidentialFolderCall(String id, AddDocument document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/confidential"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadToConfidentialFolderValidateBeforeCall(String id, AddDocument document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadToConfidentialFolder(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling uploadToConfidentialFolder(Async)");
        }

        return uploadToConfidentialFolderCall(id, document, _callback);

    }


    private ApiResponse<Void> uploadToConfidentialFolderWithHttpInfo(String id, AddDocument document) throws ApiException {
        okhttp3.Call localVarCall = uploadToConfidentialFolderValidateBeforeCall(id, document, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadToConfidentialFolderAsync(String id, AddDocument document, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadToConfidentialFolderValidateBeforeCall(id, document, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadToConfidentialFolderRequestBuilder {
        private final String id;
        private List<String> tags;
        private String documentName;
        private String documentUrl;

        private UploadToConfidentialFolderRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set tags
         * @param tags Tags to. (optional)
         * @return UploadToConfidentialFolderRequestBuilder
         */
        public UploadToConfidentialFolderRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set documentName
         * @param documentName Document name. (optional)
         * @return UploadToConfidentialFolderRequestBuilder
         */
        public UploadToConfidentialFolderRequestBuilder documentName(String documentName) {
            this.documentName = documentName;
            return this;
        }
        
        /**
         * Set documentUrl
         * @param documentUrl URL of the document to upload. (optional)
         * @return UploadToConfidentialFolderRequestBuilder
         */
        public UploadToConfidentialFolderRequestBuilder documentUrl(String documentUrl) {
            this.documentUrl = documentUrl;
            return this;
        }
        
        /**
         * Build call for uploadToConfidentialFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToConfidentialFolderCall(id, document, _callback);
        }

        private AddDocument buildBodyParams() {
            AddDocument document = new AddDocument();
            document.tags(this.tags);
            document.documentName(this.documentName);
            document.documentUrl(this.documentUrl);
            return document;
        }

        /**
         * Execute uploadToConfidentialFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AddDocument document = buildBodyParams();
            uploadToConfidentialFolderWithHttpInfo(id, document);
        }

        /**
         * Execute uploadToConfidentialFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToConfidentialFolderWithHttpInfo(id, document);
        }

        /**
         * Execute uploadToConfidentialFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToConfidentialFolderAsync(id, document, _callback);
        }
    }

    /**
     * Upload a document to the employee&#39;s confidential folder
     * 
     * @param id Employee ID. (required)
     * @param document Document to upload. (required)
     * @return UploadToConfidentialFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public UploadToConfidentialFolderRequestBuilder uploadToConfidentialFolder(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UploadToConfidentialFolderRequestBuilder(id);
    }
    private okhttp3.Call uploadToSharedFolderCall(String id, AddDocument document, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = document;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/shared"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadToSharedFolderValidateBeforeCall(String id, AddDocument document, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadToSharedFolder(Async)");
        }

        // verify the required parameter 'document' is set
        if (document == null) {
            throw new ApiException("Missing the required parameter 'document' when calling uploadToSharedFolder(Async)");
        }

        return uploadToSharedFolderCall(id, document, _callback);

    }


    private ApiResponse<Void> uploadToSharedFolderWithHttpInfo(String id, AddDocument document) throws ApiException {
        okhttp3.Call localVarCall = uploadToSharedFolderValidateBeforeCall(id, document, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadToSharedFolderAsync(String id, AddDocument document, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadToSharedFolderValidateBeforeCall(id, document, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadToSharedFolderRequestBuilder {
        private final String id;
        private List<String> tags;
        private String documentName;
        private String documentUrl;

        private UploadToSharedFolderRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set tags
         * @param tags Tags to. (optional)
         * @return UploadToSharedFolderRequestBuilder
         */
        public UploadToSharedFolderRequestBuilder tags(List<String> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set documentName
         * @param documentName Document name. (optional)
         * @return UploadToSharedFolderRequestBuilder
         */
        public UploadToSharedFolderRequestBuilder documentName(String documentName) {
            this.documentName = documentName;
            return this;
        }
        
        /**
         * Set documentUrl
         * @param documentUrl URL of the document to upload. (optional)
         * @return UploadToSharedFolderRequestBuilder
         */
        public UploadToSharedFolderRequestBuilder documentUrl(String documentUrl) {
            this.documentUrl = documentUrl;
            return this;
        }
        
        /**
         * Build call for uploadToSharedFolder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToSharedFolderCall(id, document, _callback);
        }

        private AddDocument buildBodyParams() {
            AddDocument document = new AddDocument();
            document.tags(this.tags);
            document.documentName(this.documentName);
            document.documentUrl(this.documentUrl);
            return document;
        }

        /**
         * Execute uploadToSharedFolder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AddDocument document = buildBodyParams();
            uploadToSharedFolderWithHttpInfo(id, document);
        }

        /**
         * Execute uploadToSharedFolder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToSharedFolderWithHttpInfo(id, document);
        }

        /**
         * Execute uploadToSharedFolder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AddDocument document = buildBodyParams();
            return uploadToSharedFolderAsync(id, document, _callback);
        }
    }

    /**
     * Upload a document to the employee&#39;s shared folder
     * 
     * @param id Employee ID. (required)
     * @param document Document to upload. (required)
     * @return UploadToSharedFolderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Upload success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public UploadToSharedFolderRequestBuilder uploadToSharedFolder(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UploadToSharedFolderRequestBuilder(id);
    }
    private okhttp3.Call uploadToSharedFolder_0Call(String id, File _file, DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsUploadToSharedFolderRequest;

        // create path and map variables
        String localVarPath = "/docs/people/{id}/shared/upload"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadToSharedFolder_0ValidateBeforeCall(String id, File _file, DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling uploadToSharedFolder_0(Async)");
        }

        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadToSharedFolder_0(Async)");
        }

        // verify the required parameter 'documentsUploadToSharedFolderRequest' is set
        if (documentsUploadToSharedFolderRequest == null) {
            throw new ApiException("Missing the required parameter 'documentsUploadToSharedFolderRequest' when calling uploadToSharedFolder_0(Async)");
        }

        return uploadToSharedFolder_0Call(id, _file, documentsUploadToSharedFolderRequest, _callback);

    }


    private ApiResponse<Void> uploadToSharedFolder_0WithHttpInfo(String id, File _file, DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadToSharedFolder_0ValidateBeforeCall(id, _file, documentsUploadToSharedFolderRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call uploadToSharedFolder_0Async(String id, File _file, DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadToSharedFolder_0ValidateBeforeCall(id, _file, documentsUploadToSharedFolderRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UploadToSharedFolder0RequestBuilder {
        private final String id;
        private final File _file;

        private UploadToSharedFolder0RequestBuilder(String id, File _file) {
            this.id = id;
            this._file = _file;
        }

        /**
         * Build call for uploadToSharedFolder_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest = buildBodyParams();
            return uploadToSharedFolder_0Call(id, _file, documentsUploadToSharedFolderRequest, _callback);
        }

        private DocumentsUploadToSharedFolderRequest buildBodyParams() {
            DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest = new DocumentsUploadToSharedFolderRequest();
            documentsUploadToSharedFolderRequest._file(this._file);
            return documentsUploadToSharedFolderRequest;
        }

        /**
         * Execute uploadToSharedFolder_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest = buildBodyParams();
            uploadToSharedFolder_0WithHttpInfo(id, _file, documentsUploadToSharedFolderRequest);
        }

        /**
         * Execute uploadToSharedFolder_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest = buildBodyParams();
            return uploadToSharedFolder_0WithHttpInfo(id, _file, documentsUploadToSharedFolderRequest);
        }

        /**
         * Execute uploadToSharedFolder_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            DocumentsUploadToSharedFolderRequest documentsUploadToSharedFolderRequest = buildBodyParams();
            return uploadToSharedFolder_0Async(id, _file, documentsUploadToSharedFolderRequest, _callback);
        }
    }

    /**
     * Upload a file to the employee&#39;s shared folder.
     * 
     * @param id Employee ID. (required)
     * @param _file The file to upload. (required)
     * @param documentsUploadToSharedFolderRequest  (required)
     * @return UploadToSharedFolder0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Uploaded document ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public UploadToSharedFolder0RequestBuilder uploadToSharedFolder_0(String id, File _file) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (_file == null) throw new IllegalArgumentException("\"_file\" is required but got null");
        return new UploadToSharedFolder0RequestBuilder(id, _file);
    }
}
