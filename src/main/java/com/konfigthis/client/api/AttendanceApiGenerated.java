/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ImportAttendanceData;
import com.konfigthis.client.model.ImportAttendanceEvent;
import com.konfigthis.client.model.ImportAttendanceResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AttendanceApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttendanceApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AttendanceApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call importDataCall(String importMethod, ImportAttendanceData body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/attendance/import/{importMethod}"
            .replace("{" + "importMethod" + "}", localVarApiClient.escapeString(importMethod.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importDataValidateBeforeCall(String importMethod, ImportAttendanceData body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'importMethod' is set
        if (importMethod == null) {
            throw new ApiException("Missing the required parameter 'importMethod' when calling importData(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling importData(Async)");
        }

        return importDataCall(importMethod, body, _callback);

    }


    private ApiResponse<ImportAttendanceResponse> importDataWithHttpInfo(String importMethod, ImportAttendanceData body) throws ApiException {
        okhttp3.Call localVarCall = importDataValidateBeforeCall(importMethod, body, null);
        Type localVarReturnType = new TypeToken<ImportAttendanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importDataAsync(String importMethod, ImportAttendanceData body, final ApiCallback<ImportAttendanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = importDataValidateBeforeCall(importMethod, body, _callback);
        Type localVarReturnType = new TypeToken<ImportAttendanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportDataRequestBuilder {
        private final String idType;
        private final List<ImportAttendanceEvent> requests;
        private final String importMethod;
        private String dateTimeFormat;

        private ImportDataRequestBuilder(String idType, List<ImportAttendanceEvent> requests, String importMethod) {
            this.idType = idType;
            this.requests = requests;
            this.importMethod = importMethod;
        }

        /**
         * Set dateTimeFormat
         * @param dateTimeFormat Allows to set custom date format for the date-time values sent in the requests (optional)
         * @return ImportDataRequestBuilder
         */
        public ImportDataRequestBuilder dateTimeFormat(String dateTimeFormat) {
            this.dateTimeFormat = dateTimeFormat;
            return this;
        }
        
        /**
         * Build call for importData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Records imported </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, see error description. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Authorization is implemented using a service user with attendance management permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ImportAttendanceData body = buildBodyParams();
            return importDataCall(importMethod, body, _callback);
        }

        private ImportAttendanceData buildBodyParams() {
            ImportAttendanceData body = new ImportAttendanceData();
            body.idType(this.idType);
            body.requests(this.requests);
            body.dateTimeFormat(this.dateTimeFormat);
            return body;
        }

        /**
         * Execute importData request
         * @return ImportAttendanceResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Records imported </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, see error description. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Authorization is implemented using a service user with attendance management permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ImportAttendanceResponse execute() throws ApiException {
            ImportAttendanceData body = buildBodyParams();
            ApiResponse<ImportAttendanceResponse> localVarResp = importDataWithHttpInfo(importMethod, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importData request with HTTP info returned
         * @return ApiResponse&lt;ImportAttendanceResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Records imported </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, see error description. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Authorization is implemented using a service user with attendance management permissions. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImportAttendanceResponse> executeWithHttpInfo() throws ApiException {
            ImportAttendanceData body = buildBodyParams();
            return importDataWithHttpInfo(importMethod, body);
        }

        /**
         * Execute importData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Records imported </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad request, see error description. </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden. Authorization is implemented using a service user with attendance management permissions. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImportAttendanceResponse> _callback) throws ApiException {
            ImportAttendanceData body = buildBodyParams();
            return importDataAsync(importMethod, body, _callback);
        }
    }

    /**
     * Import attendance data
     * 
     * @param importMethod Indicates if the provided data should be processed via an aggregation engine or immediately. &lt;ul&gt;Aggregate - will add the logs to a temporary location, and an aggregation job will process the data asynchronously.&lt;/ul&gt;&lt;ul&gt;Immediate - will insert the records as-is.&lt;/ul&gt; (required)
     * @param body  (required)
     * @return ImportDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Records imported </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request, see error description. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden. Authorization is implemented using a service user with attendance management permissions. </td><td>  -  </td></tr>
     </table>
     */
    public ImportDataRequestBuilder importData(String idType, List<ImportAttendanceEvent> requests, String importMethod) throws IllegalArgumentException {
        if (idType == null) throw new IllegalArgumentException("\"idType\" is required but got null");
            

        if (requests == null) throw new IllegalArgumentException("\"requests\" is required but got null");
        if (importMethod == null) throw new IllegalArgumentException("\"importMethod\" is required but got null");
            

        return new ImportDataRequestBuilder(idType, requests, importMethod);
    }
}
