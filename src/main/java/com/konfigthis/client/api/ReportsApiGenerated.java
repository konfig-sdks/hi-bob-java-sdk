/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import java.io.File;
import com.konfigthis.client.model.Reports;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ReportsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call downloadByIdCall(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/reports/{reportId}/download"
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (includeInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInfo", includeInfo));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (humanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("humanReadable", humanReadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadByIdValidateBeforeCall(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling downloadById(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling downloadById(Async)");
        }

        return downloadByIdCall(reportId, format, includeInfo, locale, humanReadable, _callback);

    }


    private ApiResponse<File> downloadByIdWithHttpInfo(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable) throws ApiException {
        okhttp3.Call localVarCall = downloadByIdValidateBeforeCall(reportId, format, includeInfo, locale, humanReadable, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadByIdAsync(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadByIdValidateBeforeCall(reportId, format, includeInfo, locale, humanReadable, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadByIdRequestBuilder {
        private final Double reportId;
        private final String format;
        private Boolean includeInfo;
        private String locale;
        private String humanReadable;

        private DownloadByIdRequestBuilder(double reportId, String format) {
            this.reportId = reportId;
            this.format = format;
        }

        /**
         * Set includeInfo
         * @param includeInfo Should include info. (optional)
         * @return DownloadByIdRequestBuilder
         */
        public DownloadByIdRequestBuilder includeInfo(Boolean includeInfo) {
            this.includeInfo = includeInfo;
            return this;
        }
        
        /**
         * Set locale
         * @param locale Requested language for the report columns in the format of locale (e.g. fr-FR). If this is not provided, the user preferences locale is used. (optional)
         * @return DownloadByIdRequestBuilder
         */
        public DownloadByIdRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set humanReadable
         * @param humanReadable Optional field. Only enforced when &lt;i&gt;&lt;b&gt;format&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;json&lt;/i&gt;. &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \&quot;humanReadable\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt; (optional)
         * @return DownloadByIdRequestBuilder
         */
        public DownloadByIdRequestBuilder humanReadable(String humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Build call for downloadById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Includes the report name and execution date in the report file. By default this is set to True. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadByIdCall(reportId, format, includeInfo, locale, humanReadable, _callback);
        }


        /**
         * Execute downloadById request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Includes the report name and execution date in the report file. By default this is set to True. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadByIdWithHttpInfo(reportId, format, includeInfo, locale, humanReadable);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadById request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Includes the report name and execution date in the report file. By default this is set to True. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadByIdWithHttpInfo(reportId, format, includeInfo, locale, humanReadable);
        }

        /**
         * Execute downloadById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Includes the report name and execution date in the report file. By default this is set to True. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadByIdAsync(reportId, format, includeInfo, locale, humanReadable, _callback);
        }
    }

    /**
     * Download the report by ID
     * Returns a report data file in the specified format.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service.
     * @param reportId Report ID (required)
     * @param format File format (required)
     * @return DownloadByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Includes the report name and execution date in the report file. By default this is set to True. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DownloadByIdRequestBuilder downloadById(double reportId, String format) throws IllegalArgumentException {
        
        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new DownloadByIdRequestBuilder(reportId, format);
    }
    private okhttp3.Call downloadReportFileCall(String reportName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/reports/download/{reportName}"
            .replace("{" + "reportName" + "}", localVarApiClient.escapeString(reportName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadReportFileValidateBeforeCall(String reportName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportName' is set
        if (reportName == null) {
            throw new ApiException("Missing the required parameter 'reportName' when calling downloadReportFile(Async)");
        }

        return downloadReportFileCall(reportName, _callback);

    }


    private ApiResponse<File> downloadReportFileWithHttpInfo(String reportName) throws ApiException {
        okhttp3.Call localVarCall = downloadReportFileValidateBeforeCall(reportName, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadReportFileAsync(String reportName, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadReportFileValidateBeforeCall(reportName, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DownloadReportFileRequestBuilder {
        private final String reportName;

        private DownloadReportFileRequestBuilder(String reportName) {
            this.reportName = reportName;
        }

        /**
         * Build call for downloadReportFile
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Include the report name and execution date in the report file. This defaults to true. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> The file is not yet ready, please try again. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadReportFileCall(reportName, _callback);
        }


        /**
         * Execute downloadReportFile request
         * @return File
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Include the report name and execution date in the report file. This defaults to true. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> The file is not yet ready, please try again. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public File execute() throws ApiException {
            ApiResponse<File> localVarResp = downloadReportFileWithHttpInfo(reportName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute downloadReportFile request with HTTP info returned
         * @return ApiResponse&lt;File&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Include the report name and execution date in the report file. This defaults to true. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> The file is not yet ready, please try again. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<File> executeWithHttpInfo() throws ApiException {
            return downloadReportFileWithHttpInfo(reportName);
        }

        /**
         * Execute downloadReportFile request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Include the report name and execution date in the report file. This defaults to true. </td><td>  -  </td></tr>
            <tr><td> 204 </td><td> The file is not yet ready, please try again. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<File> _callback) throws ApiException {
            return downloadReportFileAsync(reportName, _callback);
        }
    }

    /**
     * Download report by file URL
     * Returns the report data file when it is ready. If the file is not ready yet the response will be 204. It will then have to try again.&lt;br /&gt;(This URL is the response of the previous API: https://api.hibob.com/v1/company/reports/reportId/download-async)&lt;br /&gt;
     * @param reportName Report name (required)
     * @return DownloadReportFileRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Include the report name and execution date in the report file. This defaults to true. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The file is not yet ready, please try again. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public DownloadReportFileRequestBuilder downloadReportFile(String reportName) throws IllegalArgumentException {
        if (reportName == null) throw new IllegalArgumentException("\"reportName\" is required but got null");
            

        return new DownloadReportFileRequestBuilder(reportName);
    }
    private okhttp3.Call getDownloadUrlCall(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/reports/{reportId}/download-async"
            .replace("{" + "reportId" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (includeInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInfo", includeInfo));
        }

        if (locale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("locale", locale));
        }

        if (humanReadable != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("humanReadable", humanReadable));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDownloadUrlValidateBeforeCall(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling getDownloadUrl(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getDownloadUrl(Async)");
        }

        return getDownloadUrlCall(reportId, format, includeInfo, locale, humanReadable, _callback);

    }


    private ApiResponse<Void> getDownloadUrlWithHttpInfo(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable) throws ApiException {
        okhttp3.Call localVarCall = getDownloadUrlValidateBeforeCall(reportId, format, includeInfo, locale, humanReadable, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getDownloadUrlAsync(Double reportId, String format, Boolean includeInfo, String locale, String humanReadable, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDownloadUrlValidateBeforeCall(reportId, format, includeInfo, locale, humanReadable, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class GetDownloadUrlRequestBuilder {
        private final Double reportId;
        private final String format;
        private Boolean includeInfo;
        private String locale;
        private String humanReadable;

        private GetDownloadUrlRequestBuilder(double reportId, String format) {
            this.reportId = reportId;
            this.format = format;
        }

        /**
         * Set includeInfo
         * @param includeInfo Should include info (optional)
         * @return GetDownloadUrlRequestBuilder
         */
        public GetDownloadUrlRequestBuilder includeInfo(Boolean includeInfo) {
            this.includeInfo = includeInfo;
            return this;
        }
        
        /**
         * Set locale
         * @param locale Requested language for the report columns in the format of the locale (e.g. fr-FR). If this is not provided, the user preferences locale is used. (optional)
         * @return GetDownloadUrlRequestBuilder
         */
        public GetDownloadUrlRequestBuilder locale(String locale) {
            this.locale = locale;
            return this;
        }
        
        /**
         * Set humanReadable
         * @param humanReadable Optional field. Only enforced when &lt;i&gt;&lt;b&gt;format&lt;/b&gt;&lt;/i&gt; is &lt;i&gt;json&lt;/i&gt;. &lt;br&gt; &lt;b&gt;If not sent:&lt;/b&gt; supply machine-readable values only. &lt;br&gt; &lt;br&gt; Possible values: &lt;br&gt;  &lt;br&gt; &lt;b&gt;APPEND&lt;/b&gt; - include the additional \&quot;humanReadable\&quot; JSON node in the response. &lt;br&gt;  &lt;br&gt; &lt;b&gt;REPLACE&lt;/b&gt; - supply humanReadable values in JSON instead of machine-readable format. &lt;br&gt; (optional)
         * @return GetDownloadUrlRequestBuilder
         */
        public GetDownloadUrlRequestBuilder humanReadable(String humanReadable) {
            this.humanReadable = humanReadable;
            return this;
        }
        
        /**
         * Build call for getDownloadUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Report URL under \&quot;Location\&quot; in the response header. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDownloadUrlCall(reportId, format, includeInfo, locale, humanReadable, _callback);
        }


        /**
         * Execute getDownloadUrl request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Report URL under \&quot;Location\&quot; in the response header. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getDownloadUrlWithHttpInfo(reportId, format, includeInfo, locale, humanReadable);
        }

        /**
         * Execute getDownloadUrl request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Report URL under \&quot;Location\&quot; in the response header. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getDownloadUrlWithHttpInfo(reportId, format, includeInfo, locale, humanReadable);
        }

        /**
         * Execute getDownloadUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Report URL under \&quot;Location\&quot; in the response header. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getDownloadUrlAsync(reportId, format, includeInfo, locale, humanReadable, _callback);
        }
    }

    /**
     * Get the report download URL for polling
     * Returns the polling URL report file of the specified format under \&quot;Location\&quot; in the response header.&lt;br /&gt;
     * @param reportId Report id (required)
     * @param format File format (required)
     * @return GetDownloadUrlRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Report URL under \&quot;Location\&quot; in the response header. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetDownloadUrlRequestBuilder getDownloadUrl(double reportId, String format) throws IllegalArgumentException {
        
        if (format == null) throw new IllegalArgumentException("\"format\" is required but got null");
            

        return new GetDownloadUrlRequestBuilder(reportId, format);
    }
    private okhttp3.Call listAccessibleReportsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/company/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAccessibleReportsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listAccessibleReportsCall(_callback);

    }


    private ApiResponse<Reports> listAccessibleReportsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listAccessibleReportsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Reports>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAccessibleReportsAsync(final ApiCallback<Reports> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAccessibleReportsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Reports>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAccessibleReportsRequestBuilder {

        private ListAccessibleReportsRequestBuilder() {
        }

        /**
         * Build call for listAccessibleReports
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Company Reports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAccessibleReportsCall(_callback);
        }


        /**
         * Execute listAccessibleReports request
         * @return Reports
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Company Reports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Reports execute() throws ApiException {
            ApiResponse<Reports> localVarResp = listAccessibleReportsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAccessibleReports request with HTTP info returned
         * @return ApiResponse&lt;Reports&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Company Reports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Reports> executeWithHttpInfo() throws ApiException {
            return listAccessibleReportsWithHttpInfo();
        }

        /**
         * Execute listAccessibleReports request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Company Reports </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Reports> _callback) throws ApiException {
            return listAccessibleReportsAsync(_callback);
        }
    }

    /**
     * Read company reports
     * Returns a list of all the defined company reports. The data is filtered based on the access level of the user. Only viewable categories are returned.&lt;br /&gt;
     * @return ListAccessibleReportsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Company Reports </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ListAccessibleReportsRequestBuilder listAccessibleReports() throws IllegalArgumentException {
        return new ListAccessibleReportsRequestBuilder();
    }
}
