/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AdjustmentRequest;
import com.konfigthis.client.model.BalanceResult;
import com.konfigthis.client.model.Error;
import java.time.LocalDate;
import com.konfigthis.client.model.OutTodays;
import com.konfigthis.client.model.Policy;
import com.konfigthis.client.model.PolicyNames;
import com.konfigthis.client.model.PolicyType;
import com.konfigthis.client.model.PolicyTypes;
import com.konfigthis.client.model.ReasonCodes;
import com.konfigthis.client.model.ReasonCodesNames;
import com.konfigthis.client.model.Requests;
import com.konfigthis.client.model.SubmitTimeoffRequest;
import com.konfigthis.client.model.SubmitTimeoffRequestDiffHours;
import com.konfigthis.client.model.SubmitTimeoffRequestDiffHoursDurationsInner;
import com.konfigthis.client.model.TimeoffChanges;
import com.konfigthis.client.model.TimeoffRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeOffApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeOffApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeOffApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addReasonCodesCall(String policyType, ReasonCodesNames body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/timeoff/policy-types/{policyType}/reason-codes"
            .replace("{" + "policyType" + "}", localVarApiClient.escapeString(policyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addReasonCodesValidateBeforeCall(String policyType, ReasonCodesNames body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyType' is set
        if (policyType == null) {
            throw new ApiException("Missing the required parameter 'policyType' when calling addReasonCodes(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addReasonCodes(Async)");
        }

        return addReasonCodesCall(policyType, body, _callback);

    }


    private ApiResponse<Void> addReasonCodesWithHttpInfo(String policyType, ReasonCodesNames body) throws ApiException {
        okhttp3.Call localVarCall = addReasonCodesValidateBeforeCall(policyType, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call addReasonCodesAsync(String policyType, ReasonCodesNames body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addReasonCodesValidateBeforeCall(policyType, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class AddReasonCodesRequestBuilder {
        private final String policyType;
        private List<String> reasonCodes;

        private AddReasonCodesRequestBuilder(String policyType) {
            this.policyType = policyType;
        }

        /**
         * Set reasonCodes
         * @param reasonCodes  (optional)
         * @return AddReasonCodesRequestBuilder
         */
        public AddReasonCodesRequestBuilder reasonCodes(List<String> reasonCodes) {
            this.reasonCodes = reasonCodes;
            return this;
        }
        
        /**
         * Build call for addReasonCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ReasonCodesNames body = buildBodyParams();
            return addReasonCodesCall(policyType, body, _callback);
        }

        private ReasonCodesNames buildBodyParams() {
            ReasonCodesNames body = new ReasonCodesNames();
            body.reasonCodes(this.reasonCodes);
            return body;
        }

        /**
         * Execute addReasonCodes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            ReasonCodesNames body = buildBodyParams();
            addReasonCodesWithHttpInfo(policyType, body);
        }

        /**
         * Execute addReasonCodes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            ReasonCodesNames body = buildBodyParams();
            return addReasonCodesWithHttpInfo(policyType, body);
        }

        /**
         * Execute addReasonCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Submitted successfully. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            ReasonCodesNames body = buildBodyParams();
            return addReasonCodesAsync(policyType, body, _callback);
        }
    }

    /**
     * Add a list of reason codes for a given policy type.
     * Add a list of reason codes for a given policy type.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service.
     * @param policyType Policy Type name (required)
     * @param body  (required)
     * @return AddReasonCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Submitted successfully. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public AddReasonCodesRequestBuilder addReasonCodes(String policyType) throws IllegalArgumentException {
        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        return new AddReasonCodesRequestBuilder(policyType);
    }
    private okhttp3.Call cancelRequestCall(String id, Integer requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/requests/{requestId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelRequestValidateBeforeCall(String id, Integer requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cancelRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling cancelRequest(Async)");
        }

        return cancelRequestCall(id, requestId, _callback);

    }


    private ApiResponse<Void> cancelRequestWithHttpInfo(String id, Integer requestId) throws ApiException {
        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(id, requestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call cancelRequestAsync(String id, Integer requestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelRequestValidateBeforeCall(id, requestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CancelRequestRequestBuilder {
        private final String id;
        private final Integer requestId;

        private CancelRequestRequestBuilder(String id, Integer requestId) {
            this.id = id;
            this.requestId = requestId;
        }

        /**
         * Build call for cancelRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully canceled </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelRequestCall(id, requestId, _callback);
        }


        /**
         * Execute cancelRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully canceled </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            cancelRequestWithHttpInfo(id, requestId);
        }

        /**
         * Execute cancelRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully canceled </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return cancelRequestWithHttpInfo(id, requestId);
        }

        /**
         * Execute cancelRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully canceled </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return cancelRequestAsync(id, requestId, _callback);
        }
    }

    /**
     * Cancel an existing timeoff request
     * Cancels an existing time off request.&lt;br /&gt;
     * @param id Employee ID. (required)
     * @param requestId Request ID. (required)
     * @return CancelRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully canceled </td><td>  -  </td></tr>
     </table>
     */
    public CancelRequestRequestBuilder cancelRequest(String id, Integer requestId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
        return new CancelRequestRequestBuilder(id, requestId);
    }
    private okhttp3.Call createBalanceAdjustmentCall(String id, AdjustmentRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/adjustments"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBalanceAdjustmentValidateBeforeCall(String id, AdjustmentRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createBalanceAdjustment(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createBalanceAdjustment(Async)");
        }

        return createBalanceAdjustmentCall(id, body, _callback);

    }


    private ApiResponse<Void> createBalanceAdjustmentWithHttpInfo(String id, AdjustmentRequest body) throws ApiException {
        okhttp3.Call localVarCall = createBalanceAdjustmentValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createBalanceAdjustmentAsync(String id, AdjustmentRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBalanceAdjustmentValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateBalanceAdjustmentRequestBuilder {
        private final String id;
        private String adjustmentType;
        private String policyType;
        private LocalDate effectiveDate;
        private Double amount;
        private String reason;

        private CreateBalanceAdjustmentRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set adjustmentType
         * @param adjustmentType Adjustment type - balance or time used. (optional)
         * @return CreateBalanceAdjustmentRequestBuilder
         */
        public CreateBalanceAdjustmentRequestBuilder adjustmentType(String adjustmentType) {
            this.adjustmentType = adjustmentType;
            return this;
        }
        
        /**
         * Set policyType
         * @param policyType Policy type name. (optional)
         * @return CreateBalanceAdjustmentRequestBuilder
         */
        public CreateBalanceAdjustmentRequestBuilder policyType(String policyType) {
            this.policyType = policyType;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this adjustment becomes effective. (optional)
         * @return CreateBalanceAdjustmentRequestBuilder
         */
        public CreateBalanceAdjustmentRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set amount
         * @param amount The amount of days/hours to add/subtract. (optional)
         * @return CreateBalanceAdjustmentRequestBuilder
         */
        public CreateBalanceAdjustmentRequestBuilder amount(Double amount) {
            this.amount = amount;
            return this;
        }
        
        /**
         * Set reason
         * @param reason A reason for this adjustment. (optional)
         * @return CreateBalanceAdjustmentRequestBuilder
         */
        public CreateBalanceAdjustmentRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Build call for createBalanceAdjustment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AdjustmentRequest body = buildBodyParams();
            return createBalanceAdjustmentCall(id, body, _callback);
        }

        private AdjustmentRequest buildBodyParams() {
            AdjustmentRequest body = new AdjustmentRequest();
            if (this.adjustmentType != null)
            body.adjustmentType(AdjustmentRequest.AdjustmentTypeEnum.fromValue(this.adjustmentType));
            body.policyType(this.policyType);
            body.effectiveDate(this.effectiveDate);
            body.amount(this.amount);
            body.reason(this.reason);
            return body;
        }

        /**
         * Execute createBalanceAdjustment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            AdjustmentRequest body = buildBodyParams();
            createBalanceAdjustmentWithHttpInfo(id, body);
        }

        /**
         * Execute createBalanceAdjustment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            AdjustmentRequest body = buildBodyParams();
            return createBalanceAdjustmentWithHttpInfo(id, body);
        }

        /**
         * Execute createBalanceAdjustment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            AdjustmentRequest body = buildBodyParams();
            return createBalanceAdjustmentAsync(id, body, _callback);
        }
    }

    /**
     * Create a balance adjustment.
     * Create a balance adjustment for a given employee for a given effective date.&lt;br /&gt;
     * @param id Employee ID. (required)
     * @param body  (required)
     * @return CreateBalanceAdjustmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public CreateBalanceAdjustmentRequestBuilder createBalanceAdjustment(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateBalanceAdjustmentRequestBuilder(id);
    }
    private okhttp3.Call getDetailsOfRequestCall(String id, Integer requestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/requests/{requestId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "requestId" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsOfRequestValidateBeforeCall(String id, Integer requestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDetailsOfRequest(Async)");
        }

        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling getDetailsOfRequest(Async)");
        }

        return getDetailsOfRequestCall(id, requestId, _callback);

    }


    private ApiResponse<TimeoffRequest> getDetailsOfRequestWithHttpInfo(String id, Integer requestId) throws ApiException {
        okhttp3.Call localVarCall = getDetailsOfRequestValidateBeforeCall(id, requestId, null);
        Type localVarReturnType = new TypeToken<TimeoffRequest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsOfRequestAsync(String id, Integer requestId, final ApiCallback<TimeoffRequest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsOfRequestValidateBeforeCall(id, requestId, _callback);
        Type localVarReturnType = new TypeToken<TimeoffRequest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsOfRequestRequestBuilder {
        private final String id;
        private final Integer requestId;

        private GetDetailsOfRequestRequestBuilder(String id, Integer requestId) {
            this.id = id;
            this.requestId = requestId;
        }

        /**
         * Build call for getDetailsOfRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A request with the specified ID is not found for the specified employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsOfRequestCall(id, requestId, _callback);
        }


        /**
         * Execute getDetailsOfRequest request
         * @return TimeoffRequest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A request with the specified ID is not found for the specified employee. </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffRequest execute() throws ApiException {
            ApiResponse<TimeoffRequest> localVarResp = getDetailsOfRequestWithHttpInfo(id, requestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetailsOfRequest request with HTTP info returned
         * @return ApiResponse&lt;TimeoffRequest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A request with the specified ID is not found for the specified employee. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffRequest> executeWithHttpInfo() throws ApiException {
            return getDetailsOfRequestWithHttpInfo(id, requestId);
        }

        /**
         * Execute getDetailsOfRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A request with the specified ID is not found for the specified employee. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffRequest> _callback) throws ApiException {
            return getDetailsOfRequestAsync(id, requestId, _callback);
        }
    }

    /**
     * Get the details of an existing timeoff request.
     * Supplies detailed info about an existing time off request.&lt;br /&gt;
     * @param id employee id (required)
     * @param requestId request id (required)
     * @return GetDetailsOfRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A request with the specified ID is not found for the specified employee. </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsOfRequestRequestBuilder getDetailsOfRequest(String id, Integer requestId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (requestId == null) throw new IllegalArgumentException("\"requestId\" is required but got null");
        return new GetDetailsOfRequestRequestBuilder(id, requestId);
    }
    private okhttp3.Call getEmployeeBalanceCall(String id, String policyType, LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/balance"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyType", policyType));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeBalanceValidateBeforeCall(String id, String policyType, LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEmployeeBalance(Async)");
        }

        // verify the required parameter 'policyType' is set
        if (policyType == null) {
            throw new ApiException("Missing the required parameter 'policyType' when calling getEmployeeBalance(Async)");
        }

        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getEmployeeBalance(Async)");
        }

        return getEmployeeBalanceCall(id, policyType, date, _callback);

    }


    private ApiResponse<BalanceResult> getEmployeeBalanceWithHttpInfo(String id, String policyType, LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getEmployeeBalanceValidateBeforeCall(id, policyType, date, null);
        Type localVarReturnType = new TypeToken<BalanceResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeBalanceAsync(String id, String policyType, LocalDate date, final ApiCallback<BalanceResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeBalanceValidateBeforeCall(id, policyType, date, _callback);
        Type localVarReturnType = new TypeToken<BalanceResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeBalanceRequestBuilder {
        private final String id;
        private final String policyType;
        private final LocalDate date;

        private GetEmployeeBalanceRequestBuilder(String id, String policyType, LocalDate date) {
            this.id = id;
            this.policyType = policyType;
            this.date = date;
        }

        /**
         * Build call for getEmployeeBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Balance result. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeBalanceCall(id, policyType, date, _callback);
        }


        /**
         * Execute getEmployeeBalance request
         * @return BalanceResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Balance result. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public BalanceResult execute() throws ApiException {
            ApiResponse<BalanceResult> localVarResp = getEmployeeBalanceWithHttpInfo(id, policyType, date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeBalance request with HTTP info returned
         * @return ApiResponse&lt;BalanceResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Balance result. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BalanceResult> executeWithHttpInfo() throws ApiException {
            return getEmployeeBalanceWithHttpInfo(id, policyType, date);
        }

        /**
         * Execute getEmployeeBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Balance result. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BalanceResult> _callback) throws ApiException {
            return getEmployeeBalanceAsync(id, policyType, date, _callback);
        }
    }

    /**
     * Get the balance for a given employee
     * Retrieve the balance for a given employee, for a given policy type, as of a given date.&lt;br /&gt;
     * @param id Employee ID. (required)
     * @param policyType Policy type name. (required)
     * @param date Point in time. (required)
     * @return GetEmployeeBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Balance result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeBalanceRequestBuilder getEmployeeBalance(String id, String policyType, LocalDate date) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetEmployeeBalanceRequestBuilder(id, policyType, date);
    }
    private okhttp3.Call getNewDeletedRequestsSinceDateCall(LocalDate since, Boolean includePending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/requests/changes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (includePending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePending", includePending));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNewDeletedRequestsSinceDateValidateBeforeCall(LocalDate since, Boolean includePending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'since' is set
        if (since == null) {
            throw new ApiException("Missing the required parameter 'since' when calling getNewDeletedRequestsSinceDate(Async)");
        }

        return getNewDeletedRequestsSinceDateCall(since, includePending, _callback);

    }


    private ApiResponse<TimeoffChanges> getNewDeletedRequestsSinceDateWithHttpInfo(LocalDate since, Boolean includePending) throws ApiException {
        okhttp3.Call localVarCall = getNewDeletedRequestsSinceDateValidateBeforeCall(since, includePending, null);
        Type localVarReturnType = new TypeToken<TimeoffChanges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNewDeletedRequestsSinceDateAsync(LocalDate since, Boolean includePending, final ApiCallback<TimeoffChanges> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNewDeletedRequestsSinceDateValidateBeforeCall(since, includePending, _callback);
        Type localVarReturnType = new TypeToken<TimeoffChanges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNewDeletedRequestsSinceDateRequestBuilder {
        private final LocalDate since;
        private Boolean includePending;

        private GetNewDeletedRequestsSinceDateRequestBuilder(LocalDate since) {
            this.since = since;
        }

        /**
         * Set includePending
         * @param includePending Optional parameter. Indicates whether to include pending requests in the results. (optional, default to false)
         * @return GetNewDeletedRequestsSinceDateRequestBuilder
         */
        public GetNewDeletedRequestsSinceDateRequestBuilder includePending(Boolean includePending) {
            this.includePending = includePending;
            return this;
        }
        
        /**
         * Build call for getNewDeletedRequestsSinceDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of changes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNewDeletedRequestsSinceDateCall(since, includePending, _callback);
        }


        /**
         * Execute getNewDeletedRequestsSinceDate request
         * @return TimeoffChanges
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of changes </td><td>  -  </td></tr>
         </table>
         */
        public TimeoffChanges execute() throws ApiException {
            ApiResponse<TimeoffChanges> localVarResp = getNewDeletedRequestsSinceDateWithHttpInfo(since, includePending);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNewDeletedRequestsSinceDate request with HTTP info returned
         * @return ApiResponse&lt;TimeoffChanges&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of changes </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeoffChanges> executeWithHttpInfo() throws ApiException {
            return getNewDeletedRequestsSinceDateWithHttpInfo(since, includePending);
        }

        /**
         * Execute getNewDeletedRequestsSinceDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of changes </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeoffChanges> _callback) throws ApiException {
            return getNewDeletedRequestsSinceDateAsync(since, includePending, _callback);
        }
    }

    /**
     * Get all new/deleted time off requests since the specified date.
     * Returns the list of time off requests that are pending, approved or canceled since the specified date.&lt;br /&gt;
     * @param since Timestamp starting from which to return the changes. Should be in ISO-8601 format, e.g. 2050-04-05T14:30:24.345Z or 2050-04-05T12:30-02:00. (required)
     * @return GetNewDeletedRequestsSinceDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of changes </td><td>  -  </td></tr>
     </table>
     */
    public GetNewDeletedRequestsSinceDateRequestBuilder getNewDeletedRequestsSinceDate(LocalDate since) throws IllegalArgumentException {
        if (since == null) throw new IllegalArgumentException("\"since\" is required but got null");
        return new GetNewDeletedRequestsSinceDateRequestBuilder(since);
    }
    private okhttp3.Call getOutOfOfficeCall(LocalDate today, Boolean includeHourly, Boolean includePrivate, Integer siteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/outtoday";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (today != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("today", today));
        }

        if (includeHourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHourly", includeHourly));
        }

        if (includePrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePrivate", includePrivate));
        }

        if (siteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("siteId", siteId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutOfOfficeValidateBeforeCall(LocalDate today, Boolean includeHourly, Boolean includePrivate, Integer siteId, final ApiCallback _callback) throws ApiException {
        return getOutOfOfficeCall(today, includeHourly, includePrivate, siteId, _callback);

    }


    private ApiResponse<OutTodays> getOutOfOfficeWithHttpInfo(LocalDate today, Boolean includeHourly, Boolean includePrivate, Integer siteId) throws ApiException {
        okhttp3.Call localVarCall = getOutOfOfficeValidateBeforeCall(today, includeHourly, includePrivate, siteId, null);
        Type localVarReturnType = new TypeToken<OutTodays>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutOfOfficeAsync(LocalDate today, Boolean includeHourly, Boolean includePrivate, Integer siteId, final ApiCallback<OutTodays> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutOfOfficeValidateBeforeCall(today, includeHourly, includePrivate, siteId, _callback);
        Type localVarReturnType = new TypeToken<OutTodays>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOutOfOfficeRequestBuilder {
        private LocalDate today;
        private Boolean includeHourly;
        private Boolean includePrivate;
        private Integer siteId;

        private GetOutOfOfficeRequestBuilder() {
        }

        /**
         * Set today
         * @param today Date to report out of the office. If not specified, the date at UTC at the time of the request is used. (optional)
         * @return GetOutOfOfficeRequestBuilder
         */
        public GetOutOfOfficeRequestBuilder today(LocalDate today) {
            this.today = today;
            return this;
        }
        
        /**
         * Set includeHourly
         * @param includeHourly Include Hourly Requests (optional, default to false)
         * @return GetOutOfOfficeRequestBuilder
         */
        public GetOutOfOfficeRequestBuilder includeHourly(Boolean includeHourly) {
            this.includeHourly = includeHourly;
            return this;
        }
        
        /**
         * Set includePrivate
         * @param includePrivate Show the policy type&#39;s name instead of the policy&#39;s custom public name if the user has permission to view it, and the policy&#39;s custom public name exists. (optional, default to false)
         * @return GetOutOfOfficeRequestBuilder
         */
        public GetOutOfOfficeRequestBuilder includePrivate(Boolean includePrivate) {
            this.includePrivate = includePrivate;
            return this;
        }
        
        /**
         * Set siteId
         * @param siteId The employee&#39;s site ID (optional)
         * @return GetOutOfOfficeRequestBuilder
         */
        public GetOutOfOfficeRequestBuilder siteId(Integer siteId) {
            this.siteId = siteId;
            return this;
        }
        
        /**
         * Build call for getOutOfOffice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of people who have taken time off, as seen by the logged in user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutOfOfficeCall(today, includeHourly, includePrivate, siteId, _callback);
        }


        /**
         * Execute getOutOfOffice request
         * @return OutTodays
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of people who have taken time off, as seen by the logged in user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public OutTodays execute() throws ApiException {
            ApiResponse<OutTodays> localVarResp = getOutOfOfficeWithHttpInfo(today, includeHourly, includePrivate, siteId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOutOfOffice request with HTTP info returned
         * @return ApiResponse&lt;OutTodays&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of people who have taken time off, as seen by the logged in user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OutTodays> executeWithHttpInfo() throws ApiException {
            return getOutOfOfficeWithHttpInfo(today, includeHourly, includePrivate, siteId);
        }

        /**
         * Execute getOutOfOffice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The list of people who have taken time off, as seen by the logged in user. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OutTodays> _callback) throws ApiException {
            return getOutOfOfficeAsync(today, includeHourly, includePrivate, siteId, _callback);
        }
    }

    /**
     * Read a list of who&#39;s out of the office today or on the specified date.
     * Returns the list of people that have a time off request today or on the specified date.&lt;br /&gt;
     * @return GetOutOfOfficeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of people who have taken time off, as seen by the logged in user. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetOutOfOfficeRequestBuilder getOutOfOffice() throws IllegalArgumentException {
        return new GetOutOfOfficeRequestBuilder();
    }
    private okhttp3.Call getPolicyDetailsCall(String policyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/policy-types/{policyType}"
            .replace("{" + "policyType" + "}", localVarApiClient.escapeString(policyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyDetailsValidateBeforeCall(String policyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyType' is set
        if (policyType == null) {
            throw new ApiException("Missing the required parameter 'policyType' when calling getPolicyDetails(Async)");
        }

        return getPolicyDetailsCall(policyType, _callback);

    }


    private ApiResponse<PolicyType> getPolicyDetailsWithHttpInfo(String policyType) throws ApiException {
        okhttp3.Call localVarCall = getPolicyDetailsValidateBeforeCall(policyType, null);
        Type localVarReturnType = new TypeToken<PolicyType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyDetailsAsync(String policyType, final ApiCallback<PolicyType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyDetailsValidateBeforeCall(policyType, _callback);
        Type localVarReturnType = new TypeToken<PolicyType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyDetailsRequestBuilder {
        private final String policyType;

        private GetPolicyDetailsRequestBuilder(String policyType) {
            this.policyType = policyType;
        }

        /**
         * Build call for getPolicyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy type </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyDetailsCall(policyType, _callback);
        }


        /**
         * Execute getPolicyDetails request
         * @return PolicyType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy type </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public PolicyType execute() throws ApiException {
            ApiResponse<PolicyType> localVarResp = getPolicyDetailsWithHttpInfo(policyType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyDetails request with HTTP info returned
         * @return ApiResponse&lt;PolicyType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy type </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyType> executeWithHttpInfo() throws ApiException {
            return getPolicyDetailsWithHttpInfo(policyType);
        }

        /**
         * Execute getPolicyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy type </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyType> _callback) throws ApiException {
            return getPolicyDetailsAsync(policyType, _callback);
        }
    }

    /**
     * Get Policy type details
     * Get details about a given policy type.&lt;br /&gt;
     * @param policyType Policy Type name (required)
     * @return GetPolicyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy type </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyDetailsRequestBuilder getPolicyDetails(String policyType) throws IllegalArgumentException {
        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        return new GetPolicyDetailsRequestBuilder(policyType);
    }
    private okhttp3.Call getPolicyDetails_0Call(String policyName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyName", policyName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPolicyDetails_0ValidateBeforeCall(String policyName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyName' is set
        if (policyName == null) {
            throw new ApiException("Missing the required parameter 'policyName' when calling getPolicyDetails_0(Async)");
        }

        return getPolicyDetails_0Call(policyName, _callback);

    }


    private ApiResponse<Policy> getPolicyDetails_0WithHttpInfo(String policyName) throws ApiException {
        okhttp3.Call localVarCall = getPolicyDetails_0ValidateBeforeCall(policyName, null);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPolicyDetails_0Async(String policyName, final ApiCallback<Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPolicyDetails_0ValidateBeforeCall(policyName, _callback);
        Type localVarReturnType = new TypeToken<Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPolicyDetails0RequestBuilder {
        private final String policyName;

        private GetPolicyDetails0RequestBuilder(String policyName) {
            this.policyName = policyName;
        }

        /**
         * Build call for getPolicyDetails_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPolicyDetails_0Call(policyName, _callback);
        }


        /**
         * Execute getPolicyDetails_0 request
         * @return Policy
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public Policy execute() throws ApiException {
            ApiResponse<Policy> localVarResp = getPolicyDetails_0WithHttpInfo(policyName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPolicyDetails_0 request with HTTP info returned
         * @return ApiResponse&lt;Policy&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Policy> executeWithHttpInfo() throws ApiException {
            return getPolicyDetails_0WithHttpInfo(policyName);
        }

        /**
         * Execute getPolicyDetails_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Policy </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Policy> _callback) throws ApiException {
            return getPolicyDetails_0Async(policyName, _callback);
        }
    }

    /**
     * Get Policy details.
     * Get details about a given policy.&lt;br /&gt;
     * @param policyName Policy name. (required)
     * @return GetPolicyDetails0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Policy </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A policy with the specified name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public GetPolicyDetails0RequestBuilder getPolicyDetails_0(String policyName) throws IllegalArgumentException {
        if (policyName == null) throw new IllegalArgumentException("\"policyName\" is required but got null");
            

        return new GetPolicyDetails0RequestBuilder(policyName);
    }
    private okhttp3.Call getWhosOutCall(LocalDate from, LocalDate to, Boolean includeHourly, Boolean includePrivate, Boolean includePending, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/whosout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (includeHourly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeHourly", includeHourly));
        }

        if (includePrivate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePrivate", includePrivate));
        }

        if (includePending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePending", includePending));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWhosOutValidateBeforeCall(LocalDate from, LocalDate to, Boolean includeHourly, Boolean includePrivate, Boolean includePending, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getWhosOut(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getWhosOut(Async)");
        }

        return getWhosOutCall(from, to, includeHourly, includePrivate, includePending, _callback);

    }


    private ApiResponse<Requests> getWhosOutWithHttpInfo(LocalDate from, LocalDate to, Boolean includeHourly, Boolean includePrivate, Boolean includePending) throws ApiException {
        okhttp3.Call localVarCall = getWhosOutValidateBeforeCall(from, to, includeHourly, includePrivate, includePending, null);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWhosOutAsync(LocalDate from, LocalDate to, Boolean includeHourly, Boolean includePrivate, Boolean includePending, final ApiCallback<Requests> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWhosOutValidateBeforeCall(from, to, includeHourly, includePrivate, includePending, _callback);
        Type localVarReturnType = new TypeToken<Requests>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWhosOutRequestBuilder {
        private final LocalDate from;
        private final LocalDate to;
        private Boolean includeHourly;
        private Boolean includePrivate;
        private Boolean includePending;

        private GetWhosOutRequestBuilder(LocalDate from, LocalDate to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set includeHourly
         * @param includeHourly Include Hourly Requests (optional, default to false)
         * @return GetWhosOutRequestBuilder
         */
        public GetWhosOutRequestBuilder includeHourly(Boolean includeHourly) {
            this.includeHourly = includeHourly;
            return this;
        }
        
        /**
         * Set includePrivate
         * @param includePrivate Show the policy type&#39;s name instead of the policy&#39;s custom public name if the user has permission to view it, and the policy&#39;s custom public name exists. (optional, default to false)
         * @return GetWhosOutRequestBuilder
         */
        public GetWhosOutRequestBuilder includePrivate(Boolean includePrivate) {
            this.includePrivate = includePrivate;
            return this;
        }
        
        /**
         * Set includePending
         * @param includePending Include Pending Requests (optional, default to false)
         * @return GetWhosOutRequestBuilder
         */
        public GetWhosOutRequestBuilder includePending(Boolean includePending) {
            this.includePending = includePending;
            return this;
        }
        
        /**
         * Build call for getWhosOut
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off requests as seen by the logged in user for a given date range. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWhosOutCall(from, to, includeHourly, includePrivate, includePending, _callback);
        }


        /**
         * Execute getWhosOut request
         * @return Requests
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off requests as seen by the logged in user for a given date range. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Requests execute() throws ApiException {
            ApiResponse<Requests> localVarResp = getWhosOutWithHttpInfo(from, to, includeHourly, includePrivate, includePending);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWhosOut request with HTTP info returned
         * @return ApiResponse&lt;Requests&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off requests as seen by the logged in user for a given date range. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Requests> executeWithHttpInfo() throws ApiException {
            return getWhosOutWithHttpInfo(from, to, includeHourly, includePrivate, includePending);
        }

        /**
         * Execute getWhosOut request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Time off requests as seen by the logged in user for a given date range. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Requests> _callback) throws ApiException {
            return getWhosOutAsync(from, to, includeHourly, includePrivate, includePending, _callback);
        }
    }

    /**
     * Read a list of who&#39;s out of the office.
     * Returns time off information for a given date range.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service.
     * @param from Start period date (required)
     * @param to End period date (required)
     * @return GetWhosOutRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Time off requests as seen by the logged in user for a given date range. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public GetWhosOutRequestBuilder getWhosOut(LocalDate from, LocalDate to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetWhosOutRequestBuilder(from, to);
    }
    private okhttp3.Call listPolicyTypeNamesCall(String policyTypeName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/policies/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyTypeName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("policyTypeName", policyTypeName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyTypeNamesValidateBeforeCall(String policyTypeName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyTypeName' is set
        if (policyTypeName == null) {
            throw new ApiException("Missing the required parameter 'policyTypeName' when calling listPolicyTypeNames(Async)");
        }

        return listPolicyTypeNamesCall(policyTypeName, _callback);

    }


    private ApiResponse<PolicyNames> listPolicyTypeNamesWithHttpInfo(String policyTypeName) throws ApiException {
        okhttp3.Call localVarCall = listPolicyTypeNamesValidateBeforeCall(policyTypeName, null);
        Type localVarReturnType = new TypeToken<PolicyNames>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPolicyTypeNamesAsync(String policyTypeName, final ApiCallback<PolicyNames> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPolicyTypeNamesValidateBeforeCall(policyTypeName, _callback);
        Type localVarReturnType = new TypeToken<PolicyNames>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPolicyTypeNamesRequestBuilder {
        private final String policyTypeName;

        private ListPolicyTypeNamesRequestBuilder(String policyTypeName) {
            this.policyTypeName = policyTypeName;
        }

        /**
         * Build call for listPolicyTypeNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of policy names. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPolicyTypeNamesCall(policyTypeName, _callback);
        }


        /**
         * Execute listPolicyTypeNames request
         * @return PolicyNames
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of policy names. </td><td>  -  </td></tr>
         </table>
         */
        public PolicyNames execute() throws ApiException {
            ApiResponse<PolicyNames> localVarResp = listPolicyTypeNamesWithHttpInfo(policyTypeName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPolicyTypeNames request with HTTP info returned
         * @return ApiResponse&lt;PolicyNames&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of policy names. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyNames> executeWithHttpInfo() throws ApiException {
            return listPolicyTypeNamesWithHttpInfo(policyTypeName);
        }

        /**
         * Execute listPolicyTypeNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> A list of policy names. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyNames> _callback) throws ApiException {
            return listPolicyTypeNamesAsync(policyTypeName, _callback);
        }
    }

    /**
     * Get a list of policy names for a given policy type.
     * Get a list of policy names for the user&#39;s defined policy type.&lt;br /&gt;
     * @param policyTypeName Policy type name. (required)
     * @return ListPolicyTypeNamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of policy names. </td><td>  -  </td></tr>
     </table>
     */
    public ListPolicyTypeNamesRequestBuilder listPolicyTypeNames(String policyTypeName) throws IllegalArgumentException {
        if (policyTypeName == null) throw new IllegalArgumentException("\"policyTypeName\" is required but got null");
            

        return new ListPolicyTypeNamesRequestBuilder(policyTypeName);
    }
    private okhttp3.Call listPolicyTypesNamesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/policy-types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPolicyTypesNamesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listPolicyTypesNamesCall(_callback);

    }


    private ApiResponse<PolicyTypes> listPolicyTypesNamesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listPolicyTypesNamesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PolicyTypes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPolicyTypesNamesAsync(final ApiCallback<PolicyTypes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPolicyTypesNamesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PolicyTypes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPolicyTypesNamesRequestBuilder {

        private ListPolicyTypesNamesRequestBuilder() {
        }

        /**
         * Build call for listPolicyTypesNames
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of policy types names. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPolicyTypesNamesCall(_callback);
        }


        /**
         * Execute listPolicyTypesNames request
         * @return PolicyTypes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of policy types names. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public PolicyTypes execute() throws ApiException {
            ApiResponse<PolicyTypes> localVarResp = listPolicyTypesNamesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPolicyTypesNames request with HTTP info returned
         * @return ApiResponse&lt;PolicyTypes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of policy types names. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PolicyTypes> executeWithHttpInfo() throws ApiException {
            return listPolicyTypesNamesWithHttpInfo();
        }

        /**
         * Execute listPolicyTypesNames request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of policy types names. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PolicyTypes> _callback) throws ApiException {
            return listPolicyTypesNamesAsync(_callback);
        }
    }

    /**
     * Get all policy types names.
     * Get a list of all policy type names.&lt;br /&gt;
     * @return ListPolicyTypesNamesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of policy types names. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error. </td><td>  -  </td></tr>
     </table>
     */
    public ListPolicyTypesNamesRequestBuilder listPolicyTypesNames() throws IllegalArgumentException {
        return new ListPolicyTypesNamesRequestBuilder();
    }
    private okhttp3.Call listReasonCodesCall(String policyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/timeoff/policy-types/{policyType}/reason-codes"
            .replace("{" + "policyType" + "}", localVarApiClient.escapeString(policyType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listReasonCodesValidateBeforeCall(String policyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyType' is set
        if (policyType == null) {
            throw new ApiException("Missing the required parameter 'policyType' when calling listReasonCodes(Async)");
        }

        return listReasonCodesCall(policyType, _callback);

    }


    private ApiResponse<ReasonCodes> listReasonCodesWithHttpInfo(String policyType) throws ApiException {
        okhttp3.Call localVarCall = listReasonCodesValidateBeforeCall(policyType, null);
        Type localVarReturnType = new TypeToken<ReasonCodes>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listReasonCodesAsync(String policyType, final ApiCallback<ReasonCodes> _callback) throws ApiException {

        okhttp3.Call localVarCall = listReasonCodesValidateBeforeCall(policyType, _callback);
        Type localVarReturnType = new TypeToken<ReasonCodes>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListReasonCodesRequestBuilder {
        private final String policyType;

        private ListReasonCodesRequestBuilder(String policyType) {
            this.policyType = policyType;
        }

        /**
         * Build call for listReasonCodes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of reason codes. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listReasonCodesCall(policyType, _callback);
        }


        /**
         * Execute listReasonCodes request
         * @return ReasonCodes
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of reason codes. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ReasonCodes execute() throws ApiException {
            ApiResponse<ReasonCodes> localVarResp = listReasonCodesWithHttpInfo(policyType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listReasonCodes request with HTTP info returned
         * @return ApiResponse&lt;ReasonCodes&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of reason codes. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReasonCodes> executeWithHttpInfo() throws ApiException {
            return listReasonCodesWithHttpInfo(policyType);
        }

        /**
         * Execute listReasonCodes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of reason codes. </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReasonCodes> _callback) throws ApiException {
            return listReasonCodesAsync(policyType, _callback);
        }
    }

    /**
     * Get Policy type reason codes
     * Get list of reason codes for a given policy type.&lt;br /&gt;
     * @param policyType Policy Type name. (required)
     * @return ListReasonCodesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of reason codes. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> A policy type with the specified name was not found. </td><td>  -  </td></tr>
     </table>
     */
    public ListReasonCodesRequestBuilder listReasonCodes(String policyType) throws IllegalArgumentException {
        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        return new ListReasonCodesRequestBuilder(policyType);
    }
    private okhttp3.Call submitNewRequestCall(String id, SubmitTimeoffRequest body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitNewRequestValidateBeforeCall(String id, SubmitTimeoffRequest body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling submitNewRequest(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitNewRequest(Async)");
        }

        return submitNewRequestCall(id, body, _callback);

    }


    private ApiResponse<Void> submitNewRequestWithHttpInfo(String id, SubmitTimeoffRequest body) throws ApiException {
        okhttp3.Call localVarCall = submitNewRequestValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitNewRequestAsync(String id, SubmitTimeoffRequest body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitNewRequestValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitNewRequestRequestBuilder {
        private final String policyType;
        private final LocalDate startDate;
        private final String id;
        private String description;
        private String requestRangeType;
        private String startDatePortion;
        private LocalDate endDate;
        private Integer hours;
        private Integer minutes;
        private String endDatePortion;
        private String dayPortion;
        private Integer dailyHours;
        private Integer dailyMinutes;
        private Boolean skipManagerApproval;
        private String approver;
        private Integer reasonCode;

        private SubmitNewRequestRequestBuilder(String policyType, LocalDate startDate, String id) {
            this.policyType = policyType;
            this.startDate = startDate;
            this.id = id;
        }

        /**
         * Set description
         * @param description Request reason. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set requestRangeType
         * @param requestRangeType The type of request duration.&lt;br&gt; Select &lt;b&gt;hours&lt;/b&gt; when the request is for X hours during the day requested (This is supported only for policy types measured in hours).&lt;br&gt; Select &lt;b&gt;portionOnRange&lt;/b&gt; when the  request is for every morning or every afternoon during the days requested.&lt;br&gt; Select &lt;b&gt;hoursOnRange&lt;/b&gt; when the request is for X hours every day during the days requested (This is supported only for policy types measured in hours) (optional, default to days)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder requestRangeType(String requestRangeType) {
            this.requestRangeType = requestRangeType;
            return this;
        }
        
        /**
         * Set startDatePortion
         * @param startDatePortion Portion of the first day - relevant for requests in days. (optional, default to all_day)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder startDatePortion(String startDatePortion) {
            this.startDatePortion = startDatePortion;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate Date of the last day of the time off (not relevant for requests using                                                the hours type). (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set hours
         * @param hours This field is mandatory if the requestRangeType is set to &#39;hours&#39;. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder hours(Integer hours) {
            this.hours = hours;
            return this;
        }
        
        /**
         * Set minutes
         * @param minutes Relevant if requestRangeType is set to &#39;hours&#39;. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder minutes(Integer minutes) {
            this.minutes = minutes;
            return this;
        }
        
        /**
         * Set endDatePortion
         * @param endDatePortion Portion of the last day - relevant for requests in days. (optional, default to all_day)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder endDatePortion(String endDatePortion) {
            this.endDatePortion = endDatePortion;
            return this;
        }
        
        /**
         * Set dayPortion
         * @param dayPortion Select &lt;b&gt;morning&lt;/b&gt; when the request is for mornings on the days requested. Select &lt;b&gt;afternoon&lt;/b&gt; when the request is for afternoons on the days requested.&lt;br&gt; This is mandatory if the &lt;b&gt;requestRangeType&lt;/b&gt; is &lt;b&gt;portionOnRange&lt;/b&gt;. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder dayPortion(String dayPortion) {
            this.dayPortion = dayPortion;
            return this;
        }
        
        /**
         * Set dailyHours
         * @param dailyHours Enter the number of hours when the request is for X hours on the days requested.&lt;br&gt; This is mandatory if the &lt;b&gt;requestRangeType&lt;/b&gt; is &lt;b&gt;hoursOnRange&lt;/b&gt;. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder dailyHours(Integer dailyHours) {
            this.dailyHours = dailyHours;
            return this;
        }
        
        /**
         * Set dailyMinutes
         * @param dailyMinutes Enter the number of minutes when the request is for X hours and X minutes on the days requested.&lt;br&gt; This is relevant if the &lt;b&gt;requestRangeType&lt;/b&gt; is &lt;b&gt;hoursOnRange&lt;/b&gt; and the amount requested is not a full hour or hours. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder dailyMinutes(Integer dailyMinutes) {
            this.dailyMinutes = dailyMinutes;
            return this;
        }
        
        /**
         * Set skipManagerApproval
         * @param skipManagerApproval Admins only can skip the approval policy. Setting this field to true will create an approved request. (optional, default to false)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder skipManagerApproval(Boolean skipManagerApproval) {
            this.skipManagerApproval = skipManagerApproval;
            return this;
        }
        
        /**
         * Set approver
         * @param approver The employee ID of the user to be set as the approver for this request. This is relevant if &#39;skipManagerApproval&#39; is set to true.&lt;br&gt;Please note that the user calling the API with this param must have permission to import time off requests. (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder approver(String approver) {
            this.approver = approver;
            return this;
        }
        
        /**
         * Set reasonCode
         * @param reasonCode The reason code ID taken from the policy type&#39;s reason codes list. The list is available in GET /timeoff/policy-types/{policyType}/reason-codes (optional)
         * @return SubmitNewRequestRequestBuilder
         */
        public SubmitNewRequestRequestBuilder reasonCode(Integer reasonCode) {
            this.reasonCode = reasonCode;
            return this;
        }
        
        /**
         * Build call for submitNewRequest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubmitTimeoffRequest body = buildBodyParams();
            return submitNewRequestCall(id, body, _callback);
        }

        private SubmitTimeoffRequest buildBodyParams() {
            SubmitTimeoffRequest body = new SubmitTimeoffRequest();
            body.description(this.description);
            body.policyType(this.policyType);
            if (this.requestRangeType != null)
            body.requestRangeType(SubmitTimeoffRequest.RequestRangeTypeEnum.fromValue(this.requestRangeType));
            body.startDate(this.startDate);
            if (this.startDatePortion != null)
            body.startDatePortion(SubmitTimeoffRequest.StartDatePortionEnum.fromValue(this.startDatePortion));
            body.endDate(this.endDate);
            body.hours(this.hours);
            body.minutes(this.minutes);
            if (this.endDatePortion != null)
            body.endDatePortion(SubmitTimeoffRequest.EndDatePortionEnum.fromValue(this.endDatePortion));
            if (this.dayPortion != null)
            body.dayPortion(SubmitTimeoffRequest.DayPortionEnum.fromValue(this.dayPortion));
            body.dailyHours(this.dailyHours);
            body.dailyMinutes(this.dailyMinutes);
            body.skipManagerApproval(this.skipManagerApproval);
            body.approver(this.approver);
            body.reasonCode(this.reasonCode);
            return body;
        }

        /**
         * Execute submitNewRequest request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubmitTimeoffRequest body = buildBodyParams();
            submitNewRequestWithHttpInfo(id, body);
        }

        /**
         * Execute submitNewRequest request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubmitTimeoffRequest body = buildBodyParams();
            return submitNewRequestWithHttpInfo(id, body);
        }

        /**
         * Execute submitNewRequest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubmitTimeoffRequest body = buildBodyParams();
            return submitNewRequestAsync(id, body, _callback);
        }
    }

    /**
     * Submit a new time off request.
     * Submits a new timeoff request.&lt;br /&gt;
     * @param id Employee ID. (required)
     * @param body  (required)
     * @return SubmitNewRequestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public SubmitNewRequestRequestBuilder submitNewRequest(String policyType, LocalDate startDate, String id) throws IllegalArgumentException {
        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SubmitNewRequestRequestBuilder(policyType, startDate, id);
    }
    private okhttp3.Call submitNewRequestDiffHoursCall(String id, SubmitTimeoffRequestDiffHours body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/timeoff/employees/{id}/diffHours/requests"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitNewRequestDiffHoursValidateBeforeCall(String id, SubmitTimeoffRequestDiffHours body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling submitNewRequestDiffHours(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling submitNewRequestDiffHours(Async)");
        }

        return submitNewRequestDiffHoursCall(id, body, _callback);

    }


    private ApiResponse<Void> submitNewRequestDiffHoursWithHttpInfo(String id, SubmitTimeoffRequestDiffHours body) throws ApiException {
        okhttp3.Call localVarCall = submitNewRequestDiffHoursValidateBeforeCall(id, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call submitNewRequestDiffHoursAsync(String id, SubmitTimeoffRequestDiffHours body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitNewRequestDiffHoursValidateBeforeCall(id, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class SubmitNewRequestDiffHoursRequestBuilder {
        private final String policyType;
        private final LocalDate startDate;
        private final LocalDate endDate;
        private final List<SubmitTimeoffRequestDiffHoursDurationsInner> durations;
        private final String id;
        private String description;
        private Boolean skipManagerApproval;
        private String approver;
        private Integer reasonCode;

        private SubmitNewRequestDiffHoursRequestBuilder(String policyType, LocalDate startDate, LocalDate endDate, List<SubmitTimeoffRequestDiffHoursDurationsInner> durations, String id) {
            this.policyType = policyType;
            this.startDate = startDate;
            this.endDate = endDate;
            this.durations = durations;
            this.id = id;
        }

        /**
         * Set description
         * @param description Request reason. (optional)
         * @return SubmitNewRequestDiffHoursRequestBuilder
         */
        public SubmitNewRequestDiffHoursRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set skipManagerApproval
         * @param skipManagerApproval Admins only can skip the approval policy. Setting this field to true will create an approved request. (optional, default to false)
         * @return SubmitNewRequestDiffHoursRequestBuilder
         */
        public SubmitNewRequestDiffHoursRequestBuilder skipManagerApproval(Boolean skipManagerApproval) {
            this.skipManagerApproval = skipManagerApproval;
            return this;
        }
        
        /**
         * Set approver
         * @param approver The employee ID of the user to be set as the approver for this request. This is relevant if &#39;skipManagerApproval&#39; is set to true.&lt;br&gt;Please note that the user calling the API with this param must have permission to import time off requests. (optional)
         * @return SubmitNewRequestDiffHoursRequestBuilder
         */
        public SubmitNewRequestDiffHoursRequestBuilder approver(String approver) {
            this.approver = approver;
            return this;
        }
        
        /**
         * Set reasonCode
         * @param reasonCode The reason code ID taken from the policy type&#39;s reason codes list. The list is available in GET /timeoff/policy-types/{policyType}/reason-codes (optional)
         * @return SubmitNewRequestDiffHoursRequestBuilder
         */
        public SubmitNewRequestDiffHoursRequestBuilder reasonCode(Integer reasonCode) {
            this.reasonCode = reasonCode;
            return this;
        }
        
        /**
         * Build call for submitNewRequestDiffHours
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SubmitTimeoffRequestDiffHours body = buildBodyParams();
            return submitNewRequestDiffHoursCall(id, body, _callback);
        }

        private SubmitTimeoffRequestDiffHours buildBodyParams() {
            SubmitTimeoffRequestDiffHours body = new SubmitTimeoffRequestDiffHours();
            body.description(this.description);
            body.policyType(this.policyType);
            body.startDate(this.startDate);
            body.endDate(this.endDate);
            body.durations(this.durations);
            body.skipManagerApproval(this.skipManagerApproval);
            body.approver(this.approver);
            body.reasonCode(this.reasonCode);
            return body;
        }

        /**
         * Execute submitNewRequestDiffHours request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SubmitTimeoffRequestDiffHours body = buildBodyParams();
            submitNewRequestDiffHoursWithHttpInfo(id, body);
        }

        /**
         * Execute submitNewRequestDiffHours request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SubmitTimeoffRequestDiffHours body = buildBodyParams();
            return submitNewRequestDiffHoursWithHttpInfo(id, body);
        }

        /**
         * Execute submitNewRequestDiffHours request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SubmitTimeoffRequestDiffHours body = buildBodyParams();
            return submitNewRequestDiffHoursAsync(id, body, _callback);
        }
    }

    /**
     * Submit a new time off request of different hours per day.
     * Submits a new timeoff request of different hours per day.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Employee, Service.
     * @param id Employee ID. (required)
     * @param body  (required)
     * @return SubmitNewRequestDiffHoursRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully submitted </td><td>  -  </td></tr>
     </table>
     */
    public SubmitNewRequestDiffHoursRequestBuilder submitNewRequestDiffHours(String policyType, LocalDate startDate, LocalDate endDate, List<SubmitTimeoffRequestDiffHoursDurationsInner> durations, String id) throws IllegalArgumentException {
        if (policyType == null) throw new IllegalArgumentException("\"policyType\" is required but got null");
            

        if (startDate == null) throw new IllegalArgumentException("\"startDate\" is required but got null");
        if (endDate == null) throw new IllegalArgumentException("\"endDate\" is required but got null");
        if (durations == null) throw new IllegalArgumentException("\"durations\" is required but got null");
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new SubmitNewRequestDiffHoursRequestBuilder(policyType, startDate, endDate, durations, id);
    }
}
