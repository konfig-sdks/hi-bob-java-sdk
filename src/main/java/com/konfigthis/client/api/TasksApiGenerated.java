/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.Tasks;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TasksApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TasksApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TasksApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call completeTaskCall(String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/{taskId}/complete"
            .replace("{" + "taskId" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call completeTaskValidateBeforeCall(String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling completeTask(Async)");
        }

        return completeTaskCall(taskId, _callback);

    }


    private ApiResponse<Tasks> completeTaskWithHttpInfo(String taskId) throws ApiException {
        okhttp3.Call localVarCall = completeTaskValidateBeforeCall(taskId, null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call completeTaskAsync(String taskId, final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = completeTaskValidateBeforeCall(taskId, _callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CompleteTaskRequestBuilder {
        private final String taskId;

        private CompleteTaskRequestBuilder(String taskId) {
            this.taskId = taskId;
        }

        /**
         * Build call for completeTask
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Marks a task as complete. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return completeTaskCall(taskId, _callback);
        }


        /**
         * Execute completeTask request
         * @return Tasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Marks a task as complete. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Tasks execute() throws ApiException {
            ApiResponse<Tasks> localVarResp = completeTaskWithHttpInfo(taskId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute completeTask request with HTTP info returned
         * @return ApiResponse&lt;Tasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Marks a task as complete. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tasks> executeWithHttpInfo() throws ApiException {
            return completeTaskWithHttpInfo(taskId);
        }

        /**
         * Execute completeTask request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Marks a task as complete. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tasks> _callback) throws ApiException {
            return completeTaskAsync(taskId, _callback);
        }
    }

    /**
     * Mark a task as complete
     * 
     * @param taskId task id (required)
     * @return CompleteTaskRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Marks a task as complete. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public CompleteTaskRequestBuilder completeTask(String taskId) throws IllegalArgumentException {
        if (taskId == null) throw new IllegalArgumentException("\"taskId\" is required but got null");
            

        return new CompleteTaskRequestBuilder(taskId);
    }
    private okhttp3.Call getEmployeeTasksCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/my/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmployeeTasksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEmployeeTasksCall(_callback);

    }


    private ApiResponse<Tasks> getEmployeeTasksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEmployeeTasksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmployeeTasksAsync(final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmployeeTasksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetEmployeeTasksRequestBuilder {

        private GetEmployeeTasksRequestBuilder() {
        }

        /**
         * Build call for getEmployeeTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The logged-in user&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmployeeTasksCall(_callback);
        }


        /**
         * Execute getEmployeeTasks request
         * @return Tasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The logged-in user&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public Tasks execute() throws ApiException {
            ApiResponse<Tasks> localVarResp = getEmployeeTasksWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getEmployeeTasks request with HTTP info returned
         * @return ApiResponse&lt;Tasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The logged-in user&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tasks> executeWithHttpInfo() throws ApiException {
            return getEmployeeTasksWithHttpInfo();
        }

        /**
         * Execute getEmployeeTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The logged-in user&#39;s tasks. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tasks> _callback) throws ApiException {
            return getEmployeeTasksAsync(_callback);
        }
    }

    /**
     * Read my tasks
     * &lt;b&gt;Supported user types:&lt;/b&gt; Employee.
     * @return GetEmployeeTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The logged-in user&#39;s tasks. </td><td>  -  </td></tr>
     </table>
     */
    public GetEmployeeTasksRequestBuilder getEmployeeTasks() throws IllegalArgumentException {
        return new GetEmployeeTasksRequestBuilder();
    }
    private okhttp3.Call getOpenTasksCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOpenTasksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getOpenTasksCall(_callback);

    }


    private ApiResponse<Tasks> getOpenTasksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getOpenTasksValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOpenTasksAsync(final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOpenTasksValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOpenTasksRequestBuilder {

        private GetOpenTasksRequestBuilder() {
        }

        /**
         * Build call for getOpenTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All open tasks for this company. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOpenTasksCall(_callback);
        }


        /**
         * Execute getOpenTasks request
         * @return Tasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All open tasks for this company. </td><td>  -  </td></tr>
         </table>
         */
        public Tasks execute() throws ApiException {
            ApiResponse<Tasks> localVarResp = getOpenTasksWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOpenTasks request with HTTP info returned
         * @return ApiResponse&lt;Tasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All open tasks for this company. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tasks> executeWithHttpInfo() throws ApiException {
            return getOpenTasksWithHttpInfo();
        }

        /**
         * Execute getOpenTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All open tasks for this company. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tasks> _callback) throws ApiException {
            return getOpenTasksAsync(_callback);
        }
    }

    /**
     * Read all open tasks.
     * 
     * @return GetOpenTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All open tasks for this company. </td><td>  -  </td></tr>
     </table>
     */
    public GetOpenTasksRequestBuilder getOpenTasks() throws IllegalArgumentException {
        return new GetOpenTasksRequestBuilder();
    }
    private okhttp3.Call readEmployeeTasksCall(String id, String taskStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tasks/people/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (taskStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_status", taskStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readEmployeeTasksValidateBeforeCall(String id, String taskStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling readEmployeeTasks(Async)");
        }

        return readEmployeeTasksCall(id, taskStatus, _callback);

    }


    private ApiResponse<Tasks> readEmployeeTasksWithHttpInfo(String id, String taskStatus) throws ApiException {
        okhttp3.Call localVarCall = readEmployeeTasksValidateBeforeCall(id, taskStatus, null);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call readEmployeeTasksAsync(String id, String taskStatus, final ApiCallback<Tasks> _callback) throws ApiException {

        okhttp3.Call localVarCall = readEmployeeTasksValidateBeforeCall(id, taskStatus, _callback);
        Type localVarReturnType = new TypeToken<Tasks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReadEmployeeTasksRequestBuilder {
        private final String id;
        private String taskStatus;

        private ReadEmployeeTasksRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set taskStatus
         * @param taskStatus filter tasks by open / closed status. Not sending task_status will return all tasks. (optional)
         * @return ReadEmployeeTasksRequestBuilder
         */
        public ReadEmployeeTasksRequestBuilder taskStatus(String taskStatus) {
            this.taskStatus = taskStatus;
            return this;
        }
        
        /**
         * Build call for readEmployeeTasks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All of a specific employee&#39;s open tasks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return readEmployeeTasksCall(id, taskStatus, _callback);
        }


        /**
         * Execute readEmployeeTasks request
         * @return Tasks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All of a specific employee&#39;s open tasks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Tasks execute() throws ApiException {
            ApiResponse<Tasks> localVarResp = readEmployeeTasksWithHttpInfo(id, taskStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute readEmployeeTasks request with HTTP info returned
         * @return ApiResponse&lt;Tasks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All of a specific employee&#39;s open tasks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Tasks> executeWithHttpInfo() throws ApiException {
            return readEmployeeTasksWithHttpInfo(id, taskStatus);
        }

        /**
         * Execute readEmployeeTasks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> All of a specific employee&#39;s open tasks. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Tasks> _callback) throws ApiException {
            return readEmployeeTasksAsync(id, taskStatus, _callback);
        }
    }

    /**
     * Read tasks of a specific employee 
     * 
     * @param id employee id (required)
     * @return ReadEmployeeTasksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> All of a specific employee&#39;s open tasks. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReadEmployeeTasksRequestBuilder readEmployeeTasks(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ReadEmployeeTasksRequestBuilder(id);
    }
}
