/*
 * Bob API
 * Access your employees data with the Bob API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CurrencyValue;
import com.konfigthis.client.model.Employees;
import com.konfigthis.client.model.EquityEntries;
import com.konfigthis.client.model.EquityEntry;
import com.konfigthis.client.model.Error;
import java.time.LocalDate;
import com.konfigthis.client.model.SalaryEntries;
import com.konfigthis.client.model.SalaryEntry;
import com.konfigthis.client.model.TrainingEntries;
import com.konfigthis.client.model.TrainingEntry;
import com.konfigthis.client.model.VariableEntries;
import com.konfigthis.client.model.VariableEntry;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEquityGrantCall(String id, EquityEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/equities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEquityGrantValidateBeforeCall(String id, EquityEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createEquityGrant(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createEquityGrant(Async)");
        }

        return createEquityGrantCall(id, entry, _callback);

    }


    private ApiResponse<Void> createEquityGrantWithHttpInfo(String id, EquityEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createEquityGrantValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createEquityGrantAsync(String id, EquityEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEquityGrantValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateEquityGrantRequestBuilder {
        private final Double quantity;
        private final String equityType;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private LocalDate vestingCommencementDate;
        private String consentNumber;
        private LocalDate grantDate;
        private LocalDate optionExpiration;
        private CurrencyValue exercisePrice;
        private String vestingTerm;
        private String grantType;
        private Double vestingSchedule;
        private Double grantNumber;
        private String grantStatus;

        private CreateEquityGrantRequestBuilder(Double quantity, String equityType, String id) {
            this.quantity = quantity;
            this.equityType = equityType;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set vestingCommencementDate
         * @param vestingCommencementDate Vesting commencement date. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingCommencementDate(LocalDate vestingCommencementDate) {
            this.vestingCommencementDate = vestingCommencementDate;
            return this;
        }
        
        /**
         * Set consentNumber
         * @param consentNumber Consent number. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder consentNumber(String consentNumber) {
            this.consentNumber = consentNumber;
            return this;
        }
        
        /**
         * Set grantDate
         * @param grantDate Date the equity was granted. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantDate(LocalDate grantDate) {
            this.grantDate = grantDate;
            return this;
        }
        
        /**
         * Set optionExpiration
         * @param optionExpiration Date the options expire. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder optionExpiration(LocalDate optionExpiration) {
            this.optionExpiration = optionExpiration;
            return this;
        }
        
        /**
         * Set exercisePrice
         * @param exercisePrice  (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder exercisePrice(CurrencyValue exercisePrice) {
            this.exercisePrice = exercisePrice;
            return this;
        }
        
        /**
         * Set vestingTerm
         * @param vestingTerm Terms for exercising this grant. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingTerm(String vestingTerm) {
            this.vestingTerm = vestingTerm;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType Grant type. One of: Initial Grant, Merit Grant (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set vestingSchedule
         * @param vestingSchedule The vesting schedule ID assigned to this grant. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder vestingSchedule(Double vestingSchedule) {
            this.vestingSchedule = vestingSchedule;
            return this;
        }
        
        /**
         * Set grantNumber
         * @param grantNumber The Grant number for employee. (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantNumber(Double grantNumber) {
            this.grantNumber = grantNumber;
            return this;
        }
        
        /**
         * Set grantStatus
         * @param grantStatus Grant status. one of: Granted, Pending Approval (optional)
         * @return CreateEquityGrantRequestBuilder
         */
        public CreateEquityGrantRequestBuilder grantStatus(String grantStatus) {
            this.grantStatus = grantStatus;
            return this;
        }
        
        /**
         * Build call for createEquityGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantCall(id, entry, _callback);
        }

        private EquityEntry buildBodyParams() {
            EquityEntry entry = new EquityEntry();
            return entry;
        }

        /**
         * Execute createEquityGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EquityEntry entry = buildBodyParams();
            createEquityGrantWithHttpInfo(id, entry);
        }

        /**
         * Execute createEquityGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantWithHttpInfo(id, entry);
        }

        /**
         * Execute createEquityGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EquityEntry entry = buildBodyParams();
            return createEquityGrantAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new equity grant for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Equity grant to add. (required)
     * @return CreateEquityGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEquityGrantRequestBuilder createEquityGrant(Double quantity, String equityType, String id) throws IllegalArgumentException {
        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        if (equityType == null) throw new IllegalArgumentException("\"equityType\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateEquityGrantRequestBuilder(quantity, equityType, id);
    }
    private okhttp3.Call createNewSalaryEntryCall(String id, SalaryEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewSalaryEntryValidateBeforeCall(String id, SalaryEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createNewSalaryEntry(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createNewSalaryEntry(Async)");
        }

        return createNewSalaryEntryCall(id, entry, _callback);

    }


    private ApiResponse<Void> createNewSalaryEntryWithHttpInfo(String id, SalaryEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createNewSalaryEntryValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createNewSalaryEntryAsync(String id, SalaryEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewSalaryEntryValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateNewSalaryEntryRequestBuilder {
        private final CurrencyValue base;
        private final String payPeriod;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String payFrequency;

        private CreateNewSalaryEntryRequestBuilder(CurrencyValue base, String payPeriod, String id) {
            this.base = base;
            this.payPeriod = payPeriod;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set payFrequency
         * @param payFrequency Represents the frequency the salary is paid. This can be one of: Weekly, Monthly, Pro rata, Every two weeks, Twice a month, Every four weeks. (optional)
         * @return CreateNewSalaryEntryRequestBuilder
         */
        public CreateNewSalaryEntryRequestBuilder payFrequency(String payFrequency) {
            this.payFrequency = payFrequency;
            return this;
        }
        
        /**
         * Build call for createNewSalaryEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryCall(id, entry, _callback);
        }

        private SalaryEntry buildBodyParams() {
            SalaryEntry entry = new SalaryEntry();
            return entry;
        }

        /**
         * Execute createNewSalaryEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            SalaryEntry entry = buildBodyParams();
            createNewSalaryEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createNewSalaryEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryWithHttpInfo(id, entry);
        }

        /**
         * Execute createNewSalaryEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            SalaryEntry entry = buildBodyParams();
            return createNewSalaryEntryAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new salary entry for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Salary entry to add. This must not conflict with another entry on the same effective date. (required)
     * @return CreateNewSalaryEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNewSalaryEntryRequestBuilder createNewSalaryEntry(CurrencyValue base, String payPeriod, String id) throws IllegalArgumentException {
        if (base == null) throw new IllegalArgumentException("\"base\" is required but got null");
        if (payPeriod == null) throw new IllegalArgumentException("\"payPeriod\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateNewSalaryEntryRequestBuilder(base, payPeriod, id);
    }
    private okhttp3.Call createTrainingRecordCall(String id, TrainingEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/training"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTrainingRecordValidateBeforeCall(String id, TrainingEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createTrainingRecord(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createTrainingRecord(Async)");
        }

        return createTrainingRecordCall(id, entry, _callback);

    }


    private ApiResponse<Void> createTrainingRecordWithHttpInfo(String id, TrainingEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createTrainingRecordValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createTrainingRecordAsync(String id, TrainingEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTrainingRecordValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateTrainingRecordRequestBuilder {
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String description;
        private String name;
        private CurrencyValue cost;
        private String status;
        private String frequency;
        private LocalDate startDate;
        private LocalDate endDate;
        private Double documentId;

        private CreateTrainingRecordRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set description
         * @param description Further description about the training entry. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set name
         * @param name The name of the training entry. The name must be an item in the training list field. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set cost
         * @param cost  (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder cost(CurrencyValue cost) {
            this.cost = cost;
            return this;
        }
        
        /**
         * Set status
         * @param status The status of the training entry (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set frequency
         * @param frequency The frequency of the training entry. The name must be of an item in the frequency list field. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder frequency(String frequency) {
            this.frequency = frequency;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate The date this entry becomes effective. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder startDate(LocalDate startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate The date of training completion. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder endDate(LocalDate endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set documentId
         * @param documentId ID of the document attached to this training entry. (optional)
         * @return CreateTrainingRecordRequestBuilder
         */
        public CreateTrainingRecordRequestBuilder documentId(Double documentId) {
            this.documentId = documentId;
            return this;
        }
        
        /**
         * Build call for createTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordCall(id, entry, _callback);
        }

        private TrainingEntry buildBodyParams() {
            TrainingEntry entry = new TrainingEntry();
            return entry;
        }

        /**
         * Execute createTrainingRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            TrainingEntry entry = buildBodyParams();
            createTrainingRecordWithHttpInfo(id, entry);
        }

        /**
         * Execute createTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordWithHttpInfo(id, entry);
        }

        /**
         * Execute createTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            TrainingEntry entry = buildBodyParams();
            return createTrainingRecordAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new training records for a given employee
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Training entry to add. (required)
     * @return CreateTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTrainingRecordRequestBuilder createTrainingRecord(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateTrainingRecordRequestBuilder(id);
    }
    private okhttp3.Call createVariablePaymentCall(String id, VariableEntry entry, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = entry;

        // create path and map variables
        String localVarPath = "/people/{id}/variable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVariablePaymentValidateBeforeCall(String id, VariableEntry entry, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createVariablePayment(Async)");
        }

        // verify the required parameter 'entry' is set
        if (entry == null) {
            throw new ApiException("Missing the required parameter 'entry' when calling createVariablePayment(Async)");
        }

        return createVariablePaymentCall(id, entry, _callback);

    }


    private ApiResponse<Void> createVariablePaymentWithHttpInfo(String id, VariableEntry entry) throws ApiException {
        okhttp3.Call localVarCall = createVariablePaymentValidateBeforeCall(id, entry, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call createVariablePaymentAsync(String id, VariableEntry entry, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVariablePaymentValidateBeforeCall(id, entry, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class CreateVariablePaymentRequestBuilder {
        private final CurrencyValue amount;
        private final String paymentPeriod;
        private final String id;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private String variableType;
        private Double companyPercent;
        private Double departmentPercent;
        private Double individualPercent;

        private CreateVariablePaymentRequestBuilder(CurrencyValue amount, String paymentPeriod, String id) {
            this.amount = amount;
            this.paymentPeriod = paymentPeriod;
            this.id = id;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set variableType
         * @param variableType The type of variable pay. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder variableType(String variableType) {
            this.variableType = variableType;
            return this;
        }
        
        /**
         * Set companyPercent
         * @param companyPercent The employee&#39;s company on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder companyPercent(Double companyPercent) {
            this.companyPercent = companyPercent;
            return this;
        }
        
        /**
         * Set departmentPercent
         * @param departmentPercent The employee&#39;s department on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder departmentPercent(Double departmentPercent) {
            this.departmentPercent = departmentPercent;
            return this;
        }
        
        /**
         * Set individualPercent
         * @param individualPercent The employee&#39;s individual on-target weight, in percent. (optional)
         * @return CreateVariablePaymentRequestBuilder
         */
        public CreateVariablePaymentRequestBuilder individualPercent(Double individualPercent) {
            this.individualPercent = individualPercent;
            return this;
        }
        
        /**
         * Build call for createVariablePayment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentCall(id, entry, _callback);
        }

        private VariableEntry buildBodyParams() {
            VariableEntry entry = new VariableEntry();
            return entry;
        }

        /**
         * Execute createVariablePayment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            VariableEntry entry = buildBodyParams();
            createVariablePaymentWithHttpInfo(id, entry);
        }

        /**
         * Execute createVariablePayment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentWithHttpInfo(id, entry);
        }

        /**
         * Execute createVariablePayment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            VariableEntry entry = buildBodyParams();
            return createVariablePaymentAsync(id, entry, _callback);
        }
    }

    /**
     * Creates a new variable payment for a given employee.
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;:The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @param entry Variable payment to add. (required)
     * @return CreateVariablePaymentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry added successfully </td><td>  -  </td></tr>
     </table>
     */
    public CreateVariablePaymentRequestBuilder createVariablePayment(CurrencyValue amount, String paymentPeriod, String id) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (paymentPeriod == null) throw new IllegalArgumentException("\"paymentPeriod\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new CreateVariablePaymentRequestBuilder(amount, paymentPeriod, id);
    }
    private okhttp3.Call deleteEquityGrantCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/equities/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEquityGrantValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteEquityGrant(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteEquityGrant(Async)");
        }

        return deleteEquityGrantCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteEquityGrantWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteEquityGrantValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEquityGrantAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEquityGrantValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEquityGrantRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteEquityGrantRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteEquityGrant
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEquityGrantCall(id, entryId, _callback);
        }


        /**
         * Execute deleteEquityGrant request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEquityGrantWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEquityGrant request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEquityGrantWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteEquityGrant request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEquityGrantAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes an equity grant for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteEquityGrantRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEquityGrantRequestBuilder deleteEquityGrant(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteEquityGrantRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteSalaryEntryCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSalaryEntryValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSalaryEntry(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteSalaryEntry(Async)");
        }

        return deleteSalaryEntryCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteSalaryEntryWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteSalaryEntryValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSalaryEntryAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSalaryEntryValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteSalaryEntryRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteSalaryEntryRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteSalaryEntry
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSalaryEntryCall(id, entryId, _callback);
        }


        /**
         * Execute deleteSalaryEntry request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSalaryEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteSalaryEntry request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSalaryEntryWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteSalaryEntry request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSalaryEntryAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes a salary entry from the employee&#39;s list.
     * 
     * @param id Employee ID. (required)
     * @param entryId The entry ID to delete. (required)
     * @return DeleteSalaryEntryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteSalaryEntryRequestBuilder deleteSalaryEntry(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteSalaryEntryRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteTrainingRecordCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/variable/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrainingRecordValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrainingRecord(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteTrainingRecord(Async)");
        }

        return deleteTrainingRecordCall(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteTrainingRecordWithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrainingRecordValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTrainingRecordAsync(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrainingRecordValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTrainingRecordRequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteTrainingRecordRequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteTrainingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTrainingRecordCall(id, entryId, _callback);
        }


        /**
         * Execute deleteTrainingRecord request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTrainingRecordWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTrainingRecordWithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTrainingRecordAsync(id, entryId, _callback);
        }
    }

    /**
     * Deletes a training record for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteTrainingRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTrainingRecordRequestBuilder deleteTrainingRecord(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteTrainingRecordRequestBuilder(id, entryId);
    }
    private okhttp3.Call deleteTrainingRecord_0Call(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/training/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTrainingRecord_0ValidateBeforeCall(String id, Integer entryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTrainingRecord_0(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling deleteTrainingRecord_0(Async)");
        }

        return deleteTrainingRecord_0Call(id, entryId, _callback);

    }


    private ApiResponse<Void> deleteTrainingRecord_0WithHttpInfo(String id, Integer entryId) throws ApiException {
        okhttp3.Call localVarCall = deleteTrainingRecord_0ValidateBeforeCall(id, entryId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTrainingRecord_0Async(String id, Integer entryId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTrainingRecord_0ValidateBeforeCall(id, entryId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteTrainingRecord0RequestBuilder {
        private final String id;
        private final Integer entryId;

        private DeleteTrainingRecord0RequestBuilder(String id, Integer entryId) {
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Build call for deleteTrainingRecord_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTrainingRecord_0Call(id, entryId, _callback);
        }


        /**
         * Execute deleteTrainingRecord_0 request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTrainingRecord_0WithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord_0 request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTrainingRecord_0WithHttpInfo(id, entryId);
        }

        /**
         * Execute deleteTrainingRecord_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTrainingRecord_0Async(id, entryId, _callback);
        }
    }

    /**
     * Deletes any training records for an employee.
     * 
     * @param id Employee ID. (required)
     * @param entryId The Entry ID to delete. (required)
     * @return DeleteTrainingRecord0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry deleted successfully. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteTrainingRecord0RequestBuilder deleteTrainingRecord_0(String id, Integer entryId) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new DeleteTrainingRecord0RequestBuilder(id, entryId);
    }
    private okhttp3.Call getSalaryHistoryCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/salaries"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSalaryHistoryValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSalaryHistory(Async)");
        }

        return getSalaryHistoryCall(id, _callback);

    }


    private ApiResponse<SalaryEntries> getSalaryHistoryWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getSalaryHistoryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SalaryEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSalaryHistoryAsync(String id, final ApiCallback<SalaryEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSalaryHistoryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SalaryEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSalaryHistoryRequestBuilder {
        private final String id;

        private GetSalaryHistoryRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getSalaryHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSalaryHistoryCall(id, _callback);
        }


        /**
         * Execute getSalaryHistory request
         * @return SalaryEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public SalaryEntries execute() throws ApiException {
            ApiResponse<SalaryEntries> localVarResp = getSalaryHistoryWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSalaryHistory request with HTTP info returned
         * @return ApiResponse&lt;SalaryEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SalaryEntries> executeWithHttpInfo() throws ApiException {
            return getSalaryHistoryWithHttpInfo(id);
        }

        /**
         * Execute getSalaryHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SalaryEntries> _callback) throws ApiException {
            return getSalaryHistoryAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s salary history.
     * Returns a list of salary history entries for a given employee.&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return GetSalaryHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of salary entries. </td><td>  -  </td></tr>
     </table>
     */
    public GetSalaryHistoryRequestBuilder getSalaryHistory(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetSalaryHistoryRequestBuilder(id);
    }
    private okhttp3.Call listEquityGrantsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/equities"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEquityGrantsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listEquityGrants(Async)");
        }

        return listEquityGrantsCall(id, _callback);

    }


    private ApiResponse<EquityEntries> listEquityGrantsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listEquityGrantsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EquityEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEquityGrantsAsync(String id, final ApiCallback<EquityEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEquityGrantsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EquityEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEquityGrantsRequestBuilder {
        private final String id;

        private ListEquityGrantsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listEquityGrants
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEquityGrantsCall(id, _callback);
        }


        /**
         * Execute listEquityGrants request
         * @return EquityEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public EquityEntries execute() throws ApiException {
            ApiResponse<EquityEntries> localVarResp = listEquityGrantsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEquityGrants request with HTTP info returned
         * @return ApiResponse&lt;EquityEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EquityEntries> executeWithHttpInfo() throws ApiException {
            return listEquityGrantsWithHttpInfo(id);
        }

        /**
         * Execute listEquityGrants request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EquityEntries> _callback) throws ApiException {
            return listEquityGrantsAsync(id, _callback);
        }
    }

    /**
     * List the employee&#39;s equity grants.
     * Returns a list of equity grants for a given employee.&lt;br /&gt;&lt;b&gt;Supported user types:&lt;/b&gt; Service&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListEquityGrantsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of salary equity grants. </td><td>  -  </td></tr>
     </table>
     */
    public ListEquityGrantsRequestBuilder listEquityGrants(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListEquityGrantsRequestBuilder(id);
    }
    private okhttp3.Call listTrainingRecordsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/training"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTrainingRecordsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listTrainingRecords(Async)");
        }

        return listTrainingRecordsCall(id, _callback);

    }


    private ApiResponse<TrainingEntries> listTrainingRecordsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listTrainingRecordsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TrainingEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTrainingRecordsAsync(String id, final ApiCallback<TrainingEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTrainingRecordsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TrainingEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTrainingRecordsRequestBuilder {
        private final String id;

        private ListTrainingRecordsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listTrainingRecords
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTrainingRecordsCall(id, _callback);
        }


        /**
         * Execute listTrainingRecords request
         * @return TrainingEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public TrainingEntries execute() throws ApiException {
            ApiResponse<TrainingEntries> localVarResp = listTrainingRecordsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTrainingRecords request with HTTP info returned
         * @return ApiResponse&lt;TrainingEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrainingEntries> executeWithHttpInfo() throws ApiException {
            return listTrainingRecordsWithHttpInfo(id);
        }

        /**
         * Execute listTrainingRecords request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrainingEntries> _callback) throws ApiException {
            return listTrainingRecordsAsync(id, _callback);
        }
    }

    /**
     * List the employee&#39;s training records.
     * Returns a list of training records for a given employee&lt;br /&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListTrainingRecordsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of training records. </td><td>  -  </td></tr>
     </table>
     */
    public ListTrainingRecordsRequestBuilder listTrainingRecords(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListTrainingRecordsRequestBuilder(id);
    }
    private okhttp3.Call listVariablePaymentsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/people/{id}/variable"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVariablePaymentsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listVariablePayments(Async)");
        }

        return listVariablePaymentsCall(id, _callback);

    }


    private ApiResponse<VariableEntries> listVariablePaymentsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = listVariablePaymentsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<VariableEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listVariablePaymentsAsync(String id, final ApiCallback<VariableEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVariablePaymentsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<VariableEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListVariablePaymentsRequestBuilder {
        private final String id;

        private ListVariablePaymentsRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for listVariablePayments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listVariablePaymentsCall(id, _callback);
        }


        /**
         * Execute listVariablePayments request
         * @return VariableEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public VariableEntries execute() throws ApiException {
            ApiResponse<VariableEntries> localVarResp = listVariablePaymentsWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listVariablePayments request with HTTP info returned
         * @return ApiResponse&lt;VariableEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VariableEntries> executeWithHttpInfo() throws ApiException {
            return listVariablePaymentsWithHttpInfo(id);
        }

        /**
         * Execute listVariablePayments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VariableEntries> _callback) throws ApiException {
            return listVariablePaymentsAsync(id, _callback);
        }
    }

    /**
     * List employee&#39;s variable payments
     * Returns a list of variable payments for a given employee.&lt;br /&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;.
     * @param id Employee ID. (required)
     * @return ListVariablePaymentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of variable payments. </td><td>  -  </td></tr>
     </table>
     */
    public ListVariablePaymentsRequestBuilder listVariablePayments(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new ListVariablePaymentsRequestBuilder(id);
    }
    private okhttp3.Call readHistoryCall(String department, Boolean showInactive, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (department != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("department", department));
        }

        if (showInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("showInactive", showInactive));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readHistoryValidateBeforeCall(String department, Boolean showInactive, final ApiCallback _callback) throws ApiException {
        return readHistoryCall(department, showInactive, _callback);

    }


    private ApiResponse<Employees> readHistoryWithHttpInfo(String department, Boolean showInactive) throws ApiException {
        okhttp3.Call localVarCall = readHistoryValidateBeforeCall(department, showInactive, null);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call readHistoryAsync(String department, Boolean showInactive, final ApiCallback<Employees> _callback) throws ApiException {

        okhttp3.Call localVarCall = readHistoryValidateBeforeCall(department, showInactive, _callback);
        Type localVarReturnType = new TypeToken<Employees>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ReadHistoryRequestBuilder {
        private String department;
        private Boolean showInactive;

        private ReadHistoryRequestBuilder() {
        }

        /**
         * Set department
         * @param department filter payroll for specific department. (optional)
         * @return ReadHistoryRequestBuilder
         */
        public ReadHistoryRequestBuilder department(String department) {
            this.department = department;
            return this;
        }
        
        /**
         * Set showInactive
         * @param showInactive Whether to include inactive employees in the response. (optional)
         * @return ReadHistoryRequestBuilder
         */
        public ReadHistoryRequestBuilder showInactive(Boolean showInactive) {
            this.showInactive = showInactive;
            return this;
        }
        
        /**
         * Build call for readHistory
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payroll data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return readHistoryCall(department, showInactive, _callback);
        }


        /**
         * Execute readHistory request
         * @return Employees
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payroll data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public Employees execute() throws ApiException {
            ApiResponse<Employees> localVarResp = readHistoryWithHttpInfo(department, showInactive);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute readHistory request with HTTP info returned
         * @return ApiResponse&lt;Employees&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payroll data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Employees> executeWithHttpInfo() throws ApiException {
            return readHistoryWithHttpInfo(department, showInactive);
        }

        /**
         * Execute readHistory request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Payroll data. </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Employees> _callback) throws ApiException {
            return readHistoryAsync(department, showInactive, _callback);
        }
    }

    /**
     * Read payroll history.
     * 
     * @return ReadHistoryRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Payroll data. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Unexpected error </td><td>  -  </td></tr>
     </table>
     */
    public ReadHistoryRequestBuilder readHistory() throws IllegalArgumentException {
        return new ReadHistoryRequestBuilder();
    }
    private okhttp3.Call updateEquityGrantForEmployeeCall(String id, Integer entryId, EquityEntry body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/people/{id}/equities/{entry_id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "entry_id" + "}", localVarApiClient.escapeString(entryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEquityGrantForEmployeeValidateBeforeCall(String id, Integer entryId, EquityEntry body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateEquityGrantForEmployee(Async)");
        }

        // verify the required parameter 'entryId' is set
        if (entryId == null) {
            throw new ApiException("Missing the required parameter 'entryId' when calling updateEquityGrantForEmployee(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEquityGrantForEmployee(Async)");
        }

        return updateEquityGrantForEmployeeCall(id, entryId, body, _callback);

    }


    private ApiResponse<Void> updateEquityGrantForEmployeeWithHttpInfo(String id, Integer entryId, EquityEntry body) throws ApiException {
        okhttp3.Call localVarCall = updateEquityGrantForEmployeeValidateBeforeCall(id, entryId, body, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateEquityGrantForEmployeeAsync(String id, Integer entryId, EquityEntry body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEquityGrantForEmployeeValidateBeforeCall(id, entryId, body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateEquityGrantForEmployeeRequestBuilder {
        private final Double quantity;
        private final String equityType;
        private final String id;
        private final Integer entryId;
        private Integer id;
        private String reason;
        private LocalDate effectiveDate;
        private LocalDate vestingCommencementDate;
        private String consentNumber;
        private LocalDate grantDate;
        private LocalDate optionExpiration;
        private CurrencyValue exercisePrice;
        private String vestingTerm;
        private String grantType;
        private Double vestingSchedule;
        private Double grantNumber;
        private String grantStatus;

        private UpdateEquityGrantForEmployeeRequestBuilder(Double quantity, String equityType, String id, Integer entryId) {
            this.quantity = quantity;
            this.equityType = equityType;
            this.id = id;
            this.entryId = entryId;
        }

        /**
         * Set id
         * @param id ID. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder id(Integer id) {
            this.id = id;
            return this;
        }
        
        /**
         * Set reason
         * @param reason The reason for this change. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder reason(String reason) {
            this.reason = reason;
            return this;
        }
        
        /**
         * Set effectiveDate
         * @param effectiveDate The date this entry becomes effective. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder effectiveDate(LocalDate effectiveDate) {
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        /**
         * Set vestingCommencementDate
         * @param vestingCommencementDate Vesting commencement date. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingCommencementDate(LocalDate vestingCommencementDate) {
            this.vestingCommencementDate = vestingCommencementDate;
            return this;
        }
        
        /**
         * Set consentNumber
         * @param consentNumber Consent number. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder consentNumber(String consentNumber) {
            this.consentNumber = consentNumber;
            return this;
        }
        
        /**
         * Set grantDate
         * @param grantDate Date the equity was granted. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantDate(LocalDate grantDate) {
            this.grantDate = grantDate;
            return this;
        }
        
        /**
         * Set optionExpiration
         * @param optionExpiration Date the options expire. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder optionExpiration(LocalDate optionExpiration) {
            this.optionExpiration = optionExpiration;
            return this;
        }
        
        /**
         * Set exercisePrice
         * @param exercisePrice  (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder exercisePrice(CurrencyValue exercisePrice) {
            this.exercisePrice = exercisePrice;
            return this;
        }
        
        /**
         * Set vestingTerm
         * @param vestingTerm Terms for exercising this grant. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingTerm(String vestingTerm) {
            this.vestingTerm = vestingTerm;
            return this;
        }
        
        /**
         * Set grantType
         * @param grantType Grant type. One of: Initial Grant, Merit Grant (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantType(String grantType) {
            this.grantType = grantType;
            return this;
        }
        
        /**
         * Set vestingSchedule
         * @param vestingSchedule The vesting schedule ID assigned to this grant. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder vestingSchedule(Double vestingSchedule) {
            this.vestingSchedule = vestingSchedule;
            return this;
        }
        
        /**
         * Set grantNumber
         * @param grantNumber The Grant number for employee. (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantNumber(Double grantNumber) {
            this.grantNumber = grantNumber;
            return this;
        }
        
        /**
         * Set grantStatus
         * @param grantStatus Grant status. one of: Granted, Pending Approval (optional)
         * @return UpdateEquityGrantForEmployeeRequestBuilder
         */
        public UpdateEquityGrantForEmployeeRequestBuilder grantStatus(String grantStatus) {
            this.grantStatus = grantStatus;
            return this;
        }
        
        /**
         * Build call for updateEquityGrantForEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeCall(id, entryId, body, _callback);
        }

        private EquityEntry buildBodyParams() {
            EquityEntry body = new EquityEntry();
            return body;
        }

        /**
         * Execute updateEquityGrantForEmployee request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            EquityEntry body = buildBodyParams();
            updateEquityGrantForEmployeeWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEquityGrantForEmployee request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeWithHttpInfo(id, entryId, body);
        }

        /**
         * Execute updateEquityGrantForEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            EquityEntry body = buildBodyParams();
            return updateEquityGrantForEmployeeAsync(id, entryId, body, _callback);
        }
    }

    /**
     * Updates an equity grant for an employee
     * &lt;br&gt;&lt;br&gt;&lt;b&gt;Note&lt;/b&gt;: The values of the list fields represent the list item ID and not the list item value. To obtain the corresponding list item value, use the HiBob metadata API to determine the field list name. Then, use the list item ID to locate the list item value. For more information, see &lt;a href&#x3D;&#39;https://apidocs.hibob.com/docs/how-to-work-with-lists-public-api&#39;&gt;How to work with lists Public API&lt;/a&gt;. - Basic: [] - Bearer: []
     * @param id Employee ID (required)
     * @param entryId The entry ID to update. (required)
     * @param body  (required)
     * @return UpdateEquityGrantForEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Entry updated successfully. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEquityGrantForEmployeeRequestBuilder updateEquityGrantForEmployee(Double quantity, String equityType, String id, Integer entryId) throws IllegalArgumentException {
        if (quantity == null) throw new IllegalArgumentException("\"quantity\" is required but got null");
        if (equityType == null) throw new IllegalArgumentException("\"equityType\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        if (entryId == null) throw new IllegalArgumentException("\"entryId\" is required but got null");
        return new UpdateEquityGrantForEmployeeRequestBuilder(quantity, equityType, id, entryId);
    }
}
